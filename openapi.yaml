openapi: 3.0.0
info:
  title: Moov API
  contact:
    name: Moov Developer Support
    email: help@moov.io
    url: https://moov.io
  license:
    name: Unlicensed
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |-
    Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed.
    The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST
    principles, returns JSON responses, and uses standard HTTP response codes. To learn more about how Moov
    works at a high level, read our [concepts](https://docs.moov.io/guides/get-started/glossary/) guide.
  version: latest
servers:
  - url: https://api.moov.io
    description: Production API host
    variables: {}
security:
  - BasicAuth: []
tags:
  - name: Accounts
  - name: Adjustments
  - name: Apple pay
  - name: Authentication
  - name: Bank accounts
  - name: Fee plans
  - name: Branding
  - name: Capabilities
  - name: Cards
  - name: Disputes
  - name: End to End Encryption
  - name: Enriched address
  - name: Enriched profile
  - name: Industries
  - name: Avatars
  - name: Institutions
  - name: Files
  - name: Card issuing
  - name: Issuing transactions
  - name: Onboarding
  - name: Payment links
  - name: Payment methods
  - name: Ping
  - name: Receipts
  - name: Representatives
  - name: Scheduling
  - name: Terminal Applications
  - name: Account Terminal Applications
  - name: Transfers
  - name: Underwriting
  - name: Sweeps
  - name: Wallet transactions
  - name: Wallets
paths:
  /accounts:
    post:
      operationId: createAccount
      description: |-
        You can create **business** or **individual** accounts for your users (i.e., customers, merchants) by passing the required
        information to Moov. Requirements differ per account type and requested [capabilities](https://docs.moov.io/guides/accounts/capabilities/requirements/).

        If you're requesting the `wallet`, `send-funds`, `collect-funds`, or `card-issuing` capabilities, you'll need to:
          + Send Moov the user [platform terms of service agreement](https://docs.moov.io/guides/accounts/requirements/platform-agreement/) acceptance.
            This can be done upon account creation, or by [patching](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account using the `termsOfService` field.
        If you're creating a business account with the business type `llc`, `partnership`, or `privateCorporation`, you'll need to:
          + Provide [business representatives](https://docs.moov.io/api/moov-accounts/representatives/) after creating the account.
          + [Patch](https://docs.moov.io/api/moov-accounts/accounts/patch/) the account to indicate that business representative ownership information is complete.

        Visit our documentation to read more about [creating accounts](https://docs.moov.io/guides/accounts/create-accounts/) and [verification requirements](https://docs.moov.io/guides/accounts/requirements/identity-verification/).
        Note that the `mode` field (for production or sandbox) is only required when creating a _facilitator_ account. All non-facilitator account requests will ignore the mode field and be set to the calling facilitator's mode.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
        to specify the `/accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: &ref_17
            type: string
            x-speakeasy-globals-hidden: true
            default: v2024.01.00
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_20
                  - accountID
                  - mode
                  - accountType
                  - displayName
                  - profile
                  - verification
                  - createdOn
                  - updatedOn
                properties: &ref_21
                  accountID:
                    type: string
                    format: uuid
                    description: Unique identifier for this account.
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  mode:
                    type: string
                    enum: &ref_16
                      - sandbox
                      - production
                    description: The operating mode for an account.
                    example: production
                  accountType:
                    type: string
                    enum: &ref_18
                      - individual
                      - business
                      - guest
                    description: The type of entity represented by this account.
                    example: business
                  displayName:
                    type: string
                    maxLength: 64
                    example: Whole Body Fitness
                  profile:
                    type: object
                    properties: &ref_585
                      individual:
                        type: object
                        required: &ref_499
                          - name
                        properties: &ref_500
                          name:
                            type: object
                            required: &ref_3
                              - firstName
                              - lastName
                            properties: &ref_4
                              firstName:
                                type: string
                                maxLength: 64
                                pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                                description: The individual's first given name.
                                example: Jordan
                              middleName:
                                type: string
                                maxLength: 64
                                pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                                description: The individual's second given name, if any.
                                example: Reese
                              lastName:
                                type: string
                                maxLength: 64
                                pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                                description: The individual's family name.
                                example: Lee
                              suffix:
                                type: string
                                maxLength: 20
                                pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                                description: Suffix of a given name.
                                example: Jr
                          phone:
                            type: object
                            properties: &ref_2
                              number:
                                type: string
                                maxLength: 10
                                example: '8185551212'
                              countryCode:
                                type: string
                                maxLength: 1
                                example: '1'
                          email:
                            type: string
                            maxLength: 255
                            format: email
                            example: jordan.lee@classbooker.dev
                          address:
                            type: object
                            required: &ref_0
                              - addressLine1
                              - city
                              - stateOrProvince
                              - postalCode
                              - country
                            properties: &ref_1
                              addressLine1:
                                type: string
                                maxLength: 60
                                pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                                example: 123 Main Street
                              addressLine2:
                                type: string
                                maxLength: 32
                                pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                                example: Apt 302
                              city:
                                type: string
                                maxLength: 32
                                pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                                example: Boulder
                              stateOrProvince:
                                type: string
                                maxLength: 2
                                example: CO
                              postalCode:
                                type: string
                                maxLength: 5
                                example: '80301'
                              country:
                                type: string
                                maxLength: 2
                                example: US
                          birthDateProvided:
                            type: boolean
                            description: Indicates whether this individual's birth date has been provided.
                          governmentIDProvided:
                            type: boolean
                            description: Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this individual.
                        description: Describes an individual.
                      business:
                        type: object
                        required: &ref_372
                          - legalBusinessName
                          - ownersProvided
                        properties: &ref_373
                          legalBusinessName:
                            type: string
                            maxLength: 64
                            pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                            description: The legal name under which the entity is registered.
                            example: Classbooker, LLC
                          doingBusinessAs:
                            type: string
                            maxLength: 64
                            pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                            description: A registered trade name under which the business operates, if different from its legal name.
                          businessType:
                            type: string
                            enum: &ref_9
                              - soleProprietorship
                              - unincorporatedAssociation
                              - trust
                              - publicCorporation
                              - privateCorporation
                              - llc
                              - partnership
                              - unincorporatedNonProfit
                              - incorporatedNonProfit
                              - governmentEntity
                            description: The type of entity represented by this business.
                            example: llc
                          address:
                            type: object
                            required: *ref_0
                            properties: *ref_1
                          phone:
                            type: object
                            properties: *ref_2
                          email:
                            type: string
                            maxLength: 255
                            format: email
                            example: jordan.lee@classbooker.dev
                          website:
                            type: string
                            format: uri
                            maxLength: 100
                          description:
                            type: string
                            minLength: 10
                            maxLength: 100
                            pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                            example: Local fitness gym paying out instructors
                          taxIDProvided:
                            type: boolean
                            description: Indicates whether a tax ID has been provided for this business.
                          representatives:
                            type: array
                            items:
                              type: object
                              required: &ref_135
                                - representativeID
                                - name
                                - createdOn
                                - updatedOn
                              properties: &ref_136
                                representativeID:
                                  type: string
                                  format: uuid
                                  description: Unique identifier for this representative.
                                name:
                                  type: object
                                  required: *ref_3
                                  properties: *ref_4
                                phone:
                                  type: object
                                  properties: *ref_2
                                email:
                                  type: string
                                  maxLength: 255
                                  format: email
                                  example: jordan.lee@classbooker.dev
                                address:
                                  type: object
                                  required: *ref_0
                                  properties: *ref_1
                                birthDateProvided:
                                  type: boolean
                                  description: Indicates whether this representative's birth date has been provided.
                                governmentIDProvided:
                                  type: boolean
                                  description: Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this representative.
                                responsibilities:
                                  type: object
                                  properties: &ref_140
                                    isController:
                                      type: boolean
                                      description: Indicates whether this individual has significant management responsibilities within the business.
                                    isOwner:
                                      type: boolean
                                      description: |-
                                        If `true`, this field indicates that the individual has a business ownership stake of at least 25% in the
                                        business. If the representative does not own at least 25% of the business, this field should be `false`.
                                    ownershipPercentage:
                                      type: integer
                                      description: The percentage of ownership this individual has in the business (required if `isOwner` is `true`).
                                      example: 38
                                    jobTitle:
                                      type: string
                                      maxLength: 64
                                      pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                                      example: CEO
                                  description: Describes the job responsibilities of a business representative.
                                createdOn:
                                  type: string
                                  format: date-time
                                updatedOn:
                                  type: string
                                  format: date-time
                                disabledOn:
                                  type: string
                                  format: date-time
                              description: Describes a business representative.
                          ownersProvided:
                            type: boolean
                          industryCodes:
                            type: object
                            properties: &ref_10
                              naics:
                                type: string
                                minLength: 2
                                maxLength: 6
                                example: '713940'
                              sic:
                                type: string
                                minLength: 4
                                maxLength: 4
                                example: '7991'
                              mcc:
                                type: string
                                minLength: 4
                                maxLength: 4
                                example: '7997'
                          primaryRegulator:
                            type: string
                            enum: &ref_11
                              - OCC
                              - FDIC
                              - NCUA
                              - FRB
                            description: If the business is a financial institution, this field describes its primary regulator.
                        description: Describes a business.
                      guest:
                        type: object
                        required: &ref_497
                          - name
                        properties: &ref_498
                          name:
                            type: string
                            maxLength: 64
                            pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                            description: |-
                              The name associated with the guest account.
                              This will default to "Guest {accountIDfirst8}" if no other name is provided.
                            example: Guest 75e5fbb8
                          phone:
                            type: object
                            properties: *ref_2
                          email:
                            type: string
                            maxLength: 255
                            format: email
                            example: jordan.lee@classbooker.dev
                        description: Describes a guest account profile.
                    description: Describes a Moov account profile. A profile will have a business or an individual, depending on the account's type.
                  metadata:
                    type: object
                    additionalProperties: &ref_12
                      type: string
                    description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                    example: &ref_13
                      optional: metadata
                  termsOfService:
                    type: object
                    required: &ref_638
                      - acceptedDate
                      - acceptedIP
                    properties: &ref_639
                      acceptedDate:
                        type: string
                        format: date-time
                        description: The date and time the terms of service were accepted.
                      acceptedIP:
                        type: string
                        format: ipv4
                        description: The IP address from which the terms of service were accepted.
                        example: 172.217.2.46
                    description: Describes the acceptance of the Terms of Service.
                  capabilities:
                    type: array
                    items:
                      type: object
                      required: &ref_324
                        - capability
                        - status
                      properties: &ref_325
                        capability:
                          type: string
                        status:
                          type: string
                      description: Describes an action or set of actions that an account is permitted to perform.
                  verification:
                    type: object
                    required: &ref_668
                      - status
                    properties: &ref_669
                      verificationStatus:
                        type: string
                        enum: &ref_329
                          - unverified
                          - pending
                          - resubmit
                          - review
                          - verified
                          - failed
                        description: Possible states an account verification can be in.
                        deprecated: true
                      status:
                        type: string
                        enum: &ref_670
                          - unverified
                          - pending
                          - verified
                          - errored
                        description: Possible states an account verification can be in.
                        deprecated: true
                      details:
                        type: string
                        enum: &ref_671
                          - failedAutoVerify
                          - docDobMismatch
                          - docNameMismatch
                          - docAddressMismatch
                          - docNumberMismatch
                          - docIncomplete
                          - docFailedRisk
                          - potentialAccountSanctionsMatch
                          - potentialRepresentativeSanctionsMatch
                          - failedOther
                        description: Additional detail for a verification status.
                        deprecated: true
                      documents:
                        type: array
                        items:
                          type: object
                          required: &ref_451
                            - documentID
                            - type
                            - contentType
                            - uploadedAt
                          properties: &ref_452
                            documentID:
                              type: string
                              format: uuid
                              example: e07e83e8-9429-4e99-ac99-c941f719eb39
                            type:
                              type: string
                              enum: &ref_453
                                - driversLicense
                                - passport
                                - utilityBill
                                - bankStatement
                              description: Types of documents that can be uploaded.
                              example: bankStatement
                            contentType:
                              type: string
                              description: The document's MIME type.
                              example: application/pdf
                            parseErrors:
                              type: array
                              items:
                                type: string
                              description: Optional array of errors encountered during automated parsing.
                            uploadedAt:
                              type: string
                              format: date-time
                              example: '2024-05-06T12:20:38.184Z'
                    description: Describes identity verification status and relevant identity verification documents.
                  foreignID:
                    type: string
                    maxLength: 64
                    pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                    description: Optional alias from a foreign/external system which can be used to reference this resource.
                  customerSupport:
                    type: object
                    properties: &ref_14
                      phone:
                        type: object
                        properties: *ref_2
                      email:
                        type: string
                        maxLength: 255
                        format: email
                        example: jordan.lee@classbooker.dev
                      address:
                        type: object
                        required: *ref_0
                        properties: *ref_1
                      website:
                        type: string
                        format: uri
                    description: |-
                      User-provided information that can be displayed on credit card transactions for customers to use when
                      contacting a customer support team. This data is only allowed on a business account.
                  settings:
                    type: object
                    properties: &ref_15
                      cardPayment:
                        type: object
                        properties: &ref_382
                          statementDescriptor:
                            type: string
                            minLength: 4
                            maxLength: 22
                            pattern: '[a-zA-Z0-9.!*-+_ ]+'
                            description: The description that shows up on credit card transactions. This will default to the accounts display name on account creation.
                            example: Whole Body Fitness
                        description: User provided settings to manage card payments. This data is only allowed on a business account.
                      achPayment:
                        type: object
                        required: &ref_320
                          - companyName
                        properties: &ref_321
                          companyName:
                            type: string
                            minLength: 1
                            maxLength: 16
                            pattern: '[a-zA-Z0-9- ]+'
                            description: The description that shows up on ACH transactions. This will default to the account's display name on account creation.
                            example: WholeBodyFitness
                    description: User provided settings to manage an account.
                  createdOn:
                    type: string
                    format: date-time
                    example: '2024-05-06T12:20:38.184Z'
                  updatedOn:
                    type: string
                    format: date-time
                    example: '2024-05-06T12:20:38.184Z'
                  disconnectedOn:
                    type: string
                    format: date-time
                    example: '2024-05-06T12:20:38.184Z'
                example: &ref_22
                  mode: sandbox
                  accountID: 53ca67ea-6fd3-423f-9544-ce2404159d33
                  accountType: business
                  displayName: Whole Body Fitness LLC
                  profile:
                    business:
                      legalBusinessName: Whole Body Fitness LLC
                      ownersProvided: false
                  verification:
                    verificationStatus: unverified
                    status: unverified
                  settings:
                    cardPayment:
                      statementDescriptor: Whole Body Fitness LLC
                    achPayment:
                      companyName: Whole Body Fitne
                  createdOn: '2024-12-16T17:55:20.557151867Z'
                  updatedOn: '2024-12-16T17:55:20.557151867Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_5
                  - error
                properties: &ref_6
                  error:
                    type: string
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties: &ref_397
                      accountType:
                        type: string
                      profile:
                        type: object
                        properties: &ref_23
                          individual:
                            type: object
                            properties: &ref_413
                              name:
                                type: object
                                properties: &ref_137
                                  firstName:
                                    type: string
                                  middleName:
                                    type: string
                                  lastName:
                                    type: string
                                  suffix:
                                    type: string
                              phone:
                                type: object
                                properties: &ref_8
                                  number:
                                    type: string
                                  countryCode:
                                    type: string
                              email:
                                type: string
                              address:
                                type: object
                                properties: &ref_7
                                  addressLine1:
                                    type: string
                                  addressLine2:
                                    type: string
                                  city:
                                    type: string
                                  stateOrProvince:
                                    type: string
                                  postalCode:
                                    type: string
                                  country:
                                    type: string
                              birthDate:
                                type: object
                                properties: &ref_227
                                  day:
                                    type: string
                                  month:
                                    type: string
                                  year:
                                    type: string
                              governmentID:
                                type: object
                                properties:
                                  ssn:
                                    type: object
                                    properties:
                                      full:
                                        type: string
                                      lastFour:
                                        type: string
                                  itin:
                                    type: object
                                    properties:
                                      full:
                                        type: string
                                      lastFour:
                                        type: string
                          business:
                            type: object
                            properties: &ref_404
                              legalBusinessName:
                                type: string
                              doingBusinessAs:
                                type: string
                              businessType:
                                type: string
                              address:
                                type: object
                                properties: *ref_7
                              phone:
                                type: object
                                properties: *ref_8
                              email:
                                type: string
                              website:
                                type: string
                              description:
                                type: string
                              taxID:
                                type: object
                                properties:
                                  ein:
                                    type: object
                                    properties:
                                      number:
                                        type: string
                              industryCodes:
                                type: object
                                properties:
                                  naics:
                                    type: string
                                  sic:
                                    type: string
                                  mcc:
                                    type: string
                              primaryRegulator:
                                type: string
                      metadata:
                        type: string
                      termsOfService:
                        type: object
                        properties: &ref_24
                          token:
                            type: string
                          manual:
                            type: object
                            properties:
                              acceptedDate:
                                type: string
                              acceptedDomain:
                                type: string
                              acceptedIP:
                                type: string
                              acceptedUserAgent:
                                type: string
                      foreignID:
                        type: string
                      customerSupport:
                        type: object
                        properties: &ref_25
                          phone:
                            type: object
                            properties: *ref_8
                          email:
                            type: string
                          address:
                            type: object
                            properties: *ref_7
                          website:
                            type: string
                      settings:
                        type: object
                        properties: &ref_26
                          cardPayment:
                            type: object
                            properties:
                              statementDescriptor:
                                type: string
                          achPayment:
                            type: object
                            properties:
                              companyName:
                                type: string
                      capabilities:
                        type: object
                        additionalProperties: &ref_243
                          type: string
                        example: &ref_244
                          '0': first element failed validation...
                required:
                  - error
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_240
                - accountType
                - profile
              properties: &ref_241
                accountType:
                  type: string
                  enum: &ref_398
                    - individual
                    - business
                profile:
                  type: object
                  properties: &ref_420
                    individual:
                      type: object
                      required: &ref_414
                        - name
                      properties: &ref_415
                        name:
                          type: object
                          required: *ref_3
                          properties: *ref_4
                        phone:
                          type: object
                          properties: *ref_2
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                        address:
                          type: object
                          required: *ref_0
                          properties: *ref_1
                        birthDate:
                          type: object
                          required: &ref_138
                            - day
                            - month
                            - year
                          properties: &ref_139
                            day:
                              type: integer
                              example: 9
                            month:
                              type: integer
                              example: 11
                            year:
                              type: integer
                              example: 1989
                        governmentID:
                          type: object
                          properties: &ref_27
                            ssn:
                              type: object
                              properties:
                                full:
                                  type: string
                                  pattern: ^\d{3}[-]?\d{2}[-]?\d{4}$
                                lastFour:
                                  type: string
                            itin:
                              type: object
                              properties:
                                full:
                                  type: string
                                  pattern: ^\d{3}[-]?\d{2}[-]?\d{4}$
                                lastFour:
                                  type: string
                    business:
                      type: object
                      required: &ref_405
                        - legalBusinessName
                      properties: &ref_406
                        legalBusinessName:
                          type: string
                          maxLength: 64
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                          description: The legal name under which the entity is registered.
                          example: Classbooker, LLC
                        doingBusinessAs:
                          type: string
                          maxLength: 64
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                          description: A registered trade name under which the business operates, if different from its legal name.
                        businessType:
                          type: string
                          enum: *ref_9
                          description: The type of entity represented by this business.
                          example: llc
                        address:
                          type: object
                          required: *ref_0
                          properties: *ref_1
                        phone:
                          type: object
                          properties: *ref_2
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                        website:
                          type: string
                          format: uri
                          maxLength: 100
                        description:
                          type: string
                          minLength: 10
                          maxLength: 100
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                          example: Local fitness gym paying out instructors
                        taxID:
                          type: object
                          required: &ref_630
                            - ein
                          properties: &ref_631
                            ein:
                              type: object
                              properties:
                                number:
                                  type: string
                                  example: 12-3456789
                              required:
                                - number
                          description: An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
                        industryCodes:
                          type: object
                          properties: *ref_10
                        primaryRegulator:
                          type: string
                          enum: *ref_11
                          description: If the business is a financial institution, this field describes its primary regulator.
                metadata:
                  type: object
                  additionalProperties: *ref_12
                  description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                  example: *ref_13
                termsOfService:
                  oneOf:
                    - type: object
                      required: &ref_253
                        - token
                      properties: &ref_254
                        token:
                          type: string
                          example: kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4
                      description: An encrypted value used to record acceptance of Moov's Terms of Service.
                    - type: object
                      required: &ref_538
                        - acceptedDate
                        - acceptedIP
                        - acceptedUserAgent
                        - acceptedDomain
                      properties: &ref_539
                        acceptedDate:
                          type: string
                          format: date-time
                          description: The date and time the terms of service were accepted.
                        acceptedIP:
                          type: string
                          format: ipv4
                          description: The IP address from which the terms of service were accepted.
                          example: 172.217.2.46
                        acceptedUserAgent:
                          type: string
                          maxLength: 255
                          description: The user-agent of the user making the request.
                          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36
                        acceptedDomain:
                          type: string
                          format: uri
                      description: Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
                foreignID:
                  type: string
                  maxLength: 64
                  pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                  description: Optional alias from a foreign/external system which can be used to reference this resource.
                customerSupport:
                  type: object
                  properties: *ref_14
                  description: |-
                    User-provided information that can be displayed on credit card transactions for customers to use when
                    contacting a customer support team. This data is only allowed on a business account.
                settings:
                  type: object
                  properties: *ref_15
                  description: User provided settings to manage an account.
                capabilities:
                  type: array
                  items:
                    type: string
                    enum: &ref_19
                      - transfers
                      - send-funds
                      - collect-funds
                      - wallet
                      - card-issuing
                      - production-app
                    description: |-
                      Moov account capabilities.

                      The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
                mode:
                  type: string
                  enum: *ref_16
                  description: The operating mode for an account.
                  example: production
              example: &ref_242
                accountType: business
                profile:
                  business:
                    legalBusinessName: Whole Body Fitness LLC
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.create(account_type=components.CreateAccountType.BUSINESS, profile=components.CreateProfile(
                    individual=components.CreateIndividualProfile(
                        name=components.IndividualName(
                            first_name="Jordan",
                            middle_name="Reese",
                            last_name="Lee",
                            suffix="Jr",
                        ),
                        phone=components.PhoneNumber(
                            number="8185551212",
                            country_code="1",
                        ),
                        email="jordan.lee@classbooker.dev",
                        address=components.Address(
                            address_line1="123 Main Street",
                            address_line2="Apt 302",
                            city="Boulder",
                            state_or_province="CO",
                            postal_code="80301",
                            country="US",
                        ),
                        birth_date=components.BirthDate(
                            day=9,
                            month=11,
                            year=1989,
                        ),
                    ),
                    business=components.CreateBusinessProfile(
                        legal_business_name="Classbooker, LLC",
                        business_type=components.BusinessType.LLC,
                        address=components.Address(
                            address_line1="123 Main Street",
                            address_line2="Apt 302",
                            city="Boulder",
                            state_or_province="CO",
                            postal_code="80301",
                            country="US",
                        ),
                        phone=components.PhoneNumber(
                            number="8185551212",
                            country_code="1",
                        ),
                        email="jordan.lee@classbooker.dev",
                        description="Local fitness gym paying out instructors",
                        tax_id=components.TaxID(
                            ein=components.Ein(
                                number="12-3456789",
                            ),
                        ),
                        industry_codes=components.IndustryCodes(
                            naics="713940",
                            sic="7991",
                            mcc="7997",
                        ),
                    ),
                ), metadata={
                    "optional": "metadata",
                }, terms_of_service={
                    "token": "kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4",
                }, customer_support={
                    "phone": {
                        "number": "8185551212",
                        "country_code": "1",
                    },
                    "email": "jordan.lee@classbooker.dev",
                    "address": {
                        "address_line1": "123 Main Street",
                        "address_line2": "Apt 302",
                        "city": "Boulder",
                        "state_or_province": "CO",
                        "postal_code": "80301",
                        "country": "US",
                    },
                }, settings={
                    "card_payment": {
                        "statement_descriptor": "Whole Body Fitness",
                    },
                    "ach_payment": {
                        "company_name": "WholeBodyFitness",
                    },
                }, mode=components.Mode.PRODUCTION)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.create({
                accountType: "business",
                profile: {
                  individual: {
                    name: {
                      firstName: "Jordan",
                      middleName: "Reese",
                      lastName: "Lee",
                      suffix: "Jr",
                    },
                    phone: {
                      number: "8185551212",
                      countryCode: "1",
                    },
                    email: "jordan.lee@classbooker.dev",
                    address: {
                      addressLine1: "123 Main Street",
                      addressLine2: "Apt 302",
                      city: "Boulder",
                      stateOrProvince: "CO",
                      postalCode: "80301",
                      country: "US",
                    },
                    birthDate: {
                      day: 9,
                      month: 11,
                      year: 1989,
                    },
                  },
                  business: {
                    legalBusinessName: "Classbooker, LLC",
                    businessType: "llc",
                    address: {
                      addressLine1: "123 Main Street",
                      addressLine2: "Apt 302",
                      city: "Boulder",
                      stateOrProvince: "CO",
                      postalCode: "80301",
                      country: "US",
                    },
                    phone: {
                      number: "8185551212",
                      countryCode: "1",
                    },
                    email: "jordan.lee@classbooker.dev",
                    description: "Local fitness gym paying out instructors",
                    taxID: {
                      ein: {
                        number: "12-3456789",
                      },
                    },
                    industryCodes: {
                      naics: "713940",
                      sic: "7991",
                      mcc: "7997",
                    },
                  },
                },
                metadata: {
                  "optional": "metadata",
                },
                termsOfService: {
                  token: "kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4",
                },
                customerSupport: {
                  phone: {
                    number: "8185551212",
                    countryCode: "1",
                  },
                  email: "jordan.lee@classbooker.dev",
                  address: {
                    addressLine1: "123 Main Street",
                    addressLine2: "Apt 302",
                    city: "Boulder",
                    stateOrProvince: "CO",
                    postalCode: "80301",
                    country: "US",
                  },
                },
                settings: {
                  cardPayment: {
                    statementDescriptor: "Whole Body Fitness",
                  },
                  achPayment: {
                    companyName: "WholeBodyFitness",
                  },
                },
                mode: "production",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.CreateAccountResponseBody;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateAccountResponse;
            import java.lang.Exception;
            import java.util.Map;

            public class Application {

                public static void main(String[] args) throws GenericError, CreateAccountResponseBody, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateAccountResponse res = sdk.accounts().create()
                            .createAccount(CreateAccount.builder()
                                .accountType(CreateAccountType.BUSINESS)
                                .profile(CreateProfile.builder()
                                    .individual(CreateIndividualProfile.builder()
                                        .name(IndividualName.builder()
                                            .firstName("Jordan")
                                            .lastName("Lee")
                                            .middleName("Reese")
                                            .suffix("Jr")
                                            .build())
                                        .phone(PhoneNumber.builder()
                                            .number("8185551212")
                                            .countryCode("1")
                                            .build())
                                        .email("jordan.lee@classbooker.dev")
                                        .address(Address.builder()
                                            .addressLine1("123 Main Street")
                                            .city("Boulder")
                                            .stateOrProvince("CO")
                                            .postalCode("80301")
                                            .country("US")
                                            .addressLine2("Apt 302")
                                            .build())
                                        .birthDate(BirthDate.builder()
                                            .day(9L)
                                            .month(11L)
                                            .year(1989L)
                                            .build())
                                        .build())
                                    .business(CreateBusinessProfile.builder()
                                        .legalBusinessName("Classbooker, LLC")
                                        .businessType(BusinessType.LLC)
                                        .address(Address.builder()
                                            .addressLine1("123 Main Street")
                                            .city("Boulder")
                                            .stateOrProvince("CO")
                                            .postalCode("80301")
                                            .country("US")
                                            .addressLine2("Apt 302")
                                            .build())
                                        .phone(PhoneNumber.builder()
                                            .number("8185551212")
                                            .countryCode("1")
                                            .build())
                                        .email("jordan.lee@classbooker.dev")
                                        .description("Local fitness gym paying out instructors")
                                        .taxID(TaxID.builder()
                                            .ein(Ein.builder()
                                                .number("12-3456789")
                                                .build())
                                            .build())
                                        .industryCodes(IndustryCodes.builder()
                                            .naics("713940")
                                            .sic("7991")
                                            .mcc("7997")
                                            .build())
                                        .build())
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("optional", "metadata")))
                                .termsOfService(CreateAccountTermsOfService.of(TermsOfServiceToken.builder()
                                    .token("kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4")
                                    .build()))
                                .customerSupport(CustomerSupport.builder()
                                    .phone(PhoneNumber.builder()
                                        .number("8185551212")
                                        .countryCode("1")
                                        .build())
                                    .email("jordan.lee@classbooker.dev")
                                    .address(Address.builder()
                                        .addressLine1("123 Main Street")
                                        .city("Boulder")
                                        .stateOrProvince("CO")
                                        .postalCode("80301")
                                        .country("US")
                                        .addressLine2("Apt 302")
                                        .build())
                                    .build())
                                .settings(Settings.builder()
                                    .cardPayment(CardPaymentSettings.builder()
                                        .statementDescriptor("Whole Body Fitness")
                                        .build())
                                    .achPayment(ACHPaymentSettings.builder()
                                        .companyName("WholeBodyFitness")
                                        .build())
                                    .build())
                                .mode(Mode.PRODUCTION)
                                .build())
                            .call();

                    if (res.account().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createAccount = new Components\CreateAccount(
                accountType: Components\CreateAccountType::Business,
                profile: new Components\CreateProfile(
                    business: new Components\CreateBusinessProfile(
                        legalBusinessName: 'Whole Body Fitness LLC',
                    ),
                ),
            );

            $response = $sdk->accounts->create(
                createAccount: $createAccount,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->account !== null) {
                // handle response
            }
    get:
      operationId: listAccounts
      description: |-
        List or search accounts to which the caller is connected.

        All supported query parameters are optional. If none are provided the response will include all connected accounts.
        Pagination is supported via the `skip` and `count` query parameters. Searching by name and email will overlap and 
        return results based on relevance.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
        to specify the `/accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: name
          in: query
          required: false
          description: |-
            Filter connected accounts by name.

            If provided, this query will attempt to find matches against the following Account and Profile fields:
            <ul>
              <li>Account `displayName`</li>
              <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
              <li>Business Profile `legalBusinessName`</li>
            </ul>
          schema: &ref_262
            type: string
          explode: false
        - name: email
          in: query
          required: false
          description: |2-
              Filter connected accounts by email address.

              Provide the full email address to filter by email.
          schema: &ref_258
            type: string
          explode: false
        - name: type
          in: query
          required: false
          description: |2-
              Filter connected accounts by AccountType.

              If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will
              be searched. For example, if `type=business` and `name=moov`, the search will attempt to find matches against
              the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
          schema: &ref_263
            type: string
            enum: *ref_18
            description: The type of entity represented by this account.
            example: business
          explode: false
        - name: includeGuest
          in: query
          required: false
          description: |2-
              Filter accounts with AccountType guest.
              
              If true, the response will include guest accounts.
          schema: &ref_261
            type: boolean
          explode: false
        - name: foreignID
          in: query
          required: false
          description: '  Serves as an optional alias from a foreign/external system which can be used to reference this resource.'
          schema: &ref_259
            type: string
            pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
          explode: false
        - name: includeDisconnected
          in: query
          required: false
          description: |-
            Filter disconnected accounts.

            If true, the response will include disconnected accounts.
          schema: &ref_260
            type: boolean
          explode: false
        - name: capability
          in: query
          required: false
          description: '  Filter connected accounts by the capability.'
          schema: &ref_256
            type: string
            enum: *ref_19
            description: |-
              Moov account capabilities.

              The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
          explode: false
        - name: capabilityStatus
          in: query
          required: false
          description: '  Filter connected accounts by the capability.'
          schema: &ref_257
            type: string
            enum: &ref_53
              - enabled
              - disabled
              - pending
              - in-review
            description: The status of the capability requested for an account.
          explode: false
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            format: int64
            description: The number of entries to skip when paginating a large result set.
            example: 60
          explode: false
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int64
            description: Limits the maximum number of results returned, or determines the page size when used with `skip` for pagination.
            example: 20
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_20
                  properties: *ref_21
                  example: *ref_22
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.list(type_=components.AccountType.BUSINESS, skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.list({
                type: "business",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.AccountType;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListAccountsRequest;
            import io.moov.sdk.models.operations.ListAccountsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListAccountsRequest req = ListAccountsRequest.builder()
                            .type(AccountType.BUSINESS)
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListAccountsResponse res = sdk.accounts().list()
                            .request(req)
                            .call();

                    if (res.accounts().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListAccountsRequest(
                type: Components\AccountType::Business,
                skip: 60,
                count: 20,
            );

            $response = $sdk->accounts->list(
                request: $request
            );

            if ($response->accounts !== null) {
                // handle response
            }
  /accounts/{accountID}:
    get:
      operationId: getAccount
      description: |-
        Retrieves details for the account with the specified ID.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
        to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_20
                properties: *ref_21
                example: *ref_22
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetAccountResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetAccountResponse res = sdk.accounts().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .call();

                    if (res.account().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->account !== null) {
                // handle response
            }
    patch:
      operationId: updateAccount
      description: |-
        When **can** profile data be updated:
          + For unverified accounts, all profile data can be edited.
          + During the verification process, missing or incomplete profile data can be edited.
          + Verified accounts can only add missing profile data.

          When **can't** profile data be updated:
          + Verified accounts cannot change any existing profile data.

        If you need to update information in a locked state, please contact Moov support.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
        to specify the `/accounts/{accountID}/profile.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_20
                properties: *ref_21
                example: *ref_22
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties: &ref_562
                      profile:
                        type: object
                        properties: *ref_23
                      metadata:
                        type: string
                      termsOfService:
                        type: object
                        properties: *ref_24
                      foreignID:
                        type: string
                      customerSupport:
                        type: object
                        properties: *ref_25
                      settings:
                        type: object
                        properties: *ref_26
                required:
                  - error
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_561
                profile:
                  type: object
                  properties: &ref_565
                    individual:
                      type: object
                      properties: &ref_564
                        name:
                          type: object
                          properties: &ref_141
                            firstName:
                              type: string
                              maxLength: 64
                              pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                              description: The individual's first given name.
                              example: Jordan
                            middleName:
                              type: string
                              maxLength: 64
                              pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                              description: The individual's second given name, if any.
                              example: Reese
                            lastName:
                              type: string
                              maxLength: 64
                              pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                              description: The individual's family name.
                              example: Lee
                            suffix:
                              type: string
                              maxLength: 20
                              pattern: '[À-ÖØ-öø-ÿ"''(),-.0-9A-Za-z~ &!]*'
                              description: Suffix of a given name.
                              example: Jr
                        phone:
                          type: object
                          properties: *ref_2
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                        address:
                          type: object
                          properties: &ref_28
                            addressLine1:
                              type: string
                              maxLength: 60
                              pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                              example: 123 Main Street
                            addressLine2:
                              type: string
                              maxLength: 32
                              pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                              example: Apt 302
                            city:
                              type: string
                              maxLength: 32
                              pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                              example: Boulder
                            stateOrProvince:
                              type: string
                              maxLength: 2
                              example: CO
                            postalCode:
                              type: string
                              maxLength: 5
                              example: '80301'
                            country:
                              type: string
                              maxLength: 2
                              example: US
                        birthDate:
                          type: object
                          properties: &ref_142
                            day:
                              type: integer
                              example: 9
                            month:
                              type: integer
                              example: 11
                            year:
                              type: integer
                              example: 1989
                        governmentID:
                          type: object
                          properties: *ref_27
                      description: Describes the fields available when patching an individual.
                    business:
                      type: object
                      properties: &ref_563
                        legalBusinessName:
                          type: string
                          maxLength: 64
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                        doingBusinessAs:
                          type: string
                          maxLength: 64
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                        businessType:
                          type: string
                          enum: *ref_9
                          description: The type of entity represented by this business.
                          example: llc
                        address:
                          type: object
                          properties: *ref_28
                        phone:
                          type: object
                          properties: *ref_2
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                        website:
                          type: string
                          maxLength: 100
                        description:
                          type: string
                          minLength: 10
                          maxLength: 100
                          pattern: '[a-zA-Z0-9,./?:''"|~!@#$%^&*()-+_= ]+'
                        taxID:
                          type: object
                          properties: &ref_632
                            ein:
                              type: object
                              properties:
                                number:
                                  type: string
                                  example: 12-3456789
                          description: An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
                        ownersProvided:
                          type: boolean
                        industryCodes:
                          type: object
                          properties: *ref_10
                        primaryRegulator:
                          type: string
                          enum: *ref_11
                          description: If the business is a financial institution, this field describes its primary regulator.
                  description: |-
                    Describes the fields available when patching a profile.
                    Each object can be patched independent of patching the other fields.
                metadata:
                  type: object
                  allOf:
                    - type: object
                      additionalProperties: *ref_12
                      description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                      example: *ref_13
                  nullable: true
                termsOfService:
                  oneOf:
                    - type: object
                      properties: &ref_640
                        token:
                          type: string
                          example: kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4
                      description: An encrypted value used to record acceptance of Moov's Terms of Service.
                    - type: object
                      properties: &ref_540
                        acceptedDate:
                          type: string
                          format: date-time
                          description: The date and time the terms of service were accepted.
                        acceptedIP:
                          type: string
                          format: ipv4
                          description: The IP address from which the terms of service were accepted.
                          example: 172.217.2.46
                        acceptedUserAgent:
                          type: string
                          maxLength: 255
                          description: The user-agent of the user making the request.
                          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36
                        acceptedDomain:
                          type: string
                          format: uri
                      description: Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
                foreignID:
                  type: string
                customerSupport:
                  type: object
                  allOf:
                    - type: object
                      properties: &ref_447
                        phone:
                          type: object
                          properties: *ref_2
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                        address:
                          type: object
                          properties: *ref_28
                        website:
                          type: string
                          format: uri
                      description: |-
                        User-provided information that can be displayed on credit card transactions for customers to use when
                        contacting a customer support team. This data is only allowed on a business account.
                  nullable: true
                settings:
                  type: object
                  properties: *ref_26
              description: Describes the fields available when patching a Moov account.
      x-speakeasy-name-override: updateProfile
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.update(account_id="95fa7f0e-7432-4ce4-a7cb-60cc78135dde", profile=components.PatchProfile(
                    individual=components.PatchIndividual(
                        name=components.IndividualNameUpdate(
                            first_name="Jordan",
                            middle_name="Reese",
                            last_name="Lee",
                            suffix="Jr",
                        ),
                        phone=components.PhoneNumber(
                            number="8185551212",
                            country_code="1",
                        ),
                        email="jordan.lee@classbooker.dev",
                        address=components.AddressUpdate(
                            address_line1="123 Main Street",
                            address_line2="Apt 302",
                            city="Boulder",
                            state_or_province="CO",
                            postal_code="80301",
                            country="US",
                        ),
                        birth_date=components.BirthDateUpdate(
                            day=9,
                            month=11,
                            year=1989,
                        ),
                    ),
                    business=components.PatchBusiness(
                        business_type=components.BusinessType.LLC,
                        address=components.AddressUpdate(
                            address_line1="123 Main Street",
                            address_line2="Apt 302",
                            city="Boulder",
                            state_or_province="CO",
                            postal_code="80301",
                            country="US",
                        ),
                        phone=components.PhoneNumber(
                            number="8185551212",
                            country_code="1",
                        ),
                        email="jordan.lee@classbooker.dev",
                        tax_id=components.TaxIDUpdate(
                            ein=components.TaxIDUpdateEin(
                                number="12-3456789",
                            ),
                        ),
                        industry_codes=components.IndustryCodes(
                            naics="713940",
                            sic="7991",
                            mcc="7997",
                        ),
                    ),
                ), metadata={
                    "optional": "metadata",
                }, terms_of_service={
                    "accepted_ip": "172.217.2.46",
                    "accepted_user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
                }, customer_support={
                    "phone": {
                        "number": "8185551212",
                        "country_code": "1",
                    },
                    "email": "jordan.lee@classbooker.dev",
                    "address": {
                        "address_line1": "123 Main Street",
                        "address_line2": "Apt 302",
                        "city": "Boulder",
                        "state_or_province": "CO",
                        "postal_code": "80301",
                        "country": "US",
                    },
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.update({
                accountID: "95fa7f0e-7432-4ce4-a7cb-60cc78135dde",
                patchAccount: {
                  profile: {
                    individual: {
                      name: {
                        firstName: "Jordan",
                        middleName: "Reese",
                        lastName: "Lee",
                        suffix: "Jr",
                      },
                      phone: {
                        number: "8185551212",
                        countryCode: "1",
                      },
                      email: "jordan.lee@classbooker.dev",
                      address: {
                        addressLine1: "123 Main Street",
                        addressLine2: "Apt 302",
                        city: "Boulder",
                        stateOrProvince: "CO",
                        postalCode: "80301",
                        country: "US",
                      },
                      birthDate: {
                        day: 9,
                        month: 11,
                        year: 1989,
                      },
                    },
                    business: {
                      businessType: "llc",
                      address: {
                        addressLine1: "123 Main Street",
                        addressLine2: "Apt 302",
                        city: "Boulder",
                        stateOrProvince: "CO",
                        postalCode: "80301",
                        country: "US",
                      },
                      phone: {
                        number: "8185551212",
                        countryCode: "1",
                      },
                      email: "jordan.lee@classbooker.dev",
                      taxID: {
                        ein: {
                          number: "12-3456789",
                        },
                      },
                      industryCodes: {
                        naics: "713940",
                        sic: "7991",
                        mcc: "7997",
                      },
                    },
                  },
                  metadata: {
                    "optional": "metadata",
                  },
                  termsOfService: {
                    acceptedIP: "172.217.2.46",
                    acceptedUserAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
                  },
                  customerSupport: {
                    phone: {
                      number: "8185551212",
                      countryCode: "1",
                    },
                    email: "jordan.lee@classbooker.dev",
                    address: {
                      addressLine1: "123 Main Street",
                      addressLine2: "Apt 302",
                      city: "Boulder",
                      stateOrProvince: "CO",
                      postalCode: "80301",
                      country: "US",
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.UpdateAccountResponseBody;
            import io.moov.sdk.models.operations.UpdateAccountResponse;
            import java.lang.Exception;
            import java.util.Map;

            public class Application {

                public static void main(String[] args) throws GenericError, UpdateAccountResponseBody, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateAccountResponse res = sdk.accounts().update()
                            .accountID("95fa7f0e-7432-4ce4-a7cb-60cc78135dde")
                            .patchAccount(PatchAccount.builder()
                                .profile(PatchProfile.builder()
                                    .individual(PatchIndividual.builder()
                                        .name(IndividualNameUpdate.builder()
                                            .firstName("Jordan")
                                            .middleName("Reese")
                                            .lastName("Lee")
                                            .suffix("Jr")
                                            .build())
                                        .phone(PhoneNumber.builder()
                                            .number("8185551212")
                                            .countryCode("1")
                                            .build())
                                        .email("jordan.lee@classbooker.dev")
                                        .address(AddressUpdate.builder()
                                            .addressLine1("123 Main Street")
                                            .addressLine2("Apt 302")
                                            .city("Boulder")
                                            .stateOrProvince("CO")
                                            .postalCode("80301")
                                            .country("US")
                                            .build())
                                        .birthDate(BirthDateUpdate.builder()
                                            .day(9L)
                                            .month(11L)
                                            .year(1989L)
                                            .build())
                                        .build())
                                    .business(PatchBusiness.builder()
                                        .businessType(BusinessType.LLC)
                                        .address(AddressUpdate.builder()
                                            .addressLine1("123 Main Street")
                                            .addressLine2("Apt 302")
                                            .city("Boulder")
                                            .stateOrProvince("CO")
                                            .postalCode("80301")
                                            .country("US")
                                            .build())
                                        .phone(PhoneNumber.builder()
                                            .number("8185551212")
                                            .countryCode("1")
                                            .build())
                                        .email("jordan.lee@classbooker.dev")
                                        .taxID(TaxIDUpdate.builder()
                                            .ein(TaxIDUpdateEin.builder()
                                                .number("12-3456789")
                                                .build())
                                            .build())
                                        .industryCodes(IndustryCodes.builder()
                                            .naics("713940")
                                            .sic("7991")
                                            .mcc("7997")
                                            .build())
                                        .build())
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("optional", "metadata")))
                                .termsOfService(PatchAccountTermsOfService.of(ManualTermsOfServiceUpdate.builder()
                                    .acceptedIP("172.217.2.46")
                                    .acceptedUserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36")
                                    .build()))
                                .customerSupport(PatchAccountCustomerSupport.builder()
                                    .phone(PhoneNumber.builder()
                                        .number("8185551212")
                                        .countryCode("1")
                                        .build())
                                    .email("jordan.lee@classbooker.dev")
                                    .address(AddressUpdate.builder()
                                        .addressLine1("123 Main Street")
                                        .addressLine2("Apt 302")
                                        .city("Boulder")
                                        .stateOrProvince("CO")
                                        .postalCode("80301")
                                        .country("US")
                                        .build())
                                    .build())
                                .build())
                            .call();

                    if (res.account().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $patchAccount = new Components\PatchAccount(
                profile: new Components\PatchProfile(
                    individual: new Components\PatchIndividual(
                        name: new Components\IndividualNameUpdate(
                            firstName: 'Jordan',
                            middleName: 'Reese',
                            lastName: 'Lee',
                            suffix: 'Jr',
                        ),
                        phone: new Components\PhoneNumber(
                            number: '8185551212',
                            countryCode: '1',
                        ),
                        email: 'jordan.lee@classbooker.dev',
                        address: new Components\AddressUpdate(
                            addressLine1: '123 Main Street',
                            addressLine2: 'Apt 302',
                            city: 'Boulder',
                            stateOrProvince: 'CO',
                            postalCode: '80301',
                            country: 'US',
                        ),
                        birthDate: new Components\BirthDateUpdate(
                            day: 9,
                            month: 11,
                            year: 1989,
                        ),
                    ),
                    business: new Components\PatchBusiness(
                        businessType: Components\BusinessType::Llc,
                        address: new Components\AddressUpdate(
                            addressLine1: '123 Main Street',
                            addressLine2: 'Apt 302',
                            city: 'Boulder',
                            stateOrProvince: 'CO',
                            postalCode: '80301',
                            country: 'US',
                        ),
                        phone: new Components\PhoneNumber(
                            number: '8185551212',
                            countryCode: '1',
                        ),
                        email: 'jordan.lee@classbooker.dev',
                        taxID: new Components\TaxIDUpdate(
                            ein: new Components\TaxIDUpdateEin(
                                number: '12-3456789',
                            ),
                        ),
                        industryCodes: new Components\IndustryCodes(
                            naics: '713940',
                            sic: '7991',
                            mcc: '7997',
                        ),
                    ),
                ),
                metadata: [
                    'optional' => 'metadata',
                ],
                termsOfService: new Components\TermsOfServiceTokenUpdate(
                    token: 'kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4',
                ),
                customerSupport: new Components\PatchAccountCustomerSupport(
                    phone: new Components\PhoneNumber(
                        number: '8185551212',
                        countryCode: '1',
                    ),
                    email: 'jordan.lee@classbooker.dev',
                    address: new Components\AddressUpdate(
                        addressLine1: '123 Main Street',
                        addressLine2: 'Apt 302',
                        city: 'Boulder',
                        stateOrProvince: 'CO',
                        postalCode: '80301',
                        country: 'US',
                    ),
                ),
            );

            $response = $sdk->accounts->updateProfile(
                accountID: '771225fd-e1c9-4f0c-8923-ea7469eccb9c',
                patchAccount: $patchAccount,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->account !== null) {
                // handle response
            }
    delete:
      operationId: disconnectAccount
      description: |-
        This will sever the connection between you and the account specified and it will no longer be listed as 
        active in the list of accounts. This also means you'll only have read-only access to the account going 
        forward for reporting purposes.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.disconnect` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-speakeasy-name-override: disconnect
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.disconnect(account_id="ac3cbe09-fcd4-4c5e-ada2-89eaaa9c149e")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.disconnect({
                accountID: "ac3cbe09-fcd4-4c5e-ada2-89eaaa9c149e",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DisconnectAccountResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DisconnectAccountResponse res = sdk.accounts().disconnect()
                            .accountID("ac3cbe09-fcd4-4c5e-ada2-89eaaa9c149e")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->disconnect(
                accountID: 'ac3cbe09-fcd4-4c5e-ada2-89eaaa9c149e',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/adjustments:
    get:
      operationId: listAdjustments
      description: |-
        List adjustments associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: walletID
          in: query
          required: false
          description: A wallet ID to filter adjustments by.
          schema:
            type: string
            format: uuid
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_29
                    - adjustmentID
                    - walletID
                    - amount
                    - createdOn
                  properties: &ref_30
                    adjustmentID:
                      type: string
                      format: uuid
                    walletID:
                      type: string
                      format: uuid
                    amount:
                      type: object
                      required: &ref_84
                        - currency
                        - valueDecimal
                      properties: &ref_85
                        currency:
                          type: string
                          pattern: ^[A-Za-z]{3}$
                          description: A 3-letter ISO 4217 currency code.
                          example: USD
                        valueDecimal:
                          type: string
                          pattern: ^\d+\.\d{1,9}$
                          description: |-
                            A decimal-formatted numerical string that represents up to 9 decimal place precision. 

                            For example, $12.987654321 is '12.987654321'.
                          example: '12.987654321'
                    createdOn:
                      type: string
                      format: date-time
                  description: An adjustment to a wallet.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Adjustments
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.adjustments.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.adjustments.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListAdjustmentsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListAdjustmentsResponse res = sdk.adjustments().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.adjustments().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->adjustments->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00',
                walletID: '21e27667-18d6-4d46-812e-0aee1b9ddf12'

            );

            if ($response->adjustments !== null) {
                // handle response
            }
  /accounts/{accountID}/adjustments/{adjustmentID}:
    get:
      operationId: getAdjustment
      description: |-
        Retrieve a specific adjustment associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: adjustmentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_29
                properties: *ref_30
                description: An adjustment to a wallet.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Adjustments
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.adjustments.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", adjustment_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.adjustments.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                adjustmentID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetAdjustmentResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetAdjustmentResponse res = sdk.adjustments().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .adjustmentID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.adjustment().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->adjustments->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                adjustmentID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->adjustment !== null) {
                // handle response
            }
  /accounts/{accountID}/apple-pay/domains:
    post:
      operationId: registerApplePayMerchantDomains
      description: |-
        Add domains to be registered with Apple Pay.

        Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) 
        with Apple.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the Moov account representing the merchant.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_31
                  - accountID
                  - displayName
                  - domains
                  - createdOn
                  - updatedOn
                properties: &ref_32
                  accountID:
                    type: string
                  displayName:
                    type: string
                    maxLength: 64
                    description: A UTF-8 string to display in the Buy button.
                  domains:
                    type: array
                    items:
                      type: string
                    description: A unique list of fully-qualified, top-level or sub-domain names where you will accept Apple Pay.
                    example:
                      - checkout.classbooker.dev
                  createdOn:
                    type: string
                    format: date-time
                  updatedOn:
                    type: string
                    format: date-time
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: Apple Pay domains are already registered for this account.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '417':
          description: The requested domains were not verified.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Apple pay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_607
                displayName:
                  type: string
                  maxLength: 64
                  description: A UTF-8 string to display in the Buy button.
                domains:
                  type: array
                  items:
                    type: string
                  description: A unique list of fully-qualified, top-level or sub-domain names where you will accept Apple Pay.
                  example:
                    - checkout.classbooker.dev
      x-speakeasy-name-override: registerDomains
      x-speakeasy-group: applePay
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.apple_pay.register_merchant_domains(account_id="c62b8770-bdbc-406f-8160-fddb553f5b33", domains=[
                    "checkout.classbooker.dev",
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.applePay.registerMerchantDomains({
                accountID: "c62b8770-bdbc-406f-8160-fddb553f5b33",
                registerApplePayMerchantDomains: {
                  domains: [
                    "checkout.classbooker.dev",
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.RegisterApplePayMerchantDomains;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.RegisterApplePayMerchantDomainsResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RegisterApplePayMerchantDomainsResponse res = sdk.applePay().registerMerchantDomains()
                            .accountID("c62b8770-bdbc-406f-8160-fddb553f5b33")
                            .registerApplePayMerchantDomains(RegisterApplePayMerchantDomains.builder()
                                .domains(List.of(
                                    "checkout.classbooker.dev"))
                                .build())
                            .call();

                    if (res.applePayMerchantDomains().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $registerApplePayMerchantDomains = new Components\RegisterApplePayMerchantDomains(
                domains: [
                    'checkout.classbooker.dev',
                ],
            );

            $response = $sdk->applePay->registerDomains(
                accountID: '5b4d5840-3ab6-4fa6-abfe-78b73509622c',
                registerApplePayMerchantDomains: $registerApplePayMerchantDomains,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->applePayMerchantDomains !== null) {
                // handle response
            }
    patch:
      operationId: updateApplePayMerchantDomains
      description: |-
        Add or remove domains to be registered with Apple Pay. 

        Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) 
        with Apple.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the Moov account representing the merchant.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: Apple Pay domains are already registered for this account.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '417':
          description: The requested domains were not verified.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Apple pay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_647
                addDomains:
                  type: array
                  items:
                    type: string
                  description: A unique list of fully-qualified, top-level or sub-domain names to add.
                  example:
                    - pay.classbooker.dev
                removeDomains:
                  type: array
                  items:
                    type: string
                  description: A unique list of fully-qualified, top-level or sub-domain names to remove.
                  example:
                    - checkout.classbooker.dev
      x-speakeasy-name-override: updateDomains
      x-speakeasy-group: applePay
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.apple_pay.update_merchant_domains(account_id="4dfea880-7ff8-42f8-bc8d-392cba179113", add_domains=[
                    "pay.classbooker.dev",
                ], remove_domains=[
                    "checkout.classbooker.dev",
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.applePay.updateMerchantDomains({
                accountID: "4dfea880-7ff8-42f8-bc8d-392cba179113",
                updateApplePayMerchantDomains: {
                  addDomains: [
                    "pay.classbooker.dev",
                  ],
                  removeDomains: [
                    "checkout.classbooker.dev",
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.components.UpdateApplePayMerchantDomains;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UpdateApplePayMerchantDomainsResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateApplePayMerchantDomainsResponse res = sdk.applePay().updateMerchantDomains()
                            .accountID("4dfea880-7ff8-42f8-bc8d-392cba179113")
                            .updateApplePayMerchantDomains(UpdateApplePayMerchantDomains.builder()
                                .addDomains(List.of(
                                    "pay.classbooker.dev"))
                                .removeDomains(List.of(
                                    "checkout.classbooker.dev"))
                                .build())
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateApplePayMerchantDomains = new Components\UpdateApplePayMerchantDomains(
                addDomains: [
                    'pay.classbooker.dev',
                ],
                removeDomains: [
                    'checkout.classbooker.dev',
                ],
            );

            $response = $sdk->applePay->updateDomains(
                accountID: 'fe4e9441-9183-485f-8a28-9a504a3532f3',
                updateApplePayMerchantDomains: $updateApplePayMerchantDomains,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
    get:
      operationId: getApplePayMerchantDomains
      description: |-
        Get domains registered with Apple Pay. 

        Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/apple-pay.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the Moov account representing the merchant.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_31
                properties: *ref_32
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Apple pay
      x-speakeasy-name-override: getDomains
      x-speakeasy-group: applePay
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.apple_pay.get_merchant_domains(account_id="5f873241-11ec-45e4-929d-00a704a9b582")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.applePay.getMerchantDomains({
                accountID: "5f873241-11ec-45e4-929d-00a704a9b582",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetApplePayMerchantDomainsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetApplePayMerchantDomainsResponse res = sdk.applePay().getMerchantDomains()
                            .accountID("5f873241-11ec-45e4-929d-00a704a9b582")
                            .call();

                    if (res.applePayMerchantDomains().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->applePay->getDomains(
                accountID: '486e0cf0-bf76-4dfc-a770-a81e03b0e07d',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->applePayMerchantDomains !== null) {
                // handle response
            }
  /accounts/{accountID}/apple-pay/sessions:
    post:
      operationId: createApplePaySession
      description: |-
        Create a session with Apple Pay to facilitate a payment. 

        Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more. 
        A successful response from this endpoint should be passed through to Apple Pay unchanged. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the Moov account representing the merchant.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: string
                description: |-
                  Stringified session object returned from Apple Pay.

                  The string value should be deserialized as a JSON object before passing to Apple.
                example: '{"epochTimestamp":1733783167685,"expiresAt":1733786767685...}'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Apple pay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_399
                - domain
                - displayName
              properties: &ref_400
                domain:
                  type: string
                  description: A fully qualified top-level or sub-domain name where you will accept Apple Pay. Should not include "https".
                  example: checkout.classbooker.dev
                displayName:
                  type: string
                  maxLength: 64
                  description: A UTF-8 string to display in the Buy button.
      x-speakeasy-name-override: createSession
      x-speakeasy-group: applePay
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.apple_pay.create_session(account_id="7f4bef45-927c-48cf-9312-d337467ac9fb", domain="checkout.classbooker.dev", display_name="Kaylee40")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.applePay.createSession({
                accountID: "7f4bef45-927c-48cf-9312-d337467ac9fb",
                createApplePaySession: {
                  domain: "checkout.classbooker.dev",
                  displayName: "Kaylee40",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CreateApplePaySession;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateApplePaySessionResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateApplePaySessionResponse res = sdk.applePay().createSession()
                            .accountID("7f4bef45-927c-48cf-9312-d337467ac9fb")
                            .createApplePaySession(CreateApplePaySession.builder()
                                .domain("checkout.classbooker.dev")
                                .displayName("Kaylee40")
                                .build())
                            .call();

                    if (res.applePaySession().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createApplePaySession = new Components\CreateApplePaySession(
                domain: 'checkout.classbooker.dev',
                displayName: 'Kaylee40',
            );

            $response = $sdk->applePay->createSession(
                accountID: '7f4bef45-927c-48cf-9312-d337467ac9fb',
                createApplePaySession: $createApplePaySession,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->applePaySession !== null) {
                // handle response
            }
  /accounts/{accountID}/apple-pay/tokens:
    post:
      operationId: linkApplePayToken
      description: |-
        Connect an Apple Pay token to the specified account. 

        Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more. 
        The `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the Moov account representing the cardholder.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_533
                  - paymentMethodID
                  - paymentMethodType
                  - applePay
                properties: &ref_534
                  paymentMethodID:
                    type: string
                    format: uuid
                    description: The new payment method's ID.
                  paymentMethodType:
                    type: string
                    enum: &ref_33
                      - moov-wallet
                      - ach-debit-fund
                      - ach-debit-collect
                      - ach-credit-standard
                      - ach-credit-same-day
                      - rtp-credit
                      - card-payment
                      - push-to-card
                      - pull-from-card
                      - apple-pay
                      - card-present-payment
                    description: The payment method type that represents a payment rail and directionality
                  applePay:
                    type: object
                    required: &ref_131
                      - brand
                      - cardType
                      - cardDisplayName
                      - fingerprint
                      - expiration
                      - dynamicLastFour
                    properties: &ref_132
                      brand:
                        type: string
                        enum: &ref_57
                          - American Express
                          - Discover
                          - Mastercard
                          - Visa
                          - Unknown
                        description: The card brand.
                        example: Visa
                      cardType:
                        type: string
                        enum: &ref_58
                          - debit
                          - credit
                          - prepaid
                          - unknown
                        description: The type of the card.
                        example: credit
                      cardDisplayName:
                        type: string
                        description: |2-
                            User-friendly name of the tokenized card returned by Apple.
                            
                            It usually contains the brand and the last four digits of the underlying card.
                            There is no standard format.
                        example: Visa 1256
                      fingerprint:
                        type: string
                        maxLength: 100
                        description: |-
                          Uniquely identifies a linked payment card or token.
                          For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
                          This field can be used to identify specific payment methods across multiple accounts on your platform.
                        example: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                      expiration:
                        type: object
                        required: &ref_59
                          - month
                          - year
                        properties: &ref_60
                          month:
                            type: string
                            minLength: 2
                            maxLength: 2
                          year:
                            type: string
                            minLength: 2
                            maxLength: 2
                        description: The expiration date of the card or token.
                        example: &ref_61
                          month: '01'
                          year: '21'
                      dynamicLastFour:
                        type: string
                        description: The last four digits of the Apple Pay token, which may differ from the tokenized card's last four digits.
                      issuerCountry:
                        type: string
                        description: Country where the underlying card was issued.
                        example: US
                    description: Describes an Apple Pay token on a Moov account.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_520
                  error:
                    type: string
                    description: Describes an error that wasn't attributable to a single request field.
                  paymentData:
                    type: string
                    description: Describes an error within the `token.paymentData` request field.
                  paymentMethod:
                    type: string
                    description: Describes an error within the `token.paymentMethod` request field.
                  transactionIdentifier:
                    type: string
                    description: Describes an error within the `token.transactionIdentifier` request field.
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Apple pay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_518
                - token
              properties: &ref_519
                token:
                  type: object
                  required: &ref_521
                    - paymentData
                    - paymentMethod
                    - transactionIdentifier
                  properties: &ref_522
                    paymentData:
                      type: object
                      required: &ref_523
                        - version
                        - data
                        - signature
                        - header
                      properties: &ref_524
                        version:
                          type: string
                          description: Specifies the encryption used for the payment token ("EC_v1" or "RSA_v1").
                          example: EC_v1
                        data:
                          type: string
                          description: The encrypted, base64-encoded payment data.
                          example: 3+f4oOTwPa6f1UZ6tG...CE=
                        signature:
                          type: string
                          description: A base64 encoded signature of the payment and header data.
                          example: MIAGCSqGSIb3DQ.AAAA==
                        header:
                          type: object
                          required: &ref_348
                            - publicKeyHash
                            - transactionId
                          properties: &ref_349
                            ephemeralPublicKey:
                              type: string
                              description: Base64-encoded ephemeral public key, used for ECC-encrypted payment data.
                              example: MFkwEK...Md==
                            publicKeyHash:
                              type: string
                              description: A base64-encoded, SHA-256 hash of the merchant's public key.
                              example: l0CnXdMv...D1I=
                            transactionId:
                              type: string
                              description: A device-generated identifier for the transaction.
                              example: 32b...4f3
                          description: |-
                            Information needed to decrypt Apple Pay payment data.

                            Refer to [Apple's documentation](https://developer.apple.com/documentation/passkit/payment-token-format-reference#Header-keys-and-values) 
                            for more information.
                      description: |2-
                          Contains the encrypted payment data.

                          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916115-paymentdata) 
                          for more information.
                    paymentMethod:
                      type: object
                      required: &ref_525
                        - displayName
                        - network
                        - type
                      properties: &ref_526
                        displayName:
                          type: string
                          description: A display-friendly discription of the card.
                          example: Visa 1234
                        network:
                          type: string
                          description: The card's payment network.
                          example: Visa
                        type:
                          type: string
                          description: The type of card.
                          example: debit
                      description: |2-
                          Provides information about the underlying card.

                          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916113-paymentmethod) 
                          for more information.
                    transactionIdentifier:
                      type: string
                      description: A unique identifier provided by Apple Pay for this payment.
                      example: 32b...4f3
                  description: |2-
                      Contains the user's payment information as returned from Apple Pay.

                      Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken) 
                      for more information.
                billingContact:
                  type: object
                  properties: &ref_347
                    addressLines:
                      type: array
                      items:
                        type: string
                      description: Address lines 1 and 2 for the contact.
                      example:
                        - 123 Sesame Street
                    locality:
                      type: string
                      description: The contact's city.
                      example: Phoenix
                    postalCode:
                      type: string
                      description: The contact's postal code.
                      example: '30345'
                    administrativeArea:
                      type: string
                      description: The contact's two-letter state code.
                      example: AZ
                    countryCode:
                      type: string
                      description: The contact's two-letter ISO 3166
                      example: US
                  description: |2-
                      Billing contact information as returned from Apple Pay.
                      
                      Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentcontact) 
                      for more information.
              description: |2-
                  The JSON structure returned from Apple Pay when authorizing a payment session.

                  Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment) 
                  for more information.
      x-speakeasy-name-override: linkToken
      x-speakeasy-group: applePay
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.apple_pay.link_token(account_id="3f415d64-c57f-409e-80d0-cb8bd8246ace", token={
                    "payment_data": {
                        "version": "EC_v1",
                        "data": "3+f4oOTwPa6f1UZ6tG...CE=",
                        "signature": "MIAGCSqGSIb3DQ.AAAA==",
                        "header": {
                            "ephemeral_public_key": "MFkwEK...Md==",
                            "public_key_hash": "l0CnXdMv...D1I=",
                            "transaction_id": "32b...4f3",
                        },
                    },
                    "payment_method": {
                        "display_name": "Visa 1234",
                        "network": "Visa",
                        "type": "debit",
                    },
                    "transaction_identifier": "32b...4f3",
                }, billing_contact={
                    "address_lines": [
                        "123 Sesame Street",
                    ],
                    "locality": "Phoenix",
                    "postal_code": "30345",
                    "administrative_area": "AZ",
                    "country_code": "US",
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.applePay.linkToken({
                accountID: "3f415d64-c57f-409e-80d0-cb8bd8246ace",
                linkApplePay: {
                  token: {
                    paymentData: {
                      version: "EC_v1",
                      data: "3+f4oOTwPa6f1UZ6tG...CE=",
                      signature: "MIAGCSqGSIb3DQ.AAAA==",
                      header: {
                        ephemeralPublicKey: "MFkwEK...Md==",
                        publicKeyHash: "l0CnXdMv...D1I=",
                        transactionId: "32b...4f3",
                      },
                    },
                    paymentMethod: {
                      displayName: "Visa 1234",
                      network: "Visa",
                      type: "debit",
                    },
                    transactionIdentifier: "32b...4f3",
                  },
                  billingContact: {
                    addressLines: [
                      "123 Sesame Street",
                    ],
                    locality: "Phoenix",
                    postalCode: "30345",
                    administrativeArea: "AZ",
                    countryCode: "US",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.LinkApplePayError;
            import io.moov.sdk.models.operations.LinkApplePayTokenResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, LinkApplePayError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    LinkApplePayTokenResponse res = sdk.applePay().linkToken()
                            .accountID("3f415d64-c57f-409e-80d0-cb8bd8246ace")
                            .linkApplePay(LinkApplePay.builder()
                                .token(LinkApplePayToken.builder()
                                    .paymentData(LinkApplePaymentData.builder()
                                        .version("EC_v1")
                                        .data("3+f4oOTwPa6f1UZ6tG...CE=")
                                        .signature("MIAGCSqGSIb3DQ.AAAA==")
                                        .header(ApplePayHeader.builder()
                                            .publicKeyHash("l0CnXdMv...D1I=")
                                            .transactionId("32b...4f3")
                                            .ephemeralPublicKey("MFkwEK...Md==")
                                            .build())
                                        .build())
                                    .paymentMethod(LinkApplePaymentMethod.builder()
                                        .displayName("Visa 1234")
                                        .network("Visa")
                                        .type("debit")
                                        .build())
                                    .transactionIdentifier("32b...4f3")
                                    .build())
                                .billingContact(AppleBillingContact.builder()
                                    .addressLines(List.of(
                                        "123 Sesame Street"))
                                    .locality("Phoenix")
                                    .postalCode("30345")
                                    .administrativeArea("AZ")
                                    .countryCode("US")
                                    .build())
                                .build())
                            .call();

                    if (res.linkedApplePayPaymentMethod().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $linkApplePay = new Components\LinkApplePay(
                token: new Components\LinkApplePayToken(
                    paymentData: new Components\LinkApplePaymentData(
                        version: 'EC_v1',
                        data: '3+f4oOTwPa6f1UZ6tG...CE=',
                        signature: 'MIAGCSqGSIb3DQ.AAAA==',
                        header: new Components\ApplePayHeader(
                            ephemeralPublicKey: 'MFkwEK...Md==',
                            publicKeyHash: 'l0CnXdMv...D1I=',
                            transactionId: '32b...4f3',
                        ),
                    ),
                    paymentMethod: new Components\LinkApplePaymentMethod(
                        displayName: 'Visa 1234',
                        network: 'Visa',
                        type: 'debit',
                    ),
                    transactionIdentifier: '32b...4f3',
                ),
                billingContact: new Components\AppleBillingContact(
                    addressLines: [
                        '123 Sesame Street',
                    ],
                    locality: 'Phoenix',
                    postalCode: '30345',
                    administrativeArea: 'AZ',
                    countryCode: 'US',
                ),
            );

            $response = $sdk->applePay->linkToken(
                accountID: '3f415d64-c57f-409e-80d0-cb8bd8246ace',
                linkApplePay: $linkApplePay,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->linkedApplePayPaymentMethod !== null) {
                // handle response
            }
  /accounts/{accountID}/bank-accounts:
    post:
      operationId: linkBankAccount
      description: |-
        Link a bank account to an existing Moov account. Read our [bank accounts guide](https://docs.moov.io/guides/sources/bank-accounts/) to learn more.

        It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked
        bank-account is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment
        Methods](https://docs.moov.io/api/sources/payment-methods/list/)
        endpoint to wait for the new payment methods to be available for use.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-wait-for
          in: header
          required: false
          description: |-
            Optional header to wait for certain events, such as the creation of a payment method, to occur before returning a response.

            When this header is set to `payment-method`, the response will include any payment methods that were created for the newly
            linked card in the `paymentMethods` field. Otherwise, the `paymentMethods` field will be omitted from the response.
          schema:
            type: string
            enum: &ref_41
              - payment-method
              - rail-response
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_36
                  - bankAccountID
                  - fingerprint
                  - status
                  - holderName
                  - holderType
                  - bankName
                  - bankAccountType
                  - routingNumber
                  - lastFourAccountNumber
                  - updatedOn
                properties: &ref_37
                  bankAccountID:
                    type: string
                    format: uuid
                  fingerprint:
                    type: string
                    maxLength: 100
                    description: |-
                      Once the bank account is linked, we don't reveal the full bank account number. 

                      The fingerprint acts as a way to identify whether two linked bank accounts are the same.
                  status:
                    type: string
                    enum: &ref_119
                      - new
                      - verified
                      - verificationFailed
                      - pending
                      - errored
                  holderName:
                    type: string
                  holderType:
                    type: string
                    enum: &ref_34
                      - individual
                      - business
                      - guest
                    description: The type of holder on a funding source.
                  bankName:
                    type: string
                  bankAccountType:
                    type: string
                    enum: &ref_35
                      - checking
                      - savings
                      - general-ledger
                      - loan
                    description: The bank account type.
                  routingNumber:
                    type: string
                  lastFourAccountNumber:
                    type: string
                  updatedOn:
                    type: string
                    format: date-time
                  statusReason:
                    type: string
                    enum: &ref_365
                      - bank-account-created
                      - verification-initiated
                      - micro-deposit-attempts-exceeded
                      - micro-deposit-expired
                      - max-verification-failures
                      - verification-attempts-exceeded
                      - verification-expired
                      - verification-successful
                      - ach-debit-return
                      - ach-credit-return
                      - rtp-credit-failure
                      - micro-deposit-return
                      - admin-action
                      - other
                    description: The reason the bank account status changed to the current value.
                  exceptionDetails:
                    type: object
                    required: &ref_39
                      - achReturnCode
                      - rtpRejectionCode
                      - description
                    properties: &ref_40
                      achReturnCode:
                        type: string
                        enum: &ref_322
                          - R02
                          - R03
                          - R04
                          - R05
                          - R07
                          - R08
                          - R10
                          - R11
                          - R12
                          - R13
                          - R14
                          - R15
                          - R16
                          - R17
                          - R20
                          - R23
                          - R29
                          - R34
                          - R38
                          - R39
                        description: |-
                          The return code of an ACH transaction that caused the bank account status to change.

                          - R02: Account Closed
                          - R03: No Account/Unable to Locate Account
                          - R04: Invalid Account Number
                          - R05: Improper Debit to Consumer Account
                          - R07: Authorization Revoked by Customer
                          - R08: Payment Stopped
                          - R10: Customer Advises Originator is Not Known or Authorized to Receiver
                          - R11: Customer Advises Entry Not in Accordance with the Terms of the Authorization
                          - R12: Branch Sold to Another DFI
                          - R13: RDFI not qualified to participate
                          - R14: Representative payee deceased or unable to continue in that capacity
                          - R15: Beneficiary or bank account holder
                          - R16: Bank account frozen
                          - R17: Entry with Invalid Account Number Initiated Under Questionable Circumstances
                          - R20: Non-payment bank account
                          - R23: Credit entry refused by receiver
                          - R29: Corporate customer advises not authorized
                          - R34: Limited participation RDFI
                          - R38: Stop Payment on Source Document (Adjustment Entry)
                          - R39: Improper Source Document
                      rtpRejectionCode:
                        type: string
                        enum: &ref_593
                          - AC03
                          - AC04
                          - AC06
                          - AC14
                          - AG01
                          - AG03
                          - MD07
                        description: |-
                          The rejection code of an RTP transaction that caused the bank account status to change.

                          - AC03: Account Invalid
                          - AC04: Account Closed
                          - AC06: Account Blocked
                          - AC14: Creditor Account Type Invalid
                          - AG01: Transactions Forbidden On Account
                          - AG03: Transaction Type Not Supported
                          - MD07: Customer Deceased
                      description:
                        type: string
                        description: Details related to an `errored` or `verificationFailed` bank account status.
                    description: Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
                  paymentMethods:
                    type: array
                    items:
                      type: object
                      required: &ref_63
                        - paymentMethodID
                        - paymentMethodType
                      properties: &ref_64
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum: *ref_33
                          description: The payment method type that represents a payment rail and directionality
                    description: |-
                      Includes any payment methods generated for a newly created bank account, removing the need to
                      call the List Payment Methods endpoint following a successful Create BankAccount request.

                      **NOTE: This field is only populated for Create BankAccount requests made with the `X-Wait-For` header.**
                description: Describes a bank account linked to a Moov account.
                example: &ref_38
                  bankAccountID: 833fa3ef-14d3-4c97-ba45-6af66f739832
                  fingerprint: dd4cbfe5fbaf47b392770b5b595bec604fd99394749b7d017153e2b9cfbea40e
                  status: new
                  holderName: John Doe
                  holderType: individual
                  bankName: Gringotts Bank
                  bankAccountType: checking
                  routingNumber: '123456780'
                  lastFourAccountNumber: '6789'
                  updatedOn: '2024-11-26T22:37:06Z'
                  statusReason: bank-account-created
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_366
                  account:
                    type: string
                  plaid:
                    type: string
                  plaidLink:
                    type: string
                  mx:
                    type: string
                  error:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf: &ref_527
                - type: object
                  required: &ref_363
                    - account
                  properties: &ref_364
                    account:
                      type: object
                      required: &ref_361
                        - holderName
                        - holderType
                        - accountNumber
                        - bankAccountType
                        - routingNumber
                      properties: &ref_362
                        holderName:
                          type: string
                        holderType:
                          type: string
                          enum: *ref_34
                          description: The type of holder on a funding source.
                        accountNumber:
                          type: string
                        bankAccountType:
                          type: string
                          enum: *ref_35
                          description: The bank account type.
                        routingNumber:
                          type: string
                  description: Describes the bank account to link to the Moov account.
                  title: Bank account
                - type: object
                  required: &ref_583
                    - plaid
                  properties: &ref_584
                    plaid:
                      type: object
                      required: &ref_577
                        - token
                      properties: &ref_578
                        token:
                          type: string
                      description: |-
                        The details of a Plaid processor integration for a linked funding source. 

                        `sandbox` - When linking a bank account to a `sandbox` account using a Plaid processor token a default bank account
                        response will be used. The following default data will be used to generate the bank account in this flow:

                        ```
                          RoutingNumber: "011401533",
                          AccountNumber: "1111222233330000",
                          AccountType:   "checking",
                          Mask:          "0000"
                        ```
                  description: Describes the account to link to the Moov account using a Plaid processor token.
                  title: Plaid
                - type: object
                  required: &ref_581
                    - plaidLink
                  properties: &ref_582
                    plaidLink:
                      type: object
                      required: &ref_579
                        - publicToken
                      properties: &ref_580
                        publicToken:
                          type: string
                      description: |-
                        This is used by Moov.js with a Plaid reseller relationship. The details of a Plaid link integration for a linked funding source.

                        You can simulate linking bank accounts with Plaid in test mode. See our [test mode](https://docs.moov.io/guides/get-started/test-mode/#plaid)
                        guide for more information.

                        Plaid's `sandbox` environment - (requires Plaid reseller setup with Moov). When linking a bank account to a `sandbox` account using a Plaid 
                        public token it will utilize Plaid's sandbox environment. The Plaid public token provided must be generated from Plaid's sandbox environment. 
                        Please see <a href="https://plaid.com/docs/api/sandbox/#sandboxpublic_tokencreate" target="_blank">Plaid's sandbox documentation</a> for more 
                        details.
                  description: |-
                    This is used by Moov.js with a Plaid reseller relationship. 

                    Describes the account to link to the Moov account using a Plaid using a Plaid public token.
                  title: Plaid Link
                - type: object
                  required: &ref_547
                    - mx
                  properties: &ref_548
                    mx:
                      type: object
                      required: &ref_536
                        - authorizationCode
                      properties: &ref_537
                        authorizationCode:
                          type: string
                      description: |-
                        The authorization code of a MX account which allows a processor to retrieve a linked payment account. 

                        `sandbox` - When linking a bank account to a `sandbox` account using a MX authorization code it will utilize MX's sandbox environment. 
                        The MX authorization code provided must be generated from MX's sandbox environment.
                  description: |-
                    Describes the account to link to the Moov account using a MX processor token. 

                    `sandbox` - When linking a bank account to a `sandbox` account using an MX authorization token a default bank account routing number will
                    be used. The following default data will be used to generate the bank account in this flow:

                    ```
                      RoutingNumber: "123456780",
                      BankName: "Gringotts Bank"
                    ```
                  title: MX
      x-speakeasy-name-override: link
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.link(account_id="0ffc839a-9198-4ea1-98a2-6cccee057439", link_bank_account={
                    "plaid": {
                        "token": "<value>",
                    },
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.link({
                accountID: "0ffc839a-9198-4ea1-98a2-6cccee057439",
                linkBankAccount: {
                  plaid: {
                    token: "<value>",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.BankAccountValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.LinkBankAccountResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, BankAccountValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    LinkBankAccountResponse res = sdk.bankAccounts().link()
                            .accountID("0ffc839a-9198-4ea1-98a2-6cccee057439")
                            .linkBankAccount(LinkBankAccount.of(PlaidPayload.builder()
                                .plaid(PlaidIntegration.builder()
                                    .token("<value>")
                                    .build())
                                .build()))
                            .call();

                    if (res.bankAccount().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->link(
                accountID: '60ffc839-a919-48ea-a18a-26cccee05743',
                linkBankAccount: new Components\PlaidPayload(
                    plaid: new Components\PlaidIntegration(
                        token: '<value>',
                    ),
                ),
                xMoovVersion: 'v2024.01.00',
                xWaitFor: Components\BankAccountWaitFor::PaymentMethod

            );

            if ($response->bankAccount !== null) {
                // handle response
            }
    get:
      operationId: listBankAccounts
      description: |-
        List all the bank accounts associated with a particular Moov account. 

        Read our [bank accounts guide](https://docs.moov.io/guides/sources/bank-accounts/) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_36
                  properties: *ref_37
                  description: Describes a bank account linked to a Moov account.
                  example: *ref_38
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-name-override: list
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListBankAccountsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListBankAccountsResponse res = sdk.bankAccounts().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.bankAccounts().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bankAccounts !== null) {
                // handle response
            }
  /accounts/{accountID}/bank-accounts/{bankAccountID}:
    get:
      operationId: getBankAccount
      description: |-
        Retrieve bank account details (i.e. routing number or account type) associated with a specific Moov account. 

        Read our [bank accounts guide](https://docs.moov.io/guides/sources/bank-accounts/) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_36
                properties: *ref_37
                description: Describes a bank account linked to a Moov account.
                example: *ref_38
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-name-override: get
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", bank_account_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                bankAccountID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetBankAccountResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetBankAccountResponse res = sdk.bankAccounts().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .bankAccountID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.bankAccount().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                bankAccountID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bankAccount !== null) {
                // handle response
            }
    delete:
      operationId: disableBankAccount
      description: |-
        Discontinue using a specified bank account linked to a Moov account. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-name-override: disable
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.disable(account_id="cd7cd1ce-90cc-444b-ac3e-badb79be277f", bank_account_id="0f131553-3a08-4820-a7ac-ba935765809c")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.disable({
                accountID: "cd7cd1ce-90cc-444b-ac3e-badb79be277f",
                bankAccountID: "0f131553-3a08-4820-a7ac-ba935765809c",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DisableBankAccountResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DisableBankAccountResponse res = sdk.bankAccounts().disable()
                            .accountID("cd7cd1ce-90cc-444b-ac3e-badb79be277f")
                            .bankAccountID("0f131553-3a08-4820-a7ac-ba935765809c")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->disable(
                accountID: 'cd7cd1ce-90cc-444b-ac3e-badb79be277f',
                bankAccountID: '0f131553-3a08-4820-a7ac-ba935765809c',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/bank-accounts/{bankAccountID}/micro-deposits:
    post:
      operationId: initiateMicroDeposits
      description: |-
        Micro-deposits help confirm bank account ownership, helping reduce fraud and the risk of unauthorized activity. 
        Use this method to initiate the micro-deposit verification, sending two small credit transfers to the bank account 
        you want to confirm.

        If you request micro-deposits before 4:15PM ET, they will appear that same day. If you request micro-deposits any 
        time after 4:15PM ET, they will appear the next banking day. When the two credits are initiated, Moov simultaneously
        initiates a debit to recoup the micro-deposits. 

        Micro-deposits initiated for a `sandbox` bank account will always be `$0.00` / `$0.00` and instantly verifiable once initiated.

        You can simulate micro-deposit verification in test mode. See our [test mode](https://docs.moov.io/guides/get-started/test-mode/#micro-deposits)
        guide for more information.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.initiate_micro_deposits(account_id="ff04d5ff-8ad2-4d87-baf2-0c9dcb6d3e2a", bank_account_id="10ed8688-d7e2-4a70-827d-af795759945d")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.initiateMicroDeposits({
                accountID: "ff04d5ff-8ad2-4d87-baf2-0c9dcb6d3e2a",
                bankAccountID: "10ed8688-d7e2-4a70-827d-af795759945d",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.InitiateMicroDepositsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    InitiateMicroDepositsResponse res = sdk.bankAccounts().initiateMicroDeposits()
                            .accountID("ff04d5ff-8ad2-4d87-baf2-0c9dcb6d3e2a")
                            .bankAccountID("10ed8688-d7e2-4a70-827d-af795759945d")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->initiateMicroDeposits(
                accountID: 'ff04d5ff-8ad2-4d87-baf2-0c9dcb6d3e2a',
                bankAccountID: '10ed8688-d7e2-4a70-827d-af795759945d',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
    put:
      operationId: completeMicroDeposits
      description: |-
        Complete the micro-deposit validation process by passing the amounts of the two transfers within three tries.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_393
                  - status
                properties: &ref_394
                  status:
                    type: string
                    enum: &ref_541
                      - verified
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_542
                  amounts:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_391
                - amounts
              properties: &ref_392
                amounts:
                  type: array
                  items:
                    type: integer
                  description: Two positive integers, in cents, equal to the values of the micro-deposits sent to the bank account.
                  example:
                    - 18
                    - 21
              description: Request to complete the micro-deposit verification workflow.
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.complete_micro_deposits(account_id="ebfc273d-980b-4a92-8dd9-bf9996f2a16e", bank_account_id="3e6af61e-a5cb-4281-b0e6-e7e3d39edf65", amounts=[
                    18,
                    21,
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.completeMicroDeposits({
                accountID: "ebfc273d-980b-4a92-8dd9-bf9996f2a16e",
                bankAccountID: "3e6af61e-a5cb-4281-b0e6-e7e3d39edf65",
                completeMicroDeposits: {
                  amounts: [
                    18,
                    21,
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CompleteMicroDeposits;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.MicroDepositValidationError;
            import io.moov.sdk.models.operations.CompleteMicroDepositsResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, MicroDepositValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CompleteMicroDepositsResponse res = sdk.bankAccounts().completeMicroDeposits()
                            .accountID("ebfc273d-980b-4a92-8dd9-bf9996f2a16e")
                            .bankAccountID("3e6af61e-a5cb-4281-b0e6-e7e3d39edf65")
                            .completeMicroDeposits(CompleteMicroDeposits.builder()
                                .amounts(List.of(
                                    18L,
                                    21L))
                                .build())
                            .call();

                    if (res.completedMicroDeposits().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $completeMicroDeposits = new Components\CompleteMicroDeposits(
                amounts: [
                    18,
                    21,
                ],
            );

            $response = $sdk->bankAccounts->completeMicroDeposits(
                accountID: 'ebfc273d-980b-4a92-8dd9-bf9996f2a16e',
                bankAccountID: '3e6af61e-a5cb-4281-b0e6-e7e3d39edf65',
                completeMicroDeposits: $completeMicroDeposits,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->completedMicroDeposits !== null) {
                // handle response
            }
  /accounts/{accountID}/bank-accounts/{bankAccountID}/verify:
    get:
      operationId: getBankAccountVerification
      description: |-
        Retrieve the current status and details of an instant verification, including whether the verification method was instant or same-day 
        ACH. This helps track the verification process in real-time and provides details in case of exceptions.

        The status will indicate the following:

        - `new`: Verification initiated, credit pending to the payment network
        - `sent-credit`: Credit sent, available for verification
        - `failed`: Verification failed, description provided, user needs to add a new bank account
        - `expired`: Verification expired after 14 days, initiate another verification
        - `max-attempts-exceeded`: Five incorrect code attempts exhausted, initiate another verification

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_44
                  - verificationMethod
                  - status
                properties: &ref_45
                  verificationMethod:
                    type: string
                    enum: &ref_42
                      - instant
                      - ach
                  status:
                    type: string
                    enum: &ref_43
                      - new
                      - sent-credit
                      - max-attempts-exceeded
                      - failed
                      - expired
                      - successful
                  exceptionDetails:
                    type: object
                    required: *ref_39
                    properties: *ref_40
                    description: Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-name-override: getVerification
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.get_verification(account_id="eb35bc20-d74d-4acc-b152-c4db94d9355b", bank_account_id="2572c1db-032d-464b-b55d-1fd7052232be")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.getVerification({
                accountID: "eb35bc20-d74d-4acc-b152-c4db94d9355b",
                bankAccountID: "2572c1db-032d-464b-b55d-1fd7052232be",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetBankAccountVerificationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetBankAccountVerificationResponse res = sdk.bankAccounts().getVerification()
                            .accountID("eb35bc20-d74d-4acc-b152-c4db94d9355b")
                            .bankAccountID("2572c1db-032d-464b-b55d-1fd7052232be")
                            .call();

                    if (res.bankAccountVerification().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->getVerification(
                accountID: 'eb35bc20-d74d-4acc-b152-c4db94d9355b',
                bankAccountID: '2572c1db-032d-464b-b55d-1fd7052232be',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bankAccountVerification !== null) {
                // handle response
            }
    post:
      operationId: initiateBankAccountVerification
      description: |-
        Instant micro-deposit verification offers a quick and efficient way to verify bank account ownership. 

        Send a $0.01 credit with a unique verification code via RTP or same-day ACH, depending on the receiving bank's capabilities. This
        feature provides a faster alternative to traditional methods, allowing verification in a single session.

        It is recommended to use the `X-Wait-For: rail-response` header to synchronously receive the outcome of the instant credit in the
          response payload.

        Possible verification methods:
          - `instant`: Real-time verification credit sent via RTP
          - `ach`: Verification credit sent via same-day ACH

        Possible statuses:
          - `new`: Verification initiated, credit pending
          - `sent-credit`: Credit sent, available for verification in the external bank account
          - `failed`: Verification failed due to credit rejection/return, details in `exceptionDetails`

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-wait-for
          in: header
          required: false
          description: |-
            Optional header to wait for certain events, such as the rail response, to occur before returning a response.

            When this header is set to `rail-response`, the endpoint will wait for a sent-credit or failed status from the payment rail.
          schema:
            type: string
            enum: *ref_41
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_367
                  - verificationMethod
                  - status
                properties: &ref_368
                  verificationMethod:
                    type: string
                    enum: *ref_42
                  status:
                    type: string
                    enum: *ref_43
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      x-speakeasy-name-override: initiateVerification
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.initiate_verification(account_id="96925880-1f29-484d-9ce4-a55f78c3d5fc", bank_account_id="c9cadc5c-d322-467d-bc62-d133abcc5ec1")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.initiateVerification({
                accountID: "96925880-1f29-484d-9ce4-a55f78c3d5fc",
                bankAccountID: "c9cadc5c-d322-467d-bc62-d133abcc5ec1",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.InitiateBankAccountVerificationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    InitiateBankAccountVerificationResponse res = sdk.bankAccounts().initiateVerification()
                            .accountID("96925880-1f29-484d-9ce4-a55f78c3d5fc")
                            .bankAccountID("c9cadc5c-d322-467d-bc62-d133abcc5ec1")
                            .call();

                    if (res.bankAccountVerificationCreated().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->bankAccounts->initiateVerification(
                accountID: '96925880-1f29-484d-9ce4-a55f78c3d5fc',
                bankAccountID: 'c9cadc5c-d322-467d-bc62-d133abcc5ec1',
                xMoovVersion: 'v2024.01.00',
                xWaitFor: Components\BankAccountWaitFor::PaymentMethod

            );

            if ($response->bankAccountVerificationCreated !== null) {
                // handle response
            }
    put:
      operationId: completeBankAccountVerification
      description: |-
        Finalize the instant micro-deposit verification by submitting the verification code displayed in the user's bank account. 

        Upon successful verification, the bank account status will be updated to `verified` and eligible for ACH debit transactions.

        The following formats are accepted:
        - `MV0000`
        - `mv0000`
        - `0000`

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/bank-accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: bankAccountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_44
                properties: *ref_45
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Bank accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_389
                - code
              properties: &ref_390
                code:
                  type: string
                  description: Code provided by user from their bank account transactions
                  example: MV1234
      x-speakeasy-name-override: completeVerification
      x-speakeasy-group: bankAccounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.bank_accounts.complete_verification(account_id="3b83f70f-82ce-4e0f-8a75-e4717ad684e4", bank_account_id="c4c7442d-4aa1-4dfe-9ab1-5206164dce64", code="MV1234")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.bankAccounts.completeVerification({
                accountID: "3b83f70f-82ce-4e0f-8a75-e4717ad684e4",
                bankAccountID: "c4c7442d-4aa1-4dfe-9ab1-5206164dce64",
                completeBankAccountVerification: {
                  code: "MV1234",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CompleteBankAccountVerification;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CompleteBankAccountVerificationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CompleteBankAccountVerificationResponse res = sdk.bankAccounts().completeVerification()
                            .accountID("3b83f70f-82ce-4e0f-8a75-e4717ad684e4")
                            .bankAccountID("c4c7442d-4aa1-4dfe-9ab1-5206164dce64")
                            .completeBankAccountVerification(CompleteBankAccountVerification.builder()
                                .code("MV1234")
                                .build())
                            .call();

                    if (res.bankAccountVerification().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $completeBankAccountVerification = new Components\CompleteBankAccountVerification(
                code: 'MV1234',
            );

            $response = $sdk->bankAccounts->completeVerification(
                accountID: '3b83f70f-82ce-4e0f-8a75-e4717ad684e4',
                bankAccountID: 'c4c7442d-4aa1-4dfe-9ab1-5206164dce64',
                completeBankAccountVerification: $completeBankAccountVerification,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bankAccountVerification !== null) {
                // handle response
            }
  /accounts/{accountID}/branding:
    post:
      operationId: createBrand
      description: |-
        Create brand properties for the specified account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/branding.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_49
                  - colors
                properties: &ref_50
                  colors:
                    type: object
                    required: &ref_370
                      - dark
                      - light
                    properties: &ref_371
                      dark:
                        type: object
                        required: &ref_46
                          - accent
                        properties: &ref_47
                          accent:
                            type: string
                            description: A CSS hex color representing an accent color.
                            example: '#111111'
                      light:
                        type: object
                        required: *ref_46
                        properties: *ref_47
                    description: Brand colors for light and dark modes.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_51
                  colors:
                    type: object
                    properties: &ref_388
                      light:
                        type: object
                        properties: &ref_48
                          accent:
                            type: string
                      dark:
                        type: object
                        properties: *ref_48
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Branding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: *ref_49
              properties: *ref_50
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.branding.create(account_id="7a621cf0-21cd-49cf-8540-3315211a509a", colors=components.BrandColors(
                    dark=components.BrandColor(
                        accent="#111111",
                    ),
                    light=components.BrandColor(
                        accent="#111111",
                    ),
                ))

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.branding.create({
                accountID: "7a621cf0-21cd-49cf-8540-3315211a509a",
                brandProperties: {
                  colors: {
                    dark: {
                      accent: "#111111",
                    },
                    light: {
                      accent: "#111111",
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.BrandValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateBrandResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, BrandValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateBrandResponse res = sdk.branding().create()
                            .accountID("7a621cf0-21cd-49cf-8540-3315211a509a")
                            .brandProperties(BrandProperties.builder()
                                .colors(BrandColors.builder()
                                    .dark(BrandColor.builder()
                                        .accent("#111111")
                                        .build())
                                    .light(BrandColor.builder()
                                        .accent("#111111")
                                        .build())
                                    .build())
                                .build())
                            .call();

                    if (res.brandProperties().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $brandProperties = new Components\BrandProperties(
                colors: new Components\BrandColors(
                    dark: new Components\BrandColor(
                        accent: '#111111',
                    ),
                    light: new Components\BrandColor(
                        accent: '#111111',
                    ),
                ),
            );

            $response = $sdk->branding->create(
                accountID: '7a621cf0-21cd-49cf-8540-3315211a509a',
                brandProperties: $brandProperties,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->brandProperties !== null) {
                // handle response
            }
    put:
      operationId: upsertBrand
      description: |-
        Create or replace brand properties for the specified account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/branding.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_49
                properties: *ref_50
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: *ref_51
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Branding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: *ref_49
              properties: *ref_50
      x-speakeasy-name-override: upsert
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.branding.upsert(account_id="87673c22-1b80-4b69-b5bb-e92af8dcce02", colors=components.BrandColors(
                    dark=components.BrandColor(
                        accent="#111111",
                    ),
                    light=components.BrandColor(
                        accent="#111111",
                    ),
                ))

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.branding.upsert({
                accountID: "87673c22-1b80-4b69-b5bb-e92af8dcce02",
                brandProperties: {
                  colors: {
                    dark: {
                      accent: "#111111",
                    },
                    light: {
                      accent: "#111111",
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.BrandValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UpsertBrandResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, BrandValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpsertBrandResponse res = sdk.branding().upsert()
                            .accountID("87673c22-1b80-4b69-b5bb-e92af8dcce02")
                            .brandProperties(BrandProperties.builder()
                                .colors(BrandColors.builder()
                                    .dark(BrandColor.builder()
                                        .accent("#111111")
                                        .build())
                                    .light(BrandColor.builder()
                                        .accent("#111111")
                                        .build())
                                    .build())
                                .build())
                            .call();

                    if (res.brandProperties().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $brandProperties = new Components\BrandProperties(
                colors: new Components\BrandColors(
                    dark: new Components\BrandColor(
                        accent: '#111111',
                    ),
                    light: new Components\BrandColor(
                        accent: '#111111',
                    ),
                ),
            );

            $response = $sdk->branding->upsert(
                accountID: '87673c22-1b80-4b69-b5bb-e92af8dcce02',
                brandProperties: $brandProperties,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->brandProperties !== null) {
                // handle response
            }
    get:
      operationId: getBrand
      description: |-
        Get brand properties for the specified account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/branding.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_49
                properties: *ref_50
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Branding
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.branding.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.branding.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetBrandResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetBrandResponse res = sdk.branding().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .call();

                    if (res.brandProperties().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->branding->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->brandProperties !== null) {
                // handle response
            }
    patch:
      operationId: updateBrand
      description: |-
        Updates the brand properties for the specified account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/branding.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_49
                properties: *ref_50
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: *ref_51
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Branding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_648
                colors:
                  type: object
                  properties: &ref_656
                    dark:
                      type: object
                      properties: &ref_52
                        accent:
                          type: string
                    light:
                      type: object
                      properties: *ref_52
      x-speakeasy-name-override: update
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.branding.update(account_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.branding.update({
                accountID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                updateBrand: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.components.UpdateBrand;
            import io.moov.sdk.models.errors.BrandValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UpdateBrandResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, BrandValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateBrandResponse res = sdk.branding().update()
                            .accountID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .updateBrand(UpdateBrand.builder()
                                .build())
                            .call();

                    if (res.brandProperties().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateBrand = new Components\UpdateBrand();

            $response = $sdk->branding->update(
                accountID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                updateBrand: $updateBrand,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->brandProperties !== null) {
                // handle response
            }
  /accounts/{accountID}/capabilities:
    get:
      operationId: listCapabilities
      description: |-
        Retrieve all the capabilities an account has requested.

        Read our [capabilities guide](https://docs.moov.io/guides/accounts/capabilities/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/capabilities.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_55
                    - capability
                    - accountID
                    - status
                    - createdOn
                    - updatedOn
                  properties: &ref_56
                    capability:
                      type: string
                      enum: *ref_19
                      description: |-
                        Moov account capabilities.

                        The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
                    accountID:
                      type: string
                      format: uuid
                    status:
                      type: string
                      enum: *ref_53
                      description: The status of the capability requested for an account.
                    requirements:
                      type: object
                      properties: &ref_376
                        currentlyDue:
                          type: array
                          items:
                            type: string
                            enum: &ref_54
                              - account.tos-acceptance
                              - individual.mobile
                              - individual.email
                              - individual.email-or-mobile
                              - individual.firstname
                              - individual.lastname
                              - individual.address
                              - individual.ssn-last4
                              - individual.ssn
                              - individual.birthdate
                              - business.legalname
                              - business.description-or-website
                              - business.entity-type
                              - business.business-type
                              - business.dba
                              - business.ein
                              - business.address
                              - business.phone
                              - business.admins
                              - business.controllers
                              - business.owners
                              - business.classification
                              - business.industry-code-mcc
                              - business.indicate-owners-provided
                              - business.average-transaction-size
                              - business.max-transaction-size
                              - business.average-monthly-transaction-volume
                              - business.volume-by-customer-type
                              - business.card-volume-distribution
                              - business.fulfillment
                              - business.description
                              - business.underwriting-documents-tier-one
                              - bank-accounts.name
                              - bank-accounts.routing-number
                              - bank-accounts.account-number
                              - document.business.verification
                              - document.individual.tin
                              - document.individual.verification
                              - document.representative.{rep-uuid}.tin
                              - document.representative.{rep-uuid}.verification
                              - representative.{rep-uuid}.mobile
                              - representative.{rep-uuid}.email
                              - representative.{rep-uuid}.email-or-mobile
                              - representative.{rep-uuid}.firstname
                              - representative.{rep-uuid}.lastname
                              - representative.{rep-uuid}.address
                              - representative.{rep-uuid}.ssn-last4
                              - representative.{rep-uuid}.ssn
                              - representative.{rep-uuid}.birthdate
                              - representative.{rep-uuid}.job-title
                              - representative.{rep-uuid}.is-controller
                              - representative.{rep-uuid}.is-owner
                              - representative.{rep-uuid}.ownership
                              - document.{doc-uuid}
                            description: The unique ID of what the requirement is asking to be filled out.
                        errors:
                          type: array
                          items:
                            type: object
                            required: &ref_614
                              - requirement
                            properties: &ref_615
                              requirement:
                                type: string
                                enum: *ref_54
                                description: The unique ID of what the requirement is asking to be filled out.
                              errorCode:
                                type: string
                                enum: &ref_616
                                  - invalid-value
                                  - failed-automatic-verification
                                  - failed-other
                                  - invalid-address
                                  - address-restricted
                                  - tax-id-mismatch
                                  - document-id-mismatch
                                  - document-date-of-birth-mismatch
                                  - document-name-mismatch
                                  - document-address.mismatch
                                  - document-number-mismatch
                                  - document-incomplete
                                  - document-failed-risk
                                  - document-illegible
                                  - document-unsupported
                                  - document-not-uploaded
                                  - document-corrupt
                                  - document-expired
                      description: Represents individual and business data necessary to facilitate the enabling of a capability for an account.
                    disabledReason:
                      type: string
                    createdOn:
                      type: string
                      format: date-time
                    updatedOn:
                      type: string
                      format: date-time
                    disabledOn:
                      type: string
                      format: date-time
              example:
                - capability: transfers
                  accountID: 01234567-89ab-cdef-0123-456789abcdef
                  status: enabled
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
                - capability: collect-funds
                  accountID: 01234567-89ab-cdef-0123-456789abcdef
                  status: in-review
                  requirements:
                    currentlyDue:
                      - business.owners
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Capabilities
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.capabilities.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.capabilities.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListCapabilitiesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListCapabilitiesResponse res = sdk.capabilities().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.capabilities().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->capabilities->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->capabilities !== null) {
                // handle response
            }
    post:
      operationId: requestCapabilities
      description: |-
        Request capabilities for a specific account. Read our [capabilities guide](https://docs.moov.io/guides/accounts/capabilities/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/capabilities.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_55
                  properties: *ref_56
              example:
                - capability: transfers
                  accountID: 01234567-89ab-cdef-0123-456789abcdef
                  status: enabled
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
                - capability: collect-funds
                  accountID: 01234567-89ab-cdef-0123-456789abcdef
                  status: in-review
                  requirements:
                    currentlyDue:
                      - business.owners
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_344
                  error:
                    type: object
                    properties: &ref_375
                      capabilities:
                        type: object
                        additionalProperties:
                          type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Capabilities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_342
                - capabilities
              properties: &ref_343
                capabilities:
                  type: array
                  items:
                    type: string
                    enum: *ref_19
                    description: |-
                      Moov account capabilities.

                      The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
            example:
              capabilities:
                - collect-funds
      x-speakeasy-name-override: request
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.capabilities.request(account_id="32613610-de25-446e-8662-ec2709ffea9d", capabilities=[
                    components.CapabilityID.COLLECT_FUNDS,
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.capabilities.request({
                accountID: "32613610-de25-446e-8662-ec2709ffea9d",
                addCapabilities: {
                  capabilities: [
                    "collect-funds",
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.AddCapabilitiesError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.RequestCapabilitiesResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, AddCapabilitiesError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RequestCapabilitiesResponse res = sdk.capabilities().request()
                            .accountID("32613610-de25-446e-8662-ec2709ffea9d")
                            .addCapabilities(AddCapabilities.builder()
                                .capabilities(List.of(
                                    CapabilityID.COLLECT_FUNDS))
                                .build())
                            .call();

                    if (res.capabilities().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $addCapabilities = new Components\AddCapabilities(
                capabilities: [
                    Components\CapabilityID::SendFunds,
                ],
            );

            $response = $sdk->capabilities->request(
                accountID: '2613610d-e254-46e6-a62e-c2709ffea9d2',
                addCapabilities: $addCapabilities,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->capabilities !== null) {
                // handle response
            }
  /accounts/{accountID}/capabilities/{capabilityID}:
    get:
      operationId: getCapability
      description: |-
        Retrieve a specific capability that an account has requested. Read our [capabilities guide](https://docs.moov.io/guides/accounts/capabilities/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/capabilities.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: capabilityID
          in: path
          required: true
          schema:
            type: string
            enum: *ref_19
            description: |-
              Moov account capabilities.

              The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_55
                properties: *ref_56
              example:
                capability: transfers
                accountID: 01234567-89ab-cdef-0123-456789abcdef
                status: enabled
                createdOn: '2024-05-06T12:20:38.184Z'
                updatedOn: '2024-05-06T12:20:38.184Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Capabilities
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.capabilities.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", capability_id=components.CapabilityID.PRODUCTION_APP)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.capabilities.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                capabilityID: "production-app",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CapabilityID;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetCapabilityResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetCapabilityResponse res = sdk.capabilities().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .capabilityID(CapabilityID.PRODUCTION_APP)
                            .call();

                    if (res.capability().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->capabilities->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                capabilityID: Components\CapabilityID::ProductionApp,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->capability !== null) {
                // handle response
            }
    delete:
      operationId: disableCapability
      description: |-
        Disable a specific capability that an account has requested. Read our [capabilities guide](https://docs.moov.io/guides/accounts/capabilities/) to learn more.

          To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/capabilities.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: capabilityID
          in: path
          required: true
          schema:
            type: string
            enum: *ref_19
            description: |-
              Moov account capabilities.

              The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Capabilities
      x-speakeasy-name-override: disable
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.capabilities.disable(account_id="cd7cd1ce-90cc-444b-ac3e-badb79be277f", capability_id=components.CapabilityID.TRANSFERS)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.capabilities.disable({
                accountID: "cd7cd1ce-90cc-444b-ac3e-badb79be277f",
                capabilityID: "transfers",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CapabilityID;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DisableCapabilityResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DisableCapabilityResponse res = sdk.capabilities().disable()
                            .accountID("cd7cd1ce-90cc-444b-ac3e-badb79be277f")
                            .capabilityID(CapabilityID.TRANSFERS)
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->capabilities->disable(
                accountID: 'cd7cd1ce-90cc-444b-ac3e-badb79be277f',
                capabilityID: Components\CapabilityID::Transfers,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/cards:
    post:
      operationId: linkCard
      description: |-
        Link a card to an existing Moov account. 

        Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#link-a-card) to learn more.

        Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance. 

        During card linking, the provided data will be verified by submitting a $0 authorization (account verification) request. 
        If `merchantAccountID` is provided, the authorization request will contain that account's statement descriptor and address. 
        Otherwise, the platform account's profile will be used. If no statement descriptor has been set, the authorization will 
        use the account's name instead.

        It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked 
        card is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment 
        Methods](https://docs.moov.io/api/sources/payment-methods/list/)
        endpoint to wait for the new payment methods to be available for use.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-wait-for
          in: header
          required: false
          description: |-
            Optional header to wait for certain events, such as the creation of a payment method, to occur before returning a response.

            When this header is set to `payment-method`, the response will include any payment methods that were created for the newly 
            linked card in the `paymentMethods` field. Otherwise, the `paymentMethods` field will be omitted from the response.
          schema:
            type: string
            enum: &ref_532
              - payment-method
            example: payment-method
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_68
                  - cardID
                  - fingerprint
                  - brand
                  - cardType
                  - lastFourCardNumber
                  - bin
                  - expiration
                  - billingAddress
                  - cardVerification
                properties: &ref_69
                  cardID:
                    type: string
                    format: uuid
                    description: ID of the card.
                    example: 01234567-89ab-cdef-0123-456789abcdef
                  fingerprint:
                    type: string
                    maxLength: 100
                    description: |-
                      Uniquely identifies a linked payment card or token.
                      For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
                      This field can be used to identify specific payment methods across multiple accounts on your platform.
                    example: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                  brand:
                    type: string
                    enum: *ref_57
                    description: The card brand.
                    example: Visa
                  cardType:
                    type: string
                    enum: *ref_58
                    description: The type of the card.
                    example: credit
                  cardCategory:
                    type: string
                    description: |-
                      The category or level of the card defined by the issuer.
                      Examples include, but not limited to, "REWARDS", "TRADITIONAL REWARDS", "CLASSIC", and "CORPORATE PURCHASING".
                  lastFourCardNumber:
                    type: string
                    minLength: 4
                    maxLength: 4
                    description: Last four digits of the card number
                  bin:
                    type: string
                    minLength: 6
                    maxLength: 8
                    description: The first six to eight digits of the card number, which identifies the financial institution that issued the card.
                  expiration:
                    type: object
                    required: *ref_59
                    properties: *ref_60
                    description: The expiration date of the card or token.
                    example: *ref_61
                  holderName:
                    type: string
                    description: The name of the cardholder as it appears on the card.
                  billingAddress:
                    type: object
                    required: &ref_65
                      - postalCode
                    properties: &ref_66
                      addressLine1:
                        type: string
                        maxLength: 60
                      addressLine2:
                        type: string
                        maxLength: 32
                      city:
                        type: string
                        maxLength: 32
                      stateOrProvince:
                        type: string
                        maxLength: 2
                      postalCode:
                        type: string
                        maxLength: 10
                      country:
                        type: string
                        maxLength: 2
                    example: &ref_67
                      addressLine1: 123 Main Street
                      addressLine2: Apt 302
                      city: Boulder
                      stateOrProvince: CO
                      postalCode: '80301'
                      country: US
                  cardVerification:
                    type: object
                    required: &ref_122
                      - cvv
                      - addressLine1
                      - postalCode
                    properties: &ref_123
                      cvv:
                        type: string
                        enum: &ref_62
                          - noMatch
                          - match
                          - notChecked
                          - unavailable
                          - partialMatch
                        example: match
                      addressLine1:
                        type: string
                        enum: *ref_62
                        example: match
                      postalCode:
                        type: string
                        enum: *ref_62
                        example: match
                      accountName:
                        type: object
                        properties: &ref_326
                          firstName:
                            type: string
                            enum: *ref_62
                            example: match
                          lastName:
                            type: string
                            enum: *ref_62
                            example: match
                          middleName:
                            type: string
                            enum: *ref_62
                            example: match
                          fullName:
                            type: string
                            enum: *ref_62
                            example: match
                        description: The results of submitting cardholder name to a card network for verification.
                        example: &ref_327
                          firstName: match
                          lastName: match
                          middleName: match
                          fullName: match
                    description: The results of submitting cardholder data to a card network for verification.
                    example: &ref_124
                      cvv: match
                      addressLine1: match
                      postalCode: match
                      accountName:
                        firstName: match
                        lastName: match
                        middleName: match
                        fullName: match
                  issuer:
                    type: string
                    description: Financial institution that issued the card.
                  issuerCountry:
                    type: string
                    description: Country where the card was issued.
                  issuerURL:
                    type: string
                    format: uri
                    description: URL of the issuer.
                  issuerPhone:
                    type: string
                    description: Phone number of the issuer.
                  commercial:
                    type: boolean
                    description: |-
                      If true, the card is for commercial use, or associated with a business.
                      If false, the card is associated with a general consumer.
                  regulated:
                    type: boolean
                    description: |-
                      If true, the card issuing bank is regulated, and the scheme fees for debit transactions will be limited based on the Durbin Amendment.
                      If false, the card issuing bank is not regulated, and the scheme fees will not be limited.
                  cardOnFile:
                    type: boolean
                    description: Indicates cardholder has authorized card to be stored for future payments.
                  merchantAccountID:
                    type: string
                    format: uuid
                  cardAccountUpdater:
                    type: object
                    properties: &ref_125
                      updatedOn:
                        type: string
                        format: date-time
                      updateType:
                        type: string
                        enum: &ref_386
                          - unspecified
                          - account-closed
                          - contact-cardholder
                          - expiration-update
                          - no-change
                          - no-match
                          - number-update
                        description: The results of the card update request.
                        example: number-update
                    description: The results of the most recent card update request.
                    example: &ref_126
                      updatedOn: '2024-05-06T12:20:38.184Z'
                      updateType: number-update
                  domesticPushToCard:
                    type: string
                    enum: &ref_127
                      - not-supported
                      - standard
                      - fast-funds
                      - unknown
                    description: Indicates which level of domestic push-to-card transfer is supported by the card, if any.
                    example: standard
                  domesticPullFromCard:
                    type: string
                    enum: &ref_128
                      - not-supported
                      - supported
                      - unknown
                    description: Indicates if the card supports domestic pull-from-card transfer.
                    example: supported
                  paymentMethods:
                    type: array
                    items:
                      type: object
                      required: *ref_63
                      properties: *ref_64
                    description: |2-
                        Includes any payment methods created as a result of linking a card with the `x-wait-for` header set to `payment-method`.

                        Only returned by the link card endpoint; not included when getting or listing cards.
                description: Describes a card on a Moov account.
                example: &ref_70
                  cardID: 01234567-89ab-cdef-0123-456789abcdef
                  fingerprint: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                  brand: Visa
                  cardType: credit
                  cardCategory: CLASSIC
                  lastFourCardNumber: '1111'
                  bin: '411111'
                  expiration:
                    month: '01'
                    year: '21'
                  holderName: Jules Jackson
                  billingAddress:
                    addressLine1: 123 Main Street
                    addressLine2: Apt 302
                    city: Boulder
                    stateOrProvince: CO
                    postalCode: '80301'
                    country: US
                  cardVerification:
                    cvv: match
                    addressLine1: match
                    postalCode: match
                    accountName:
                      firstName: match
                      lastName: match
                      middleName: match
                      fullName: match
                  issuer: GRINGOTTS BANK
                  issuerCountry: US
                  issuerURL: HTTPS://WWW.EXAMPLE.COM/
                  issuerPhone: '8185551212'
                  commercial: false
                  regulated: false
                  cardOnFile: true
                  merchantAccountID: 01234567-89ab-cdef-0123-456789abcdef
                  cardAccountUpdater:
                    updatedOn: '2024-05-06T12:20:38.184Z'
                    updateType: number-update
                  domesticPushToCard: standard
                  domesticPullFromCard: supported
              example:
                cardID: 01234567-89ab-cdef-0123-456789abcdef
                fingerprint: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                brand: Visa
                cardType: credit
                cardCategory: CLASSIC
                lastFourCardNumber: '1111'
                bin: '411111'
                expiration:
                  month: '01'
                  year: '21'
                holderName: Jules Jackson
                billingAddress:
                  addressLine1: 123 Main Street
                  addressLine2: Apt 302
                  city: Boulder
                  stateOrProvince: CO
                  postalCode: '80301'
                  country: US
                cardVerification:
                  cvv: match
                  addressLine1: match
                  postalCode: match
                  accountName:
                    firstName: match
                    lastName: match
                    middleName: match
                    fullName: match
                issuer: GRINGOTTS BANK
                issuerCountry: US
                issuerURL: HTTPS://WWW.EXAMPLE.COM/
                issuerPhone: '8185551212'
                commercial: false
                regulated: false
                cardOnFile: true
                merchantAccountID: 01234567-89ab-cdef-0123-456789abcdef
                cardAccountUpdater:
                  updatedOn: '2024-05-06T12:20:38.184Z'
                  updateType: number-update
                domesticPushToCard: standard
                domesticPullFromCard: supported
                paymentMethods:
                  - paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                    paymentMethodType: card-payment
                  - paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                    paymentMethodType: push-to-card
                  - paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                    paymentMethodType: pull-from-card
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: Attempted to link card that already exists on the account.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_531
                  error:
                    type: string
                  e2ee:
                    type: object
                    properties: &ref_71
                      token:
                        type: string
                  cardNumber:
                    type: string
                  cardCvv:
                    type: string
                  expiration:
                    type: string
                  holderName:
                    type: string
                  billingAddress:
                    type: string
                  cardOnFile:
                    type: string
                  merchantAccountID:
                    type: string
                  verifyName:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_528
                - cardNumber
                - cardCvv
                - expiration
                - billingAddress
              properties: &ref_529
                e2ee:
                  type: object
                  required: &ref_218
                    - token
                  properties: &ref_219
                    token:
                      type: string
                      format: jwe
                      description: An [RFC](https://datatracker.ietf.org/doc/html/rfc7516) compact-serialized JSON Web Encryption (JWE) token.
                  description: |-
                    Wraps a compact-serialized JSON Web Encryption (JWE) token used for secure transmission of sensitive data (e.g., PCI information) through intermediaries. 
                    This token is encrypted using the public key from /end-to-end-keys and wraps an AES key. For details and examples, refer to our 
                    [GitHub repository](https://github.com/moovfinancial/moov-go/blob/main/examples/e2ee/e2ee_test.go).
                  example: &ref_220
                    token: eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA
                cardNumber:
                  type: string
                cardCvv:
                  type: string
                expiration:
                  type: object
                  required: *ref_59
                  properties: *ref_60
                  description: The expiration date of the card or token.
                  example: *ref_61
                holderName:
                  type: string
                billingAddress:
                  type: object
                  required: *ref_65
                  properties: *ref_66
                  example: *ref_67
                cardOnFile:
                  type: boolean
                merchantAccountID:
                  type: string
                verifyName:
                  type: boolean
              example: &ref_530
                cardNumber: '4111111111111111'
                cardCvv: '123'
                expiration:
                  month: '01'
                  year: '21'
                holderName: Jules Jackson
                billingAddress:
                  postalCode: '80301'
            example:
              cardNumber: '4111111111111111'
              cardCvv: '123'
              expiration:
                month: '01'
                year: '21'
              holderName: Jules Jackson
              billingAddress:
                postalCode: '80301'
      x-speakeasy-name-override: link
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.cards.link(account_id="60ffc839-a919-48ea-a18a-26cccee05743", card_number="4111111111111111", card_cvv="123", expiration={
                    "month": "01",
                    "year": "21",
                }, billing_address={
                    "postal_code": "80301",
                }, x_wait_for=components.LinkCardWaitFor.PAYMENT_METHOD, e2ee={
                    "token": "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA",
                }, holder_name="Jules Jackson")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cards.link({
                xWaitFor: "payment-method",
                accountID: "60ffc839-a919-48ea-a18a-26cccee05743",
                linkCard: {
                  cardNumber: "4111111111111111",
                  cardCvv: "123",
                  expiration: {
                    month: "01",
                    year: "21",
                  },
                  holderName: "Jules Jackson",
                  billingAddress: {
                    postalCode: "80301",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.LinkCardError;
            import io.moov.sdk.models.operations.LinkCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, LinkCardError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    LinkCardResponse res = sdk.cards().link()
                            .xWaitFor(LinkCardWaitFor.PAYMENT_METHOD)
                            .accountID("60ffc839-a919-48ea-a18a-26cccee05743")
                            .linkCard(LinkCard.builder()
                                .cardNumber("4111111111111111")
                                .cardCvv("123")
                                .expiration(CardExpiration.builder()
                                    .month("01")
                                    .year("21")
                                    .build())
                                .billingAddress(CardAddress.builder()
                                    .postalCode("80301")
                                    .build())
                                .holderName("Jules Jackson")
                                .build())
                            .call();

                    if (res.card().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $linkCard = new Components\LinkCard(
                cardNumber: '4111111111111111',
                cardCvv: '123',
                expiration: new Components\CardExpiration(
                    month: '01',
                    year: '21',
                ),
                holderName: 'Jules Jackson',
                billingAddress: new Components\CardAddress(
                    postalCode: '80301',
                ),
            );

            $response = $sdk->cards->link(
                accountID: '60ffc839-a919-48ea-a18a-26cccee05743',
                linkCard: $linkCard,
                xMoovVersion: 'v2024.01.00',
                xWaitFor: Components\LinkCardWaitFor::PaymentMethod

            );

            if ($response->card !== null) {
                // handle response
            }
    get:
      operationId: listCards
      description: |-
        List all the active cards associated with a Moov account. 

        Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_68
                  properties: *ref_69
                  description: Describes a card on a Moov account.
                  example: *ref_70
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Cards
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.cards.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cards.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListCardsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListCardsResponse res = sdk.cards().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.cards().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->cards->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->cards !== null) {
                // handle response
            }
  /accounts/{accountID}/cards/{cardID}:
    get:
      operationId: getCard
      description: |-
        Fetch a specific card associated with a Moov account. 

        Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the card.
            example: 01234567-89ab-cdef-0123-456789abcdef
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_68
                properties: *ref_69
                description: Describes a card on a Moov account.
                example: *ref_70
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Cards
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.cards.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", card_id="01234567-89ab-cdef-0123-456789abcdef")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cards.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                cardID: "01234567-89ab-cdef-0123-456789abcdef",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetCardResponse res = sdk.cards().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .cardID("01234567-89ab-cdef-0123-456789abcdef")
                            .call();

                    if (res.card().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->cards->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                cardID: '01234567-89ab-cdef-0123-456789abcdef',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->card !== null) {
                // handle response
            }
    patch:
      operationId: updateCard
      description: |-
        Update a linked card and/or resubmit it for verification. 

        If a value is provided for CVV, a new verification ($0 authorization) will be submitted for the card. Updating the expiration 
        date or 
        address will update the information stored on file for the card but will not be verified.

        Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#reverify-a-card) to learn 
        more.

        Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the card.
            example: 01234567-89ab-cdef-0123-456789abcdef
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_68
                properties: *ref_69
                description: Describes a card on a Moov account.
                example: *ref_70
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_653
                  e2ee:
                    type: object
                    properties: *ref_71
                  billingAddress:
                    type: string
                  expiration:
                    type: string
                  cardCvv:
                    type: string
                  cardOnFile:
                    type: string
                  merchantAccountID:
                    type: string
                  verifyName:
                    type: string
                  holderName:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_649
                e2ee:
                  type: object
                  properties: &ref_454
                    token:
                      type: string
                      format: jwe
                      description: An [RFC](https://datatracker.ietf.org/doc/html/rfc7516) compact-serialized JSON Web Encryption (JWE) token.
                  description: |-
                    Wraps a compact-serialized JSON Web Encryption (JWE) token used for secure transmission of sensitive data (e.g., PCI information) through intermediaries. 
                    This token is encrypted using the public key from /end-to-end-keys and wraps an AES key. For details and examples, refer to our 
                    [GitHub repository](https://github.com/moovfinancial/moov-go/blob/main/examples/e2ee/e2ee_test.go).
                  example: &ref_455
                    token: eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA
                billingAddress:
                  type: object
                  properties: &ref_651
                    addressLine1:
                      type: string
                      maxLength: 60
                    addressLine2:
                      type: string
                      maxLength: 32
                    city:
                      type: string
                      maxLength: 32
                    stateOrProvince:
                      type: string
                      maxLength: 2
                    postalCode:
                      type: string
                      maxLength: 10
                    country:
                      type: string
                      maxLength: 2
                  example: &ref_652
                    addressLine1: 123 Main Street
                    addressLine2: Apt 302
                    city: Boulder
                    stateOrProvince: CO
                    postalCode: '80301'
                    country: US
                expiration:
                  type: object
                  properties: &ref_654
                    month:
                      type: string
                    year:
                      type: string
                  example: &ref_655
                    month: '01'
                    year: '21'
                cardCvv:
                  type: string
                cardOnFile:
                  type: boolean
                merchantAccountID:
                  type: string
                verifyName:
                  type: boolean
                holderName:
                  type: string
              example: &ref_650
                cardCvv: '456'
      x-speakeasy-name-override: update
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.cards.update(account_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd", card_id="01234567-89ab-cdef-0123-456789abcdef", e2ee={
                    "token": "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA",
                }, billing_address={
                    "address_line1": "123 Main Street",
                    "address_line2": "Apt 302",
                    "city": "Boulder",
                    "state_or_province": "CO",
                    "postal_code": "80301",
                    "country": "US",
                }, expiration={
                    "month": "01",
                    "year": "21",
                }, card_cvv="456")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cards.update({
                accountID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                cardID: "01234567-89ab-cdef-0123-456789abcdef",
                updateCard: {
                  e2ee: {
                    token: "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA",
                  },
                  billingAddress: {
                    addressLine1: "123 Main Street",
                    addressLine2: "Apt 302",
                    city: "Boulder",
                    stateOrProvince: "CO",
                    postalCode: "80301",
                    country: "US",
                  },
                  expiration: {
                    month: "01",
                    year: "21",
                  },
                  cardCvv: "456",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.UpdateCardError;
            import io.moov.sdk.models.operations.UpdateCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, UpdateCardError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateCardResponse res = sdk.cards().update()
                            .accountID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .cardID("01234567-89ab-cdef-0123-456789abcdef")
                            .updateCard(UpdateCard.builder()
                                .e2ee(E2EETokenUpdate.builder()
                                    .token("eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA")
                                    .build())
                                .billingAddress(UpdateCardAddress.builder()
                                    .addressLine1("123 Main Street")
                                    .addressLine2("Apt 302")
                                    .city("Boulder")
                                    .stateOrProvince("CO")
                                    .postalCode("80301")
                                    .country("US")
                                    .build())
                                .expiration(UpdateCardExpiration.builder()
                                    .month("01")
                                    .year("21")
                                    .build())
                                .cardCvv("456")
                                .build())
                            .call();

                    if (res.card().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateCard = new Components\UpdateCard(
                cardCvv: '456',
            );

            $response = $sdk->cards->update(
                accountID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                cardID: '01234567-89ab-cdef-0123-456789abcdef',
                updateCard: $updateCard,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->card !== null) {
                // handle response
            }
    delete:
      operationId: disableCard
      description: |-
        Disables a card associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the card.
            example: 01234567-89ab-cdef-0123-456789abcdef
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Cards
      x-speakeasy-name-override: disable
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.cards.disable(account_id="cd7cd1ce-90cc-444b-ac3e-badb79be277f", card_id="01234567-89ab-cdef-0123-456789abcdef")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cards.disable({
                accountID: "cd7cd1ce-90cc-444b-ac3e-badb79be277f",
                cardID: "01234567-89ab-cdef-0123-456789abcdef",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DisableCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DisableCardResponse res = sdk.cards().disable()
                            .accountID("cd7cd1ce-90cc-444b-ac3e-badb79be277f")
                            .cardID("01234567-89ab-cdef-0123-456789abcdef")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->cards->disable(
                accountID: 'cd7cd1ce-90cc-444b-ac3e-badb79be277f',
                cardID: '01234567-89ab-cdef-0123-456789abcdef',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/countries:
    get:
      operationId: getAccountCountries
      description: |-
        Retrieve the specified countries of operation for an account. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_72
                  - countries
                properties: &ref_73
                  countries:
                    type: array
                    items:
                      type: string
                      maxLength: 64
                      example: United States
                description: The countries in which an account operates.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-speakeasy-name-override: getCountries
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.get_countries(account_id="b49c57bf-7b36-4308-8206-c1f5ce8067ac")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.getCountries({
                accountID: "b49c57bf-7b36-4308-8206-c1f5ce8067ac",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetAccountCountriesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetAccountCountriesResponse res = sdk.accounts().getCountries()
                            .accountID("b49c57bf-7b36-4308-8206-c1f5ce8067ac")
                            .call();

                    if (res.accountCountries().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->getCountries(
                accountID: 'b49c57bf-7b36-4308-8206-c1f5ce8067ac',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->accountCountries !== null) {
                // handle response
            }
    put:
      operationId: assignAccountCountries
      description: |-
        Assign the countries of operation for an account.

        This endpoint will always overwrite the previously assigned values. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_72
                properties: *ref_73
                description: The countries in which an account operates.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_352
                  - error
                properties: &ref_353
                  error:
                    type: object
                    required: &ref_395
                      - countries
                    properties: &ref_396
                      countries:
                        type: object
                        additionalProperties:
                          type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: *ref_72
              properties: *ref_73
              description: The countries in which an account operates.
      x-speakeasy-name-override: assignCountries
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.assign_countries(account_id="aa2dc19b-77dd-481f-a0a8-c76f2cfc1372", countries=[
                    "United States",
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.assignCountries({
                accountID: "aa2dc19b-77dd-481f-a0a8-c76f2cfc1372",
                accountCountries: {
                  countries: [
                    "United States",
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.AccountCountries;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.AssignCountriesError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.AssignAccountCountriesResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, AssignCountriesError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    AssignAccountCountriesResponse res = sdk.accounts().assignCountries()
                            .accountID("aa2dc19b-77dd-481f-a0a8-c76f2cfc1372")
                            .accountCountries(AccountCountries.builder()
                                .countries(List.of(
                                    "United States"))
                                .build())
                            .call();

                    if (res.accountCountries().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $accountCountries = new Components\AccountCountries(
                countries: [
                    'United States',
                ],
            );

            $response = $sdk->accounts->assignCountries(
                accountID: 'aa2dc19b-77dd-481f-a0a8-c76f2cfc1372',
                accountCountries: $accountCountries,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->accountCountries !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes:
    get:
      operationId: listDisputes
      description: |-
        Returns the list of disputes. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: &ref_81
            type: integer
            format: int64
            description: The number of entries to skip when paginating a large result set.
            example: 60
          explode: false
        - name: count
          in: query
          required: false
          schema: &ref_82
            default: 200
            type: integer
            format: int64
            description: Limits the maximum number of results returned, or determines the page size when used with `skip` for pagination.
            example: 20
          explode: false
        - name: startDateTime
          in: query
          required: false
          description: Optional date-time parameter to filter all disputes created on and after the provided date and time.
          schema: &ref_271
            type: string
            format: date-time
          explode: false
        - name: endDateTime
          in: query
          required: false
          description: Optional date-time parameter to filter all disputes created on and before the provided date and time.
          schema: &ref_266
            type: string
            format: date-time
          explode: false
        - name: respondStartDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all disputes with respond by before this date-time.
          schema: &ref_270
            type: string
            format: date-time
          explode: false
        - name: respondEndDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all disputes with respond by before this date-time.
          schema: &ref_269
            type: string
            format: date-time
          explode: false
        - name: status
          in: query
          required: false
          description: Optional dispute status by which to filter the disputes.
          schema: &ref_272
            type: string
            enum: &ref_74
              - response-needed
              - resolved
              - under-review
              - closed
              - accepted
              - expired
              - won
              - lost
            description: |-
              The status of a particular dispute. 

              Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
          explode: false
        - name: merchantAccountID
          in: query
          required: false
          description: Optional parameter to filter by merchant account ID.
          schema: &ref_267
            type: string
            format: uuid
          explode: false
        - name: cardholderAccountID
          in: query
          required: false
          description: Optional parameter to filter by cardholder account ID.
          schema: &ref_264
            type: string
            format: uuid
          explode: false
        - name: disputeIDs
          in: query
          required: false
          description: Optional parameter to filter by a comma separated list of dispute IDs.
          schema: &ref_265
            type: array
            items:
              type: string
          explode: false
        - name: transferIDs
          in: query
          required: false
          description: Optional parameter to filter by a comma separated list of transfer IDs.
          schema: &ref_273
            type: array
            items:
              type: string
          explode: false
        - name: orderBy
          in: query
          required: false
          schema: &ref_268
            type: string
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_75
                    - disputeID
                    - merchantAccountID
                    - amount
                    - networkReasonCode
                    - transfer
                    - respondBy
                    - status
                    - phase
                    - createdOn
                  properties: &ref_76
                    disputeID:
                      type: string
                      format: uuid
                    merchantAccountID:
                      type: string
                      format: uuid
                    amount:
                      type: object
                      required: &ref_98
                        - currency
                        - value
                      properties: &ref_99
                        currency:
                          type: string
                          pattern: ^[A-Za-z]{3}$
                          description: A 3-letter ISO 4217 currency code.
                          example: USD
                        value:
                          type: integer
                          format: int64
                          description: |-
                            Quantity in the smallest unit of the specified currency. 

                            In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                          example: 1204
                    networkReasonCode:
                      type: string
                      description: |-
                        Indicates the card network's category for the dispute. 

                        These codes may differ between card brands. You can find more information on the code from the networkReasonDescription field.
                    networkReasonDescription:
                      type: string
                      description: Provides detail on the card network's categorization of the dispute.
                    transfer:
                      type: object
                      required: &ref_449
                        - transferID
                      properties: &ref_450
                        transferID:
                          type: string
                          format: uuid
                          description: The disputed transfer's ID.
                    respondBy:
                      type: string
                      format: date-time
                    status:
                      type: string
                      enum: *ref_74
                      description: |-
                        The status of a particular dispute. 

                        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
                    phase:
                      type: string
                      enum: &ref_448
                        - pre-dispute
                        - inquiry
                        - chargeback
                        - unknown
                      description: The phase of a dispute within the dispute lifecycle.
                    createdOn:
                      type: string
                      format: date-time
                    submittedOn:
                      type: string
                      format: date-time
                  description: Details of a card transaction dispute.
                  example: &ref_77
                    disputeID: 6e356108-fdfa-4910-bbe4-1e3c8abf5520
                    merchantAccountID: 34233b72-780c-4e0e-8b08-cbbe1bc878f8
                    createdOn: '2024-12-23T17:55:00Z'
                    amount:
                      currency: USD
                      value: 257753
                    networkReasonCode: '10.4'
                    transfer:
                      transferID: ecac148a-917e-4ee0-b46a-c51408939fff
                    respondBy: '2024-12-23T18:55:00Z'
                    status: response-needed
                    phase: chargeback
              example:
                - disputeID: 6e356108-fdfa-4910-bbe4-1e3c8abf5520
                  merchantAccountID: 34233b72-780c-4e0e-8b08-cbbe1bc878f8
                  createdOn: '2024-12-23T17:55:00Z'
                  amount:
                    currency: USD
                    value: 257753
                  networkReasonCode: '10.4'
                  transfer:
                    transferID: ecac148a-917e-4ee0-b46a-c51408939fff
                  respondBy: '2024-12-23T18:55:00Z'
                  status: response-needed
                  phase: chargeback
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.ListDisputesRequest;
            import io.moov.sdk.models.operations.ListDisputesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListDisputesRequest req = ListDisputesRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListDisputesResponse res = sdk.disputes().list()
                            .request(req)
                            .call();

                    if (res.disputes().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListDisputesRequest(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                skip: 60,
                count: 20,
            );

            $response = $sdk->disputes->list(
                request: $request
            );

            if ($response->disputes !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}:
    get:
      operationId: getDispute
      description: |-
        Get a dispute by ID. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_75
                properties: *ref_76
                description: Details of a card transaction dispute.
                example: *ref_77
              example:
                disputeID: 6e356108-fdfa-4910-bbe4-1e3c8abf5520
                merchantAccountID: 34233b72-780c-4e0e-8b08-cbbe1bc878f8
                createdOn: '2024-12-23T17:55:00Z'
                amount:
                  currency: USD
                  value: 257753
                networkReasonCode: '10.4'
                transfer:
                  transferID: ecac148a-917e-4ee0-b46a-c51408939fff
                respondBy: '2024-12-23T18:55:00Z'
                status: response-needed
                phase: chargeback
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", dispute_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                disputeID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetDisputeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetDisputeResponse res = sdk.disputes().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .disputeID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.dispute().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                disputeID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->dispute !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/accept:
    post:
      operationId: acceptDispute
      description: |-
        Accepts liability for a dispute. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_75
                properties: *ref_76
                description: Details of a card transaction dispute.
                example: *ref_77
              example:
                disputeID: 6e356108-fdfa-4910-bbe4-1e3c8abf5520
                merchantAccountID: 34233b72-780c-4e0e-8b08-cbbe1bc878f8
                createdOn: '2024-12-23T17:55:00Z'
                amount:
                  currency: USD
                  value: 257753
                networkReasonCode: '10.4'
                transfer:
                  transferID: ecac148a-917e-4ee0-b46a-c51408939fff
                respondBy: '2024-12-23T18:55:00Z'
                status: accepted
                phase: chargeback
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: accept
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.accept(account_id="a155a634-52c8-4ade-b619-6958b5f88a84", dispute_id="e67dcdcf-56b8-44e6-b2b0-a9297f858656")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.accept({
                accountID: "a155a634-52c8-4ade-b619-6958b5f88a84",
                disputeID: "e67dcdcf-56b8-44e6-b2b0-a9297f858656",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.AcceptDisputeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    AcceptDisputeResponse res = sdk.disputes().accept()
                            .accountID("a155a634-52c8-4ade-b619-6958b5f88a84")
                            .disputeID("e67dcdcf-56b8-44e6-b2b0-a9297f858656")
                            .call();

                    if (res.dispute().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->accept(
                accountID: 'a155a634-52c8-4ade-b619-6958b5f88a84',
                disputeID: 'e67dcdcf-56b8-44e6-b2b0-a9297f858656',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->dispute !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence:
    get:
      operationId: listDisputeEvidence
      description: |-
        Returns a dispute's public evidence by its ID. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_79
                    - evidenceID
                    - disputeID
                    - evidenceType
                    - createdOn
                    - updatedOn
                  properties: &ref_80
                    evidenceID:
                      type: string
                      format: uuid
                    disputeID:
                      type: string
                      format: uuid
                    evidenceType:
                      type: string
                      enum: &ref_78
                        - receipt
                        - proof-of-delivery
                        - cancelation-policy
                        - terms-of-service
                        - customer-communication
                        - generic-evidence
                        - cover-letter
                        - other
                    text:
                      type: string
                      description: For text evidence, the text submitted as evidence.
                    mimeType:
                      type: string
                      description: For file evidence, the MIME type of the file.
                    filename:
                      type: string
                      description: For file evidence, the name of the file.
                    size:
                      type: integer
                      format: int64
                      description: For file evidence, the size of the file.
                    createdOn:
                      type: string
                      format: date-time
                    updatedOn:
                      type: string
                      format: date-time
                    submittedOn:
                      type: string
                      format: date-time
                      description: When the evidence was submitted for review.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: listEvidence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.list_evidence(account_id="613e59d0-0cb8-462c-be9c-7f2b955ec234", dispute_id="1bb71474-4bf0-40b8-899f-01914b8ad7e5")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.listEvidence({
                accountID: "613e59d0-0cb8-462c-be9c-7f2b955ec234",
                disputeID: "1bb71474-4bf0-40b8-899f-01914b8ad7e5",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListDisputeEvidenceResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListDisputeEvidenceResponse res = sdk.disputes().listEvidence()
                            .accountID("613e59d0-0cb8-462c-be9c-7f2b955ec234")
                            .disputeID("1bb71474-4bf0-40b8-899f-01914b8ad7e5")
                            .call();

                    if (res.disputeEvidenceResponses().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->listEvidence(
                accountID: '613e59d0-0cb8-462c-be9c-7f2b955ec234',
                disputeID: '1bb71474-4bf0-40b8-899f-01914b8ad7e5',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->disputeEvidenceResponses !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence-file:
    post:
      operationId: uploadDisputeEvidenceFile
      description: |-
        Uploads a file as evidence for a dispute. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: The resource was successfully created.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_468
                  - evidenceID
                  - disputeID
                  - filename
                  - mimeType
                  - size
                  - evidenceType
                  - createdOn
                properties: &ref_469
                  evidenceID:
                    type: string
                    format: uuid
                    description: The ID of the evidence.
                  disputeID:
                    type: string
                    format: uuid
                    description: The ID of the dispute the evidence is associated with.
                  filename:
                    type: string
                    description: The name of the evidence file.
                  mimeType:
                    type: string
                    description: The MIME type of the evidence file.
                  size:
                    type: integer
                    format: int64
                    description: The size of the evidence file.
                  evidenceType:
                    type: string
                    enum: *ref_78
                  createdOn:
                    type: string
                    format: date-time
                    description: The date and time the evidence was uploaded.
                description: Details of a successfully uploaded evidence file.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_482
                  evidenceType:
                    type: string
                  file:
                    type: object
                    properties:
                      filename:
                        type: string
                      mimeType:
                        type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: &ref_407
                - file
                - evidenceType
              properties: &ref_408
                file:
                  type: string
                  format: binary
                  description: |-
                    The file to upload as evidence. Valid types are [jpeg, tiff, pdf] with a limit of 4MB per file.

                    The `Content-Type` header for this form part must be one of the following:
                      - `image/jpeg`
                      - `image/tiff`
                      - `application/pdf`
                evidenceType:
                  type: string
                  enum: *ref_78
      x-speakeasy-name-override: uploadEvidenceFile
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.upload_evidence_file(account_id="190d267b-ea77-4231-9939-ba89cb7df82b", dispute_id="94aabddc-d855-40e6-ab0a-1e547e0dcc9d", file={
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                }, evidence_type=components.EvidenceType.CUSTOMER_COMMUNICATION)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";
            import { openAsBlob } from "node:fs";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.uploadEvidenceFile({
                accountID: "190d267b-ea77-4231-9939-ba89cb7df82b",
                disputeID: "94aabddc-d855-40e6-ab0a-1e547e0dcc9d",
                createEvidenceFileMultiPart: {
                  file: await openAsBlob("example.file"),
                  evidenceType: "customer-communication",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.FileUploadValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UploadDisputeEvidenceFileResponse;
            import java.lang.Exception;
            import java.nio.charset.StandardCharsets;

            public class Application {

                public static void main(String[] args) throws GenericError, FileUploadValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UploadDisputeEvidenceFileResponse res = sdk.disputes().uploadEvidenceFile()
                            .accountID("77231939-ba89-4cb7-adf8-2b494aabddcd")
                            .disputeID("550e6b0a-1e54-47e0-9dcc-9daa38417ce5")
                            .createEvidenceFileMultiPart(CreateEvidenceFileMultiPart.builder()
                                .file(File.builder()
                                    .fileName("example.file")
                                    .content("0xd1d0C399fD".getBytes(StandardCharsets.UTF_8))
                                    .build())
                                .evidenceType(EvidenceType.GENERIC_EVIDENCE)
                                .build())
                            .call();

                    if (res.evidenceUploadResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createEvidenceFileMultiPart = new Components\CreateEvidenceFileMultiPart(
                file: new Components\File(
                    fileName: 'example.file',
                    content: '0xd1d0C399fD',
                ),
                evidenceType: Components\EvidenceType::GenericEvidence,
            );

            $response = $sdk->disputes->uploadEvidenceFile(
                accountID: '77231939-ba89-4cb7-adf8-2b494aabddcd',
                disputeID: '550e6b0a-1e54-47e0-9dcc-9daa38417ce5',
                createEvidenceFileMultiPart: $createEvidenceFileMultiPart,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->evidenceUploadResponse !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence-text:
    post:
      operationId: uploadDisputeEvidenceText
      description: |-
        Uploads text as evidence for a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: The resource was successfully created.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_466
                  - evidenceID
                  - disputeID
                  - evidenceType
                  - text
                  - createdOn
                properties: &ref_467
                  evidenceID:
                    type: string
                    format: uuid
                  disputeID:
                    type: string
                    format: uuid
                  evidenceType:
                    type: string
                    enum: *ref_78
                  text:
                    type: string
                  createdOn:
                    type: string
                    format: date-time
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_409
                - text
                - evidenceType
              properties: &ref_410
                text:
                  type: string
                  maxLength: 750
                  description: The text to associate with the dispute as evidence.
                evidenceType:
                  type: string
                  enum: *ref_78
      x-speakeasy-name-override: uploadEvidenceText
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.upload_evidence_text(account_id="a4f06189-7f74-4b7e-b76a-f3c7af17b8d9", dispute_id="fb79f20c-b948-445c-a145-3e20ce4f769c", text="<value>", evidence_type=components.EvidenceType.CUSTOMER_COMMUNICATION)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.uploadEvidenceText({
                accountID: "a4f06189-7f74-4b7e-b76a-f3c7af17b8d9",
                disputeID: "fb79f20c-b948-445c-a145-3e20ce4f769c",
                createEvidenceText: {
                  text: "<value>",
                  evidenceType: "customer-communication",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UploadDisputeEvidenceTextResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UploadDisputeEvidenceTextResponse res = sdk.disputes().uploadEvidenceText()
                            .accountID("a4f06189-7f74-4b7e-b76a-f3c7af17b8d9")
                            .disputeID("fb79f20c-b948-445c-a145-3e20ce4f769c")
                            .createEvidenceText(CreateEvidenceText.builder()
                                .text("<value>")
                                .evidenceType(EvidenceType.CUSTOMER_COMMUNICATION)
                                .build())
                            .call();

                    if (res.evidenceTextResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createEvidenceText = new Components\CreateEvidenceText(
                text: '<value>',
                evidenceType: Components\EvidenceType::CustomerCommunication,
            );

            $response = $sdk->disputes->uploadEvidenceText(
                accountID: 'a4f06189-7f74-4b7e-b76a-f3c7af17b8d9',
                disputeID: 'fb79f20c-b948-445c-a145-3e20ce4f769c',
                createEvidenceText: $createEvidenceText,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->evidenceTextResponse !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence/submit:
    post:
      operationId: submitDisputeEvidence
      description: |-
        Submit the evidence associated with a dispute.

        Evidence items must be uploaded using the appropriate endpoint(s) prior to calling this endpoint to submit it. **Evidence can only
        be submitted once per dispute.**

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_75
                properties: *ref_76
                description: Details of a card transaction dispute.
                example: *ref_77
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: submitEvidence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.submit_evidence(account_id="7cf55b42-45bd-49ff-883c-0017334607a6", dispute_id="f6e86188-8533-46e8-a184-ec17f223c86b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.submitEvidence({
                accountID: "7cf55b42-45bd-49ff-883c-0017334607a6",
                disputeID: "f6e86188-8533-46e8-a184-ec17f223c86b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.SubmitDisputeEvidenceResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    SubmitDisputeEvidenceResponse res = sdk.disputes().submitEvidence()
                            .accountID("7cf55b42-45bd-49ff-883c-0017334607a6")
                            .disputeID("f6e86188-8533-46e8-a184-ec17f223c86b")
                            .call();

                    if (res.dispute().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->submitEvidence(
                accountID: '7cf55b42-45bd-49ff-883c-0017334607a6',
                disputeID: 'f6e86188-8533-46e8-a184-ec17f223c86b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->dispute !== null) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}:
    get:
      operationId: getDisputeEvidence
      description: |-
        Get dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evidenceID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_79
                properties: *ref_80
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: getEvidence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.get_evidence(account_id="3a49ec36-8a92-4fae-81e6-868bfc90b4c9", dispute_id="7128e90f-9089-47d5-92b9-87bbfe6bd9b3", evidence_id="614a5588-4d0f-4d00-b8d9-2ae60f6124bf")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.getEvidence({
                accountID: "3a49ec36-8a92-4fae-81e6-868bfc90b4c9",
                disputeID: "7128e90f-9089-47d5-92b9-87bbfe6bd9b3",
                evidenceID: "614a5588-4d0f-4d00-b8d9-2ae60f6124bf",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetDisputeEvidenceResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetDisputeEvidenceResponse res = sdk.disputes().getEvidence()
                            .accountID("3a49ec36-8a92-4fae-81e6-868bfc90b4c9")
                            .disputeID("7128e90f-9089-47d5-92b9-87bbfe6bd9b3")
                            .evidenceID("614a5588-4d0f-4d00-b8d9-2ae60f6124bf")
                            .call();

                    if (res.disputeEvidenceResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->getEvidence(
                accountID: '3a49ec36-8a92-4fae-81e6-868bfc90b4c9',
                disputeID: '7128e90f-9089-47d5-92b9-87bbfe6bd9b3',
                evidenceID: '614a5588-4d0f-4d00-b8d9-2ae60f6124bf',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->disputeEvidenceResponse !== null) {
                // handle response
            }
    patch:
      operationId: updateDisputeEvidence
      description: |-
        Updates dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evidenceID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_79
                properties: *ref_80
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_657
                evidenceType:
                  type: string
                  enum: *ref_78
                text:
                  type: string
                  description: If updating text evidence, the new text to associate with the dispute.
      x-speakeasy-name-override: updateEvidence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.update_evidence(account_id="f19d220a-55c9-476d-9cfa-d9a536b8065f", dispute_id="da248348-9f0d-4df8-a9c6-66cc2492e87a", evidence_id="a204faa9-3cce-4628-b833-5b0694ac47bb")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.updateEvidence({
                accountID: "f19d220a-55c9-476d-9cfa-d9a536b8065f",
                disputeID: "da248348-9f0d-4df8-a9c6-66cc2492e87a",
                evidenceID: "a204faa9-3cce-4628-b833-5b0694ac47bb",
                updateEvidence: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.components.UpdateEvidence;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UpdateDisputeEvidenceRequest;
            import io.moov.sdk.models.operations.UpdateDisputeEvidenceResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateDisputeEvidenceRequest req = UpdateDisputeEvidenceRequest.builder()
                            .accountID("f19d220a-55c9-476d-9cfa-d9a536b8065f")
                            .disputeID("da248348-9f0d-4df8-a9c6-66cc2492e87a")
                            .evidenceID("a204faa9-3cce-4628-b833-5b0694ac47bb")
                            .updateEvidence(UpdateEvidence.builder()
                                .build())
                            .build();

                    UpdateDisputeEvidenceResponse res = sdk.disputes().updateEvidence()
                            .request(req)
                            .call();

                    if (res.disputeEvidenceResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\UpdateDisputeEvidenceRequest(
                accountID: 'f19d220a-55c9-476d-9cfa-d9a536b8065f',
                disputeID: 'da248348-9f0d-4df8-a9c6-66cc2492e87a',
                evidenceID: 'a204faa9-3cce-4628-b833-5b0694ac47bb',
                updateEvidence: new Components\UpdateEvidence(),
            );

            $response = $sdk->disputes->updateEvidence(
                request: $request
            );

            if ($response->disputeEvidenceResponse !== null) {
                // handle response
            }
    delete:
      operationId: deleteDisputeEvidenceFile
      description: |-
        Deletes dispute evidence by ID. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evidenceID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: deleteEvidence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.delete_evidence(account_id="21999434-0e9c-4cd1-890a-4af813ad91ae", dispute_id="41954292-f363-4ea3-9b4b-bc417e55f6be", evidence_id="ac7b6eef-7513-4ff4-996b-a85b1f62d499")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.deleteEvidence({
                accountID: "21999434-0e9c-4cd1-890a-4af813ad91ae",
                disputeID: "41954292-f363-4ea3-9b4b-bc417e55f6be",
                evidenceID: "ac7b6eef-7513-4ff4-996b-a85b1f62d499",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DeleteDisputeEvidenceFileResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DeleteDisputeEvidenceFileResponse res = sdk.disputes().deleteEvidence()
                            .accountID("21999434-0e9c-4cd1-890a-4af813ad91ae")
                            .disputeID("41954292-f363-4ea3-9b4b-bc417e55f6be")
                            .evidenceID("ac7b6eef-7513-4ff4-996b-a85b1f62d499")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->deleteEvidence(
                accountID: '21999434-0e9c-4cd1-890a-4af813ad91ae',
                disputeID: '41954292-f363-4ea3-9b4b-bc417e55f6be',
                evidenceID: 'ac7b6eef-7513-4ff4-996b-a85b1f62d499',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}/data:
    get:
      operationId: getDisputeEvidenceData
      description: |-
        Downloads dispute evidence data by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evidenceID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request has succeeded.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/tiff:
              schema:
                type: string
                format: binary
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Disputes
      x-speakeasy-name-override: getEvidenceData
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.disputes.get_evidence_data(account_id="4ebc37c5-a566-452b-8b54-ef280fcb888b", dispute_id="4bd05222-78bc-49a7-92a8-f1e5ee0edd6b", evidence_id="01098426-242d-4693-8716-ec08cd8da86e")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.disputes.getEvidenceData({
                accountID: "4ebc37c5-a566-452b-8b54-ef280fcb888b",
                disputeID: "4bd05222-78bc-49a7-92a8-f1e5ee0edd6b",
                evidenceID: "01098426-242d-4693-8716-ec08cd8da86e",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetDisputeEvidenceDataResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetDisputeEvidenceDataResponse res = sdk.disputes().getEvidenceData()
                            .accountID("4ebc37c5-a566-452b-8b54-ef280fcb888b")
                            .disputeID("4bd05222-78bc-49a7-92a8-f1e5ee0edd6b")
                            .evidenceID("01098426-242d-4693-8716-ec08cd8da86e")
                            .call();

                    if (res.twoHundredApplicationPdfResponseStream().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->disputes->getEvidenceData(
                accountID: '4ebc37c5-a566-452b-8b54-ef280fcb888b',
                disputeID: '4bd05222-78bc-49a7-92a8-f1e5ee0edd6b',
                evidenceID: '01098426-242d-4693-8716-ec08cd8da86e',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->twoHundredApplicationPdfBytes !== null) {
                // handle response
            }
  /accounts/{accountID}/fee-plan-agreements:
    get:
      operationId: listFeePlanAgreements
      description: |-
        List all fee plan agreements associated with an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: agreementID
          in: query
          required: false
          description: A comma-separated list of agreement IDs to filter the results by.
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: status
          in: query
          required: false
          description: A comma-separated list of statuses to filter the results by.
          schema:
            type: array
            items:
              type: string
              enum: &ref_83
                - active
                - terminated
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_86
                    - agreementID
                    - planID
                    - name
                    - acceptedOn
                    - status
                    - cardAcquiringModel
                    - billableFees
                    - minimumCommitment
                    - monthlyPlatformFee
                  properties: &ref_87
                    agreementID:
                      type: string
                      format: uuid
                    planID:
                      type: string
                      format: uuid
                    accountID:
                      type: string
                      format: uuid
                    name:
                      type: string
                      description: The name of the agreement.
                    description:
                      type: string
                      description: The description of the agreement.
                    acceptedOn:
                      type: string
                      format: date-time
                    status:
                      type: string
                      enum: *ref_83
                    cardAcquiringModel:
                      type: string
                      enum: &ref_88
                        - cost-plus
                        - flat-rate
                      description: Specifies the card processing pricing model
                    billableFees:
                      type: array
                      items:
                        type: object
                        required: &ref_89
                          - feeModel
                          - feeCategory
                        properties: &ref_90
                          billableFeeID:
                            type: string
                            format: uuid
                          billableEvent:
                            type: string
                            description: A unique code identifying a charge.
                          feeName:
                            type: string
                            description: Specifies the name of the fee that will be billed.
                          feeModel:
                            type: string
                            enum: &ref_473
                              - fixed
                              - blended
                              - variable
                            description: Specifies the pricing model used for the calculation of the final fee.
                          feeCategory:
                            type: string
                            enum: &ref_470
                              - ach
                              - card-acquiring
                              - card-other
                              - card-pull
                              - card-push
                              - monthly-platform
                              - network-passthrough
                              - other
                              - rtp
                          feeProperties:
                            type: object
                            properties: &ref_477
                              fixedAmount:
                                allOf:
                                  - type: object
                                    required: *ref_84
                                    properties: *ref_85
                                description: A fixed fee that is applied to the amount of each transaction in the `fixed` and `blended` fee models.
                              variableRate:
                                type: string
                                pattern: ^[0-9]+.?[0-9]*$
                                description: |-
                                  A percentage fee that is applied to the amount of each transaction in the `blended` fee model, expressed as a decimal. 

                                  For example, 0.05% is '0.05'.
                                example: '0.05'
                              minPerTransaction:
                                allOf:
                                  - type: object
                                    required: *ref_84
                                    properties: *ref_85
                                description: Specifies the minimum allowable spending for a single transaction, working as a transaction floor.
                              maxPerTransaction:
                                allOf:
                                  - type: object
                                    required: *ref_84
                                    properties: *ref_85
                                description: Specifies the maximum allowable spending for a single transaction, working as a transaction ceiling.
                            description: Defines the specific parameters used for fee calculation.
                            example: &ref_478
                              fixedAmount:
                                currency: USD
                                valueDecimal: '0.0195'
                              variableRate: '0.15'
                              minPerTransaction:
                                currency: USD
                                valueDecimal: '0.0195'
                              maxPerTransaction:
                                currency: USD
                                valueDecimal: '0.035'
                          feeConditions:
                            type: object
                            additionalProperties: &ref_471 {}
                            description: Defines the specific conditions that must be met for the fee to be applied.
                            example: &ref_472
                              cardBrand:
                                - visa
                        example: &ref_91
                          billableFeeID: 9d957d33-1a9a-47aa-9460-fe1a90f003dd
                          billableEvent: card-auth-volume
                          feeName: Card decline fee
                          feeModel: fixed
                          feeCategory: card-acquiring
                          feeProperties:
                            fixedAmount:
                              currency: USD
                              valueDecimal: '0.1'
                          feeConditions:
                            transactionType:
                              - decline
                    minimumCommitment:
                      type: object
                      allOf: &ref_92
                        - type: object
                          required: *ref_84
                          properties: *ref_85
                      description: The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
                    monthlyPlatformFee:
                      type: object
                      allOf: &ref_93
                        - type: object
                          required: *ref_84
                          properties: *ref_85
                      description: Fixed recurring amount paid in the billing period regardless of usage.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      x-speakeasy-group: feePlans
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.list_fee_plan_agreements(account_id="4c49ae91-2b32-4a4d-91bf-f062f3c2f38d", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.listFeePlanAgreements({
                skip: 60,
                count: 20,
                accountID: "4c49ae91-2b32-4a4d-91bf-f062f3c2f38d",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListFeePlanAgreementsRequest;
            import io.moov.sdk.models.operations.ListFeePlanAgreementsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListFeePlanAgreementsRequest req = ListFeePlanAgreementsRequest.builder()
                            .accountID("4c49ae91-2b32-4a4d-91bf-f062f3c2f38d")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListFeePlanAgreementsResponse res = sdk.feePlans().listFeePlanAgreements()
                            .request(req)
                            .call();

                    if (res.feePlanAgreements().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListFeePlanAgreementsRequest(
                skip: 60,
                count: 20,
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
            );

            $response = $sdk->feePlans->list(
                request: $request
            );

            if ($response->feePlanAgreements !== null) {
                // handle response
            }
    post:
      operationId: createFeePlanAgreements
      description: |-
        Creates the subscription of a fee plan to a merchant account. Merchants are required to accept the fee plan terms prior to activation.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: The resource was successfully created.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_86
                properties: *ref_87
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_476
                  planID:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_411
                - planID
              properties: &ref_412
                planID:
                  type: string
                  format: uuid
      x-speakeasy-group: feePlans
      x-speakeasy-name-override: createAgreements
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.create_fee_plan_agreements(account_id="19962eb8-00cd-44e5-8a66-a1ebaf88c2fe", plan_id="b97c2d59-80c5-49ac-b1fc-40e3a81d8daf")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.createFeePlanAgreements({
                accountID: "19962eb8-00cd-44e5-8a66-a1ebaf88c2fe",
                createFeePlanAgreement: {
                  planID: "b97c2d59-80c5-49ac-b1fc-40e3a81d8daf",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CreateFeePlanAgreement;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.FeePlanAgreementError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateFeePlanAgreementsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, FeePlanAgreementError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateFeePlanAgreementsResponse res = sdk.feePlans().createFeePlanAgreements()
                            .accountID("19962eb8-00cd-44e5-8a66-a1ebaf88c2fe")
                            .createFeePlanAgreement(CreateFeePlanAgreement.builder()
                                .planID("b97c2d59-80c5-49ac-b1fc-40e3a81d8daf")
                                .build())
                            .call();

                    if (res.feePlanAgreement().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createFeePlanAgreement = new Components\CreateFeePlanAgreement(
                planID: 'b700714f-83b3-45f6-91b3-1f9081d9e23c',
            );

            $response = $sdk->feePlans->createAgreements(
                accountID: 'a39319c8-13f2-4af4-9f8c-e0ce6779fd54',
                createFeePlanAgreement: $createFeePlanAgreement,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->feePlanAgreement !== null) {
                // handle response
            }
  /accounts/{accountID}/fee-plans:
    get:
      operationId: listFeePlans
      description: |-
        List all fee plans available for use by an account. This is intended to be used by an account when 
        selecting a fee plan to apply to a connected account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: planIDs
          in: query
          required: false
          description: A comma-separated list of plan IDs to filter the results by.
          schema:
            type: array
            items:
              type: string
              format: uuid
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_474
                    - planID
                    - name
                    - cardAcquiringModel
                    - billableFees
                    - minimumCommitment
                    - monthlyPlatformFee
                    - createdAt
                  properties: &ref_475
                    planID:
                      type: string
                      format: uuid
                    name:
                      type: string
                      description: The name of the fee plan.
                      example: Fixed Rate Merchant Plan
                    description:
                      type: string
                      description: A description of the fee plan.
                    cardAcquiringModel:
                      type: string
                      enum: *ref_88
                      description: Specifies the card processing pricing model
                    billableFees:
                      type: array
                      items:
                        type: object
                        required: *ref_89
                        properties: *ref_90
                        example: *ref_91
                      description: Additional usage-based fees for this plan.
                    minimumCommitment:
                      type: object
                      allOf: *ref_92
                      description: The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
                    monthlyPlatformFee:
                      type: object
                      allOf: *ref_93
                      description: Fixed recurring amount paid in the billing period regardless of usage.
                    createdAt:
                      type: string
                      format: date-time
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      x-speakeasy-group: feePlans
      x-speakeasy-name-override: listByAccount
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.list_fee_plans(account_id="ac8fa716-4b75-4902-b296-d734524ca45c")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.listFeePlans({
                accountID: "ac8fa716-4b75-4902-b296-d734524ca45c",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListFeePlansResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListFeePlansResponse res = sdk.feePlans().listFeePlans()
                            .accountID("ac8fa716-4b75-4902-b296-d734524ca45c")
                            .call();

                    if (res.feePlans().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->feePlans->listByAccount(
                accountID: 'cf8ce25e-dc08-408d-aec3-84d726ece8b0',
                xMoovVersion: 'v2024.01.00',
                planIDs: [
                    'b8982d80-a6fc-45af-b31d-a145a6d82699',
                ]

            );

            if ($response->feePlans !== null) {
                // handle response
            }
  /accounts/{accountID}/fees:
    get:
      operationId: retrieveFees
      description: |-
        Retrieve fees associated with an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transferID
          in: query
          required: false
          description: Optional transfer ID to filter the results by.
          schema:
            type: string
            format: uuid
          explode: false
        - name: disputeID
          in: query
          required: false
          description: Optional dispute ID to filter the results by.
          schema:
            type: string
            format: uuid
          explode: false
        - name: startDateTime
          in: query
          required: false
          description: Optional date-time to inclusively filter all fees created after this date-time.
          schema:
            type: string
            format: RFC-3339
          explode: false
        - name: endDateTime
          in: query
          required: false
          description: Optional date-time to exclusively filter all fees created before this date-time.
          schema:
            type: string
            format: RFC-3339
          explode: false
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: &ref_94
                    feeID:
                      type: string
                      format: uuid
                    accountID:
                      type: string
                      format: uuid
                    walletID:
                      type: string
                      format: uuid
                    createdOn:
                      type: string
                      format: date-time
                    feeName:
                      type: string
                    amount:
                      type: object
                      required: *ref_84
                      properties: *ref_85
                    generatedBy:
                      oneOf: &ref_489
                        - type: object
                          properties: &ref_494
                            transferID:
                              type: string
                              format: uuid
                          title: Transfer ID
                        - type: object
                          properties: &ref_492
                            CardID:
                              type: string
                              format: uuid
                          title: Card ID
                        - type: object
                          properties: &ref_493
                            DisputeID:
                              type: string
                              format: uuid
                          title: Dispute ID
                        - type: object
                          properties: &ref_490
                            AccountID:
                              type: string
                              format: uuid
                          title: Account ID
                        - type: object
                          properties: &ref_491
                            BankAccountID:
                              type: string
                              format: uuid
                          title: Bank account ID
                      description: The entity that generated the fee.
                  description: A fee incurred by a user.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      x-speakeasy-group: accounts
      x-speakeasy-name-override: getFees
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.retrieve_fees(account_id="45954656-ded3-4bbc-9ef3-d42c2b99db12", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.retrieveFees({
                accountID: "45954656-ded3-4bbc-9ef3-d42c2b99db12",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.RetrieveFeesRequest;
            import io.moov.sdk.models.operations.RetrieveFeesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RetrieveFeesRequest req = RetrieveFeesRequest.builder()
                            .accountID("45954656-ded3-4bbc-9ef3-d42c2b99db12")
                            .skip(60L)
                            .count(20L)
                            .build();

                    RetrieveFeesResponse res = sdk.feePlans().retrieveFees()
                            .request(req)
                            .call();

                    if (res.incurredFees().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\RetrieveFeesRequest(
                accountID: '0decaabd-10f1-4195-aa4d-077c6cd938c7',
                skip: 60,
                count: 20,
            );

            $response = $sdk->accounts->getFees(
                request: $request
            );

            if ($response->incurredFees !== null) {
                // handle response
            }
  /accounts/{accountID}/fees/.fetch:
    post:
      operationId: listFeesFetch
      description: |-
        List fees associated with an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: *ref_94
                  description: A fee incurred by a user.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: &ref_535
                feeIDs:
                  type: array
                  items:
                    type: string
                    format: uuid
              description: Array of fee IDs to fetch.
      x-speakeasy-group: feePlans
      x-speakeasy-name-override: fetchFees
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.list_fees_fetch(account_id="7b85e951-a6d9-4e67-a155-4d18e9d1ac58")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.listFeesFetch({
                accountID: "7b85e951-a6d9-4e67-a155-4d18e9d1ac58",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListFeesFetchResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListFeesFetchResponse res = sdk.feePlans().listFeesFetch()
                            .accountID("7b85e951-a6d9-4e67-a155-4d18e9d1ac58")
                            .call();

                    if (res.incurredFees().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $listFeesFetchRequest = new Components\ListFeesFetchRequest();

            $response = $sdk->feePlans->fetchFees(
                accountID: 'abb6dc0f-1b14-4754-8489-20b0216c093f',
                xMoovVersion: 'v2024.01.00',
                listFeesFetchRequest: $listFeesFetchRequest

            );

            if ($response->incurredFees !== null) {
                // handle response
            }
  /accounts/{accountID}/files:
    post:
      operationId: uploadFile
      description: |-
        Upload a file and link it to the specified Moov account. 

        The maximum file size is 20MB. Each account is allowed a maximum of 50 files. Acceptable file types include csv, jpg, pdf, 
        and png. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/files.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_96
                  - fileID
                  - fileName
                  - accountID
                  - filePurpose
                  - fileStatus
                  - metadata
                  - fileSizeBytes
                  - createdOn
                  - updatedOn
                properties: &ref_97
                  fileID:
                    type: string
                    format: uuid
                  fileName:
                    type: string
                    maxLength: 64
                    example: logo.png
                  accountID:
                    type: string
                    format: uuid
                  filePurpose:
                    type: string
                    enum: &ref_95
                      - business_verification
                      - representative_verification
                      - individual_verification
                      - merchant_underwriting
                      - account_requirement
                      - identity_verification
                    description: The file's purpose.
                    example: representative_verification
                  fileStatus:
                    type: string
                    enum: &ref_479
                      - pending
                      - approved
                      - rejected
                    description: The file's status.
                    example: pending
                  metadata:
                    type: string
                    format: json
                    example: '{"error_code": "document-name-mismatch", "requirement_id": "document.individual.verification", "representative_id": "c63ab175-251d-497e-a267-7346d087e180", "comment": "testing comment"'
                  decisionReason:
                    type: string
                    example: not correct file
                  fileSizeBytes:
                    type: integer
                  createdOn:
                    type: string
                    format: date-time
                  updatedOn:
                    type: string
                    format: date-time
                description: Describes a file linked to a Moov account.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_483
                  error:
                    type: string
                  file:
                    type: string
                  filePurpose:
                    type: string
                  metadata:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: &ref_480
                - file
                - filePurpose
              properties: &ref_481
                file:
                  type: string
                  format: binary
                  description: The file to be added. Valid types are `csv`, `png`, `jpeg`, `pdf`.
                filePurpose:
                  type: string
                  enum: *ref_95
                  description: The file's purpose.
                  example: representative_verification
                metadata:
                  type: string
                  format: json
                  description: |-
                    Additional metadata to be stored with the file, formatted as a JSON string.

                    Valid keys are `representative_id`, `comment`, `requirement_id`, `error_code`.
                  example: '{"requirement_id": "document.individual.verification"}'
              description: Request to upload a file for an account.
      x-speakeasy-name-override: upload
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.files.upload(account_id="6886a454-7910-4a2b-b98a-ab61ec65fc41", file={
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                }, file_purpose=components.FilePurpose.REPRESENTATIVE_VERIFICATION, metadata="{\"requirement_id\": \"document.individual.verification\"}")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";
            import { openAsBlob } from "node:fs";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.files.upload({
                accountID: "6886a454-7910-4a2b-b98a-ab61ec65fc41",
                fileUploadRequestMultiPart: {
                  file: await openAsBlob("example.file"),
                  filePurpose: "representative_verification",
                  metadata: "{\"requirement_id\": \"document.individual.verification\"}",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.FileValidationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UploadFileResponse;
            import java.lang.Exception;
            import java.nio.charset.StandardCharsets;

            public class Application {

                public static void main(String[] args) throws GenericError, FileValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UploadFileResponse res = sdk.files().upload()
                            .accountID("10a2b98a-ab61-4ec6-a5fc-41d969747bc6")
                            .fileUploadRequestMultiPart(FileUploadRequestMultiPart.builder()
                                .file(FileUploadRequestMultiPartFile.builder()
                                    .fileName("example.file")
                                    .content("0x8cc9e675ad".getBytes(StandardCharsets.UTF_8))
                                    .build())
                                .filePurpose(FilePurpose.REPRESENTATIVE_VERIFICATION)
                                .metadata("{\"requirement_id\": \"document.individual.verification\"}")
                                .build())
                            .call();

                    if (res.fileDetails().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $fileUploadRequestMultiPart = new Components\FileUploadRequestMultiPart(
                file: new Components\FileUploadRequestMultiPartFile(
                    fileName: 'example.file',
                    content: '0x8cc9e675ad',
                ),
                filePurpose: Components\FilePurpose::RepresentativeVerification,
                metadata: '{"requirement_id": "document.individual.verification"}',
            );

            $response = $sdk->files->upload(
                accountID: '10a2b98a-ab61-4ec6-a5fc-41d969747bc6',
                fileUploadRequestMultiPart: $fileUploadRequestMultiPart,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->fileDetails !== null) {
                // handle response
            }
    get:
      operationId: listFiles
      description: |-
        List all the files associated with a particular Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/files.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_96
                  properties: *ref_97
                  description: Describes a file linked to a Moov account.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Files
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.files.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.files.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListFilesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListFilesResponse res = sdk.files().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.fileDetails().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->files->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->fileDetails !== null) {
                // handle response
            }
  /accounts/{accountID}/files/{fileID}:
    get:
      operationId: getFileDetails
      description: |-
        Retrieve file details associated with a specific Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/files.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fileID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_96
                properties: *ref_97
                description: Describes a file linked to a Moov account.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Files
      x-speakeasy-name-override: getFile
      x-speakeasy-group: accounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.files.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", file_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.files.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                fileID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetFileDetailsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetFileDetailsResponse res = sdk.files().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .fileID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.fileDetails().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->getFile(
                accountID: 'de0cfdf8-f2d9-4823-8be3-9bfe69951a5e',
                fileID: '583f23ee-4011-416a-ac8d-e1fa535076a2',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->fileDetails !== null) {
                // handle response
            }
  /accounts/{accountID}/merchant-agreement:
    get:
      operationId: getMerchantProcessingAgreement
      description: |-
        Retrieve a merchant account's processing agreement.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request has succeeded.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-speakeasy-name-override: getMerchantAgreement
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.get_merchant_processing_agreement(account_id="d2cfd0d3-6efb-4bc4-a193-53f35dd0d912")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.getMerchantProcessingAgreement({
                accountID: "d2cfd0d3-6efb-4bc4-a193-53f35dd0d912",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetMerchantProcessingAgreementResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetMerchantProcessingAgreementResponse res = sdk.accounts().getMerchantProcessingAgreement()
                            .accountID("d2cfd0d3-6efb-4bc4-a193-53f35dd0d912")
                            .call();

                    if (res.responseStream().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->getMerchantAgreement(
                accountID: '48c68ab0-911b-4dc0-ad0f-e0334e432d1e',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bytes !== null) {
                // handle response
            }
  /accounts/{accountID}/partner-pricing:
    get:
      operationId: listPartnerPricing
      description: |-
        List all partner pricing plans available for use by an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: planIDs
          in: query
          required: false
          description: A comma-separated list of plan IDs to filter the results by.
          schema:
            type: array
            items:
              type: string
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_556
                    - planID
                    - name
                    - revenueShare
                    - cardAcquiringModel
                    - billableFees
                    - minimumCommitment
                    - monthlyPlatformFee
                    - createdAt
                  properties: &ref_557
                    planID:
                      type: string
                      format: uuid
                    name:
                      type: string
                      description: The name of the fee plan.
                      example: Fixed Rate Merchant Plan
                    description:
                      type: string
                      description: A description of the fee plan.
                    revenueShare:
                      type: integer
                      description: The integer percentage value of the revenue split for partner.
                      example: 10
                    cardAcquiringModel:
                      type: string
                      enum: *ref_88
                      description: Specifies the card processing pricing model
                    billableFees:
                      type: array
                      items:
                        type: object
                        required: *ref_89
                        properties: *ref_90
                        example: *ref_91
                    minimumCommitment:
                      type: object
                      allOf: *ref_92
                      description: The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
                    monthlyPlatformFee:
                      type: object
                      allOf: *ref_93
                      description: Fixed recurring amount paid in the billing period regardless of usage.
                    createdAt:
                      type: string
                      format: date-time
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      x-speakeasy-group: feePlans
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.list_partner_pricing(account_id="85f15b07-5c44-4302-ab6f-d22f8d45b7f4")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.listPartnerPricing({
                accountID: "85f15b07-5c44-4302-ab6f-d22f8d45b7f4",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListPartnerPricingResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListPartnerPricingResponse res = sdk.feePlans().listPartnerPricing()
                            .accountID("85f15b07-5c44-4302-ab6f-d22f8d45b7f4")
                            .call();

                    if (res.partnerPricings().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->feePlans->listPartnerPricing(
                accountID: '85f15b07-5c44-4302-ab6f-d22f8d45b7f4',
                xMoovVersion: 'v2024.01.00',
                planIDs: [
                    '<value>',
                ]

            );

            if ($response->partnerPricings !== null) {
                // handle response
            }
  /accounts/{accountID}/partner-pricing-agreements:
    get:
      operationId: listPartnerPricingAgreements
      description: |-
        List all partner pricing agreements associated with an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: agreementID
          in: query
          required: false
          description: A comma-separated list of agreement IDs to filter the results by.
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: status
          in: query
          required: false
          description: A comma-separated list of statuses to filter the results by.
          schema:
            type: array
            items:
              type: string
              enum: *ref_83
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_558
                    - revenueShare
                  properties: &ref_559
                    revenueShare:
                      type: integer
                      description: The integer percentage value of the revenue split for partner.
                      example: 10
                  allOf: &ref_560
                    - type: object
                      required: *ref_86
                      properties: *ref_87
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Fee plans
      x-speakeasy-group: feePlans
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.fee_plans.list_partner_pricing_agreements(account_id="9366921a-25de-4c52-8ec6-4cd4ef557223", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.feePlans.listPartnerPricingAgreements({
                skip: 60,
                count: 20,
                accountID: "9366921a-25de-4c52-8ec6-4cd4ef557223",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListPartnerPricingAgreementsRequest;
            import io.moov.sdk.models.operations.ListPartnerPricingAgreementsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListPartnerPricingAgreementsRequest req = ListPartnerPricingAgreementsRequest.builder()
                            .accountID("9366921a-25de-4c52-8ec6-4cd4ef557223")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListPartnerPricingAgreementsResponse res = sdk.feePlans().listPartnerPricingAgreements()
                            .request(req)
                            .call();

                    if (res.partnerPricingAgreements().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListPartnerPricingAgreementsRequest(
                skip: 60,
                count: 20,
                accountID: '9366921a-25de-4c52-8ec6-4cd4ef557223',
            );

            $response = $sdk->feePlans->listPartnerPricingAgreements(
                request: $request
            );

            if ($response->partnerPricingAgreements !== null) {
                // handle response
            }
  /accounts/{accountID}/payment-links:
    post:
      operationId: createPaymentLink
      description: |-
        Create a payment link that allows an end user to make a payment on Moov's hosted payment link page.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_107
                  - code
                  - mode
                  - status
                  - partnerAccountID
                  - merchantAccountID
                  - merchantPaymentMethodID
                  - link
                  - amount
                  - uses
                  - display
                  - customer
                  - createdOn
                  - updatedOn
                properties: &ref_108
                  code:
                    type: string
                    description: Unique code identifying this payment link.
                    example: uc7ZYKrMhi
                  mode:
                    type: string
                    enum: *ref_16
                    description: The operating mode for an account.
                    example: production
                  status:
                    type: string
                    enum: &ref_572
                      - active
                      - used
                      - disabled
                      - expired
                  partnerAccountID:
                    type: string
                    format: uuid
                    description: The partner's Moov account ID.
                  merchantAccountID:
                    type: string
                    format: uuid
                    description: The merchant's Moov account ID.
                  merchantPaymentMethodID:
                    type: string
                    format: uuid
                    description: The merchant's preferred payment method ID. Must be a wallet payment method.
                  link:
                    type: string
                    format: uri
                    description: Link to the payment landing page for this payment link.
                  amount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  uses:
                    type: integer
                    format: int64
                    description: The number of times this payment link has been used.
                  maxUses:
                    type: integer
                    format: int64
                    description: |-
                      An optional limit on the number of times this payment link can be used. 

                      **For payouts, `maxUses` is always 1.**
                  lastUsedOn:
                    type: string
                    format: date-time
                    description: The timestamp when this payment link was last used.
                  expiresOn:
                    type: string
                    format: date-time
                    description: An optional expiration date for this payment link.
                  display:
                    type: object
                    required: &ref_100
                      - title
                      - description
                      - callToAction
                    properties: &ref_101
                      title:
                        type: string
                        description: The payment page title displayed to the user.
                      description:
                        type: string
                        description: A payment description displayed to the user.
                      callToAction:
                        type: string
                        enum: &ref_114
                          - pay
                          - book
                          - subscribe
                          - donate
                          - confirm
                          - auto
                        description: |-
                          The text to be displayed on web form's submit button.

                          If set to "auto" the UI will automatically select between 
                          "pay" and "confirm" for payments and payouts respectively.
                    description: Customizable display options for a payment link.
                  customer:
                    type: object
                    properties: &ref_102
                      requireAddress:
                        type: boolean
                        description: If true, a billing address is required when completing the payment form.
                      requirePhone:
                        type: boolean
                        description: If true, a phone number is required when completing the payment form.
                      metadata:
                        type: object
                        additionalProperties:
                          type: string
                        description: Optional free-form metadata for the Moov account that will represent this customer.
                  payment:
                    type: object
                    required: &ref_103
                      - allowedMethods
                    properties: &ref_104
                      allowedMethods:
                        type: array
                        items:
                          type: string
                          enum: &ref_115
                            - apple-pay
                            - card-payment
                            - ach-debit-collect
                          description: Payment methods allowed for collecting a payment.
                        minItems: 1
                        description: A list of payment methods that should be supported for this payment link.
                      cardDetails:
                        type: object
                        properties: &ref_116
                          dynamicDescriptor:
                            type: string
                            minLength: 4
                            maxLength: 22
                            description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
                            example: WhlBdy *Yoga 11-12
                        description: Options for payment links used to collect a card payment.
                      achDetails:
                        type: object
                        properties: &ref_117
                          companyEntryDescription:
                            type: string
                            minLength: 4
                            maxLength: 10
                            description: An optional override of the default NACHA company entry description for a transfer.
                            example: Gym dues
                          originatingCompanyName:
                            type: string
                            minLength: 4
                            maxLength: 16
                            description: An optional override of the default NACHA company name for a transfer.
                            example: Whole Body Fit
                        description: Options for payment links used to collect an ACH payment.
                    description: Options for payment links used to collect payment.
                  payout:
                    type: object
                    required: &ref_105
                      - allowedMethods
                      - recipient
                    properties: &ref_106
                      allowedMethods:
                        type: array
                        items:
                          type: string
                          enum: &ref_118
                            - push-to-card
                            - rtp-credit
                            - ach-credit-same-day
                            - ach-credit-standard
                          description: Payment methods allowed for disbursing funds.
                        minItems: 1
                        description: A list of payment methods that should be supported for this payment link.
                      recipient:
                        type: object
                        required: &ref_573
                          - email
                        properties: &ref_574
                          email:
                            type: string
                            maxLength: 255
                            format: email
                            example: jordan.lee@classbooker.dev
                        description: |-
                          Specify the intended recipient of the payout.

                          This information will be used to authenticate the end user when they follow the payment link.
                  createdOn:
                    type: string
                    format: date-time
                  updatedOn:
                    type: string
                    format: date-time
                  disabledOn:
                    type: string
                    format: date-time
                example: &ref_109
                  code: 3QLHtONjd5
                  mode: sandbox
                  status: active
                  partnerAccountID: d290f1ee-6c54-4b01-90e6-d701748f0851
                  merchantAccountID: 34233b72-780c-4e0e-8b08-cbbe1bc878f8
                  merchantPaymentMethodID: 4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e
                  link: https://moov.money/3QLHtONjd5
                  amount:
                    currency: USD
                    value: 10000
                  uses: 0
                  display:
                    title: Example Payment Link
                    description: This is an example payment link.
                    callToAction: pay
                  customer:
                    requirePhone: true
                  payment:
                    allowedMethods:
                      - card-payment
                      - ach-debit-collect
                  updatedOn: '2025-01-09T17:09:13.33Z'
                  createdOn: '2025-01-09T17:09:13.33Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_419
                  partnerAccountID:
                    type: string
                  merchantPaymentMethodID:
                    type: string
                  amount:
                    type: object
                    properties: &ref_110
                      currency:
                        type: string
                      value:
                        type: string
                  maxUses:
                    type: string
                  expiresOn:
                    type: string
                  display:
                    type: object
                    properties: &ref_111
                      title:
                        type: string
                      description:
                        type: string
                      callToAction:
                        type: string
                  payment:
                    type: object
                    properties: &ref_112
                      allowedMethods:
                        type: string
                      cardDetails:
                        type: object
                        properties: &ref_379
                          dynamicDescriptor:
                            type: string
                      achDetails:
                        type: object
                        properties: &ref_319
                          companyEntryDescription:
                            type: string
                          originatingCompanyName:
                            type: string
                  payout:
                    type: object
                    properties: &ref_113
                      allowedMethods:
                        type: string
                      recipient:
                        type: object
                        properties: &ref_575
                          email:
                            type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_416
                - partnerAccountID
                - merchantPaymentMethodID
                - amount
                - display
              properties: &ref_417
                partnerAccountID:
                  type: string
                  format: uuid
                  description: The partner's Moov account ID.
                merchantPaymentMethodID:
                  type: string
                  format: uuid
                  description: The merchant's preferred payment method ID. Must be a wallet payment method.
                amount:
                  type: object
                  required: *ref_98
                  properties: *ref_99
                maxUses:
                  type: integer
                  format: int64
                  description: |-
                    An optional limit on the number of times this payment link can be used. 

                    **For payouts, `maxUses` is always 1.**
                expiresOn:
                  type: string
                  format: date-time
                  description: An optional expiration date for this payment link.
                display:
                  type: object
                  required: *ref_100
                  properties: *ref_101
                  description: Customizable display options for a payment link.
                customer:
                  type: object
                  properties: *ref_102
                payment:
                  type: object
                  required: *ref_103
                  properties: *ref_104
                  description: Options for payment links used to collect payment.
                payout:
                  type: object
                  required: *ref_105
                  properties: *ref_106
              description: |-
                Request to create a new payment link.

                A payment link must include either `payment` or `payout` details, but not both. For payout payment links,
                `maxUses` will automatically be set to 1, as these are intended for a one-time disbursement
                to a specific recipient.

                **Note:** The `payout` option is currently under development and is not yet available for general use.
              example: &ref_418
                partnerAccountID: d290f1ee-6c54-4b01-90e6-d701748f0851
                merchantPaymentMethodID: 4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e
                amount:
                  currency: USD
                  value: 10000
                display:
                  title: Example Payment Link
                  description: This is an example payment link.
                  callToAction: pay
                customer:
                  requirePhone: true
                payment:
                  allowedMethods:
                    - card-payment
                    - ach-debit-collect
      x-speakeasy-name-override: create
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.create(account_id="621cf021-cd9c-4f54-a033-15211a509a30", partner_account_id="d290f1ee-6c54-4b01-90e6-d701748f0851", merchant_payment_method_id="4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e", amount={
                    "currency": "USD",
                    "value": 1204,
                }, display={
                    "title": "Example Payment Link",
                    "description": "This is an example payment link.",
                    "call_to_action": components.CallToAction.PAY,
                }, customer={
                    "require_phone": True,
                }, payment={
                    "allowed_methods": [
                        components.CollectionPaymentMethodType.CARD_PAYMENT,
                        components.CollectionPaymentMethodType.ACH_DEBIT_COLLECT,
                    ],
                    "card_details": {
                        "dynamic_descriptor": "WhlBdy *Yoga 11-12",
                    },
                    "ach_details": {
                        "company_entry_description": "Gym dues",
                        "originating_company_name": "Whole Body Fit",
                    },
                }, payout={
                    "allowed_methods": [
                        components.DisbursementPaymentMethodType.ACH_CREDIT_SAME_DAY,
                    ],
                    "recipient": {
                        "email": "jordan.lee@classbooker.dev",
                    },
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.create({
                accountID: "621cf021-cd9c-4f54-a033-15211a509a30",
                createPaymentLink: {
                  partnerAccountID: "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  merchantPaymentMethodID: "4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e",
                  amount: {
                    currency: "USD",
                    value: 1204,
                  },
                  display: {
                    title: "Example Payment Link",
                    description: "This is an example payment link.",
                    callToAction: "pay",
                  },
                  customer: {
                    requirePhone: true,
                  },
                  payment: {
                    allowedMethods: [
                      "card-payment",
                      "ach-debit-collect",
                    ],
                    cardDetails: {
                      dynamicDescriptor: "WhlBdy *Yoga 11-12",
                    },
                    achDetails: {
                      companyEntryDescription: "Gym dues",
                      originatingCompanyName: "Whole Body Fit",
                    },
                  },
                  payout: {
                    allowedMethods: [
                      "ach-credit-same-day",
                    ],
                    recipient: {
                      email: "jordan.lee@classbooker.dev",
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.CreatePaymentLinkError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreatePaymentLinkResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, CreatePaymentLinkError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreatePaymentLinkResponse res = sdk.paymentLinks().create()
                            .accountID("621cf021-cd9c-4f54-a033-15211a509a30")
                            .createPaymentLink(CreatePaymentLink.builder()
                                .partnerAccountID("d290f1ee-6c54-4b01-90e6-d701748f0851")
                                .merchantPaymentMethodID("4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e")
                                .amount(Amount.builder()
                                    .currency("USD")
                                    .value(1204L)
                                    .build())
                                .display(PaymentLinkDisplayOptions.builder()
                                    .title("Example Payment Link")
                                    .description("This is an example payment link.")
                                    .callToAction(CallToAction.PAY)
                                    .build())
                                .customer(PaymentLinkCustomerOptions.builder()
                                    .requirePhone(true)
                                    .build())
                                .payment(PaymentLinkPaymentDetails.builder()
                                    .allowedMethods(List.of(
                                        CollectionPaymentMethodType.CARD_PAYMENT,
                                        CollectionPaymentMethodType.ACH_DEBIT_COLLECT))
                                    .cardDetails(CardPaymentDetails.builder()
                                        .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                        .build())
                                    .achDetails(ACHPaymentDetails.builder()
                                        .companyEntryDescription("Gym dues")
                                        .originatingCompanyName("Whole Body Fit")
                                        .build())
                                    .build())
                                .payout(PaymentLinkPayoutDetails.builder()
                                    .allowedMethods(List.of(
                                        DisbursementPaymentMethodType.ACH_CREDIT_SAME_DAY))
                                    .recipient(PayoutRecipient.builder()
                                        .email("jordan.lee@classbooker.dev")
                                        .build())
                                    .build())
                                .build())
                            .call();

                    if (res.paymentLink().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createPaymentLink = new Components\CreatePaymentLink(
                partnerAccountID: 'd290f1ee-6c54-4b01-90e6-d701748f0851',
                merchantPaymentMethodID: '4c4e7f8e-81f4-4f3d-8f6f-6f6e7f8e4c4e',
                amount: new Components\Amount(
                    currency: 'USD',
                    value: 10000,
                ),
                display: new Components\PaymentLinkDisplayOptions(
                    title: 'Example Payment Link',
                    description: 'This is an example payment link.',
                    callToAction: Components\CallToAction::Pay,
                ),
                customer: new Components\PaymentLinkCustomerOptions(
                    requirePhone: true,
                ),
                payment: new Components\PaymentLinkPaymentDetails(
                    allowedMethods: [
                        Components\CollectionPaymentMethodType::CardPayment,
                        Components\CollectionPaymentMethodType::AchDebitCollect,
                    ],
                ),
            );

            $response = $sdk->paymentLinks->create(
                accountID: '7a621cf0-21cd-49cf-8540-3315211a509a',
                createPaymentLink: $createPaymentLink,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->paymentLink !== null) {
                // handle response
            }
    get:
      operationId: listPaymentLinks
      description: |-
        List all the payment links created under a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_107
                  properties: *ref_108
                  example: *ref_109
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      x-speakeasy-name-override: list
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListPaymentLinksResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListPaymentLinksResponse res = sdk.paymentLinks().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.paymentLinks().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentLinks->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->paymentLinks !== null) {
                // handle response
            }
  /accounts/{accountID}/payment-links/{paymentLinkCode}:
    get:
      operationId: getPaymentLink
      description: |-
        Retrieve a payment link by code.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentLinkCode
          in: path
          required: true
          schema:
            type: string
            description: Unique code identifying this payment link.
            example: uc7ZYKrMhi
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_107
                properties: *ref_108
                example: *ref_109
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      x-speakeasy-name-override: get
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", payment_link_code="uc7ZYKrMhi")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                paymentLinkCode: "uc7ZYKrMhi",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetPaymentLinkResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetPaymentLinkResponse res = sdk.paymentLinks().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .paymentLinkCode("uc7ZYKrMhi")
                            .call();

                    if (res.paymentLink().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentLinks->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                paymentLinkCode: 'uc7ZYKrMhi',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->paymentLink !== null) {
                // handle response
            }
    patch:
      operationId: updatePaymentLink
      description: |-
        Update a payment link.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentLinkCode
          in: path
          required: true
          schema:
            type: string
            description: Unique code identifying this payment link.
            example: uc7ZYKrMhi
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_107
                properties: *ref_108
                example: *ref_109
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_662
                  amount:
                    type: object
                    properties: *ref_110
                  expiresOn:
                    type: string
                  display:
                    type: object
                    properties: *ref_111
                  payment:
                    type: object
                    properties: *ref_112
                  payout:
                    type: object
                    properties: *ref_113
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_660
                amount:
                  type: object
                  properties: &ref_346
                    currency:
                      type: string
                      pattern: ^[A-Za-z]{3}$
                      description: A 3-letter ISO 4217 currency code.
                      example: USD
                    value:
                      type: integer
                      format: int64
                      description: |-
                        Quantity in the smallest unit of the specified currency. 

                        In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                      example: 1204
                expiresOn:
                  type: string
                  format: date-time
                  nullable: true
                display:
                  type: object
                  properties: &ref_569
                    title:
                      type: string
                      description: The payment page title displayed to the user.
                    description:
                      type: string
                      description: A payment description displayed to the user.
                    callToAction:
                      type: string
                      enum: *ref_114
                      description: |-
                        The text to be displayed on web form's submit button.

                        If set to "auto" the UI will automatically select between 
                        "pay" and "confirm" for payments and payouts respectively.
                  description: Customizable display options for a payment link.
                customer:
                  type: object
                  properties: *ref_102
                payment:
                  type: object
                  properties: &ref_570
                    allowedMethods:
                      type: array
                      items:
                        type: string
                        enum: *ref_115
                        description: Payment methods allowed for collecting a payment.
                      minItems: 1
                      description: A list of payment methods that should be supported for this payment link.
                    cardDetails:
                      type: object
                      properties: *ref_116
                      description: Options for payment links used to collect a card payment.
                    achDetails:
                      type: object
                      properties: *ref_117
                      description: Options for payment links used to collect an ACH payment.
                  description: Options for payment links used to collect payment.
                payout:
                  type: object
                  properties: &ref_571
                    allowedMethods:
                      type: array
                      items:
                        type: string
                        enum: *ref_118
                        description: Payment methods allowed for disbursing funds.
                      minItems: 1
                      description: A list of payment methods that should be supported for this payment link.
                    recipient:
                      type: object
                      properties: &ref_576
                        email:
                          type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                      description: |-
                        Specify the intended recipient of the payout.

                        This information will be used to authenticate the end user when they follow the payment link.
              example: &ref_661
                amount:
                  currency: USD
                  value: 12099
                customer:
                  requirePhone: true
                  requireAddress: true
      x-speakeasy-name-override: update
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.update(account_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd", payment_link_code="uc7ZYKrMhi", amount={
                    "currency": "USD",
                    "value": 1204,
                }, customer={
                    "require_address": True,
                    "require_phone": True,
                }, payment={
                    "card_details": {
                        "dynamic_descriptor": "WhlBdy *Yoga 11-12",
                    },
                    "ach_details": {
                        "company_entry_description": "Gym dues",
                        "originating_company_name": "Whole Body Fit",
                    },
                }, payout={
                    "recipient": {
                        "email": "jordan.lee@classbooker.dev",
                    },
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.update({
                accountID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                paymentLinkCode: "uc7ZYKrMhi",
                updatePaymentLink: {
                  amount: {
                    currency: "USD",
                    value: 1204,
                  },
                  customer: {
                    requireAddress: true,
                    requirePhone: true,
                  },
                  payment: {
                    cardDetails: {
                      dynamicDescriptor: "WhlBdy *Yoga 11-12",
                    },
                    achDetails: {
                      companyEntryDescription: "Gym dues",
                      originatingCompanyName: "Whole Body Fit",
                    },
                  },
                  payout: {
                    recipient: {
                      email: "jordan.lee@classbooker.dev",
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.UpdatePaymentLinkError;
            import io.moov.sdk.models.operations.UpdatePaymentLinkResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, UpdatePaymentLinkError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdatePaymentLinkResponse res = sdk.paymentLinks().update()
                            .accountID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .paymentLinkCode("uc7ZYKrMhi")
                            .updatePaymentLink(UpdatePaymentLink.builder()
                                .amount(AmountUpdate.builder()
                                    .currency("USD")
                                    .value(1204L)
                                    .build())
                                .customer(PaymentLinkCustomerOptions.builder()
                                    .requireAddress(true)
                                    .requirePhone(true)
                                    .build())
                                .payment(PaymentLinkPaymentDetailsUpdate.builder()
                                    .cardDetails(CardPaymentDetails.builder()
                                        .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                        .build())
                                    .achDetails(ACHPaymentDetails.builder()
                                        .companyEntryDescription("Gym dues")
                                        .originatingCompanyName("Whole Body Fit")
                                        .build())
                                    .build())
                                .payout(PaymentLinkPayoutDetailsUpdate.builder()
                                    .recipient(PayoutRecipientUpdate.builder()
                                        .email("jordan.lee@classbooker.dev")
                                        .build())
                                    .build())
                                .build())
                            .call();

                    if (res.paymentLink().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updatePaymentLink = new Components\UpdatePaymentLink(
                amount: new Components\AmountUpdate(
                    currency: 'USD',
                    value: 12099,
                ),
                customer: new Components\PaymentLinkCustomerOptions(
                    requireAddress: true,
                    requirePhone: true,
                ),
            );

            $response = $sdk->paymentLinks->update(
                accountID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                paymentLinkCode: 'uc7ZYKrMhi',
                updatePaymentLink: $updatePaymentLink,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->paymentLink !== null) {
                // handle response
            }
    delete:
      operationId: disablePaymentLink
      description: |-
        Disable a payment link.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentLinkCode
          in: path
          required: true
          schema:
            type: string
            description: Unique code identifying this payment link.
            example: uc7ZYKrMhi
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      x-speakeasy-name-override: disable
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.disable(account_id="cd7cd1ce-90cc-444b-ac3e-badb79be277f", payment_link_code="uc7ZYKrMhi")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.disable({
                accountID: "cd7cd1ce-90cc-444b-ac3e-badb79be277f",
                paymentLinkCode: "uc7ZYKrMhi",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.DisablePaymentLinkResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DisablePaymentLinkResponse res = sdk.paymentLinks().disable()
                            .accountID("cd7cd1ce-90cc-444b-ac3e-badb79be277f")
                            .paymentLinkCode("uc7ZYKrMhi")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentLinks->disable(
                accountID: 'cd7cd1ce-90cc-444b-ac3e-badb79be277f',
                paymentLinkCode: 'uc7ZYKrMhi',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/payment-links/{paymentLinkCode}/qrcode:
    get:
      operationId: getPaymentLinkQRCode
      description: |-
        Retrieve the payment link encoded in a QR code. 

        Use the `Accept` header to specify the format of the response. Supported formats are `application/json` and `image/png`.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentLinkCode
          in: path
          required: true
          schema:
            type: string
            description: Unique code identifying this payment link.
            example: uc7ZYKrMhi
      responses:
        '200':
          description: The request has succeeded.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_590
                  - qrCode
                properties: &ref_591
                  qrCode:
                    type: string
                    description: A base64-encoded PNG image of the QR code.
                    example: iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAIAAADaA7F0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAA...
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment links
      x-speakeasy-name-override: getQrCode
      x-speakeasy-group: paymentLinks
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_links.get_qr_code(account_id="2014a1ff-9924-40b3-ac01-f4ed64dac1b8", payment_link_code="uc7ZYKrMhi")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentLinks.getQRCode({
                accountID: "2014a1ff-9924-40b3-ac01-f4ed64dac1b8",
                paymentLinkCode: "uc7ZYKrMhi",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetPaymentLinkQRCodeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetPaymentLinkQRCodeResponse res = sdk.paymentLinks().getQRCode()
                            .accountID("2014a1ff-9924-40b3-ac01-f4ed64dac1b8")
                            .paymentLinkCode("uc7ZYKrMhi")
                            .call();

                    if (res.qrCode().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentLinks->getQrCode(
                accountID: '81ff0cd8-0d23-46b4-871b-9cb5d26e826a',
                paymentLinkCode: 'uc7ZYKrMhi',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->qrCode !== null) {
                // handle response
            }
  /accounts/{accountID}/payment-methods:
    get:
      operationId: listPaymentMethods
      description: |-
        Retrieve a list of payment methods associated with a Moov account. Read our [payment methods 
        guide](https://docs.moov.io/guides/money-movement/payment-methods/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/payment-methods.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sourceID
          in: query
          required: false
          description: |-
            Optional parameter to filter the account's payment methods by source ID. 

            A source ID can be a [walletID](https://docs.moov.io/api/sources/wallets/list/), [cardID](https://docs.moov.io/api/sources/cards/list/), 
            or [bankAccountID](https://docs.moov.io/api/sources/bank-accounts/list/).
          schema:
            type: string
            format: uuid
          explode: false
        - name: paymentMethodType
          in: query
          required: false
          description: Optional parameter to filter the account's payment methods by payment method type.
          schema:
            type: string
            enum: *ref_33
            description: The payment method type that represents a payment rail and directionality
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf: &ref_133
                    - type: object
                      required: &ref_545
                        - paymentMethodID
                        - paymentMethodType
                        - wallet
                      properties: &ref_546
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - moov-wallet
                        wallet:
                          type: object
                          required: &ref_165
                            - walletID
                          properties: &ref_166
                            walletID:
                              type: string
                              format: uuid
                      title: Moov wallet
                    - type: object
                      required: &ref_336
                        - paymentMethodID
                        - paymentMethodType
                        - bankAccount
                      properties: &ref_337
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - ach-debit-fund
                        bankAccount:
                          type: object
                          required: &ref_120
                            - bankAccountID
                            - fingerprint
                            - status
                            - holderName
                            - holderType
                            - bankName
                            - bankAccountType
                            - routingNumber
                            - lastFourAccountNumber
                            - updatedOn
                          properties: &ref_121
                            bankAccountID:
                              type: string
                              format: uuid
                            fingerprint:
                              type: string
                              maxLength: 100
                              description: |-
                                Once the bank account is linked, we don't reveal the full bank account number. 

                                The fingerprint acts as a way to identify whether two linked bank accounts are the same.
                            status:
                              type: string
                              enum: *ref_119
                            holderName:
                              type: string
                            holderType:
                              type: string
                              enum: *ref_34
                              description: The type of holder on a funding source.
                            bankName:
                              type: string
                            bankAccountType:
                              type: string
                              enum: *ref_35
                              description: The bank account type.
                            routingNumber:
                              type: string
                            lastFourAccountNumber:
                              type: string
                            updatedOn:
                              type: string
                              format: date-time
                          description: A bank account as contained within a payment method.
                      title: ACH debit fund
                    - type: object
                      required: &ref_334
                        - paymentMethodID
                        - paymentMethodType
                        - bankAccount
                      properties: &ref_335
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - ach-debit-collect
                        bankAccount:
                          type: object
                          required: *ref_120
                          properties: *ref_121
                          description: A bank account as contained within a payment method.
                      title: ACH debit collect
                    - type: object
                      required: &ref_332
                        - paymentMethodID
                        - paymentMethodType
                        - bankAccount
                      properties: &ref_333
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - ach-credit-standard
                        bankAccount:
                          type: object
                          required: *ref_120
                          properties: *ref_121
                          description: A bank account as contained within a payment method.
                      title: ACH credit standard
                    - type: object
                      required: &ref_330
                        - paymentMethodID
                        - paymentMethodType
                        - bankAccount
                      properties: &ref_331
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - ach-credit-same-day
                        bankAccount:
                          type: object
                          required: *ref_120
                          properties: *ref_121
                          description: A bank account as contained within a payment method.
                      title: ACH credit same day
                    - type: object
                      required: &ref_624
                        - paymentMethodID
                        - paymentMethodType
                        - bankAccount
                      properties: &ref_625
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - rtp-credit
                        bankAccount:
                          type: object
                          required: *ref_120
                          properties: *ref_121
                          description: A bank account as contained within a payment method.
                      title: RTP credit
                    - type: object
                      required: &ref_380
                        - paymentMethodID
                        - paymentMethodType
                        - card
                      properties: &ref_381
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - card-payment
                        card:
                          type: object
                          required: &ref_129
                            - cardID
                            - fingerprint
                            - brand
                            - cardType
                            - lastFourCardNumber
                            - bin
                            - expiration
                            - billingAddress
                            - cardVerification
                          properties: &ref_130
                            cardID:
                              type: string
                              format: uuid
                              description: ID of the card.
                              example: 01234567-89ab-cdef-0123-456789abcdef
                            fingerprint:
                              type: string
                              maxLength: 100
                              description: |-
                                Uniquely identifies a linked payment card or token.
                                For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
                                This field can be used to identify specific payment methods across multiple accounts on your platform.
                              example: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                            brand:
                              type: string
                              enum: *ref_57
                              description: The card brand.
                              example: Visa
                            cardType:
                              type: string
                              enum: *ref_58
                              description: The type of the card.
                              example: credit
                            lastFourCardNumber:
                              type: string
                              minLength: 4
                              maxLength: 4
                              description: Last four digits of the card number
                            bin:
                              type: string
                              minLength: 6
                              maxLength: 8
                              description: The first six to eight digits of the card number, which identifies the financial institution that issued the card.
                            expiration:
                              type: object
                              required: *ref_59
                              properties: *ref_60
                              description: The expiration date of the card or token.
                              example: *ref_61
                            holderName:
                              type: string
                              description: The name of the cardholder as it appears on the card.
                            billingAddress:
                              type: object
                              required: *ref_65
                              properties: *ref_66
                              example: *ref_67
                            cardVerification:
                              type: object
                              required: *ref_122
                              properties: *ref_123
                              description: The results of submitting cardholder data to a card network for verification.
                              example: *ref_124
                            issuer:
                              type: string
                              description: Financial institution that issued the card.
                            issuerCountry:
                              type: string
                              description: Country where the card was issued.
                            cardOnFile:
                              type: boolean
                              description: Indicates cardholder has authorized card to be stored for future payments.
                            merchantAccountID:
                              type: string
                              format: uuid
                            cardAccountUpdater:
                              type: object
                              properties: *ref_125
                              description: The results of the most recent card update request.
                              example: *ref_126
                            domesticPushToCard:
                              type: string
                              enum: *ref_127
                              description: Indicates which level of domestic push-to-card transfer is supported by the card, if any.
                              example: standard
                            domesticPullFromCard:
                              type: string
                              enum: *ref_128
                              description: Indicates if the card supports domestic pull-from-card transfer.
                              example: supported
                          description: A card as contained within a payment method.
                      title: Card payment
                    - type: object
                      required: &ref_588
                        - paymentMethodID
                        - paymentMethodType
                        - card
                      properties: &ref_589
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - push-to-card
                        card:
                          type: object
                          required: *ref_129
                          properties: *ref_130
                          description: A card as contained within a payment method.
                      title: Push to card
                    - type: object
                      required: &ref_586
                        - paymentMethodID
                        - paymentMethodType
                        - card
                      properties: &ref_587
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - pull-from-card
                        card:
                          type: object
                          required: *ref_129
                          properties: *ref_130
                          description: A card as contained within a payment method.
                      title: Pull from card
                    - type: object
                      required: &ref_350
                        - paymentMethodID
                        - paymentMethodType
                        - applePay
                      properties: &ref_351
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - apple-pay
                        applePay:
                          type: object
                          required: *ref_131
                          properties: *ref_132
                          description: Describes an Apple Pay token on a Moov account.
                      title: Apple Pay
                    - type: object
                      required: &ref_383
                        - paymentMethodID
                        - paymentMethodType
                      properties: &ref_384
                        paymentMethodID:
                          type: string
                          format: uuid
                          description: ID of the payment method.
                        paymentMethodType:
                          type: string
                          enum:
                            - card-present-payment
                        terminalCard:
                          type: object
                          properties: &ref_167
                            entryMode:
                              type: string
                              enum: &ref_465
                                - contactless
                              description: How the card information was entered into the point of sale terminal.
                              example: contactless
                            brand:
                              type: string
                              enum: *ref_57
                              description: The card brand.
                              example: Visa
                            bin:
                              type: string
                              minLength: 6
                              maxLength: 8
                            cardType:
                              type: string
                              enum: *ref_58
                              description: The type of the card.
                              example: credit
                            expiration:
                              type: object
                              required: *ref_59
                              properties: *ref_60
                              description: The expiration date of the card or token.
                              example: *ref_61
                            fingerprint:
                              type: string
                              maxLength: 100
                              description: |-
                                Uniquely identifies a linked payment card or token.
                                For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
                                This field can be used to identify specific payment methods across multiple accounts on your platform.
                              example: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                            holderName:
                              type: string
                              description: The name of the cardholder as it appears on the card.
                            issuer:
                              type: string
                              description: Financial institution that issued the card.
                            issuerCountry:
                              type: string
                              description: Country where the card was issued.
                            lastFourCardNumber:
                              type: string
                              minLength: 4
                              maxLength: 4
                              description: Last four digits of the card number
                          description: Describes payment card details captured with tap or in-person payment.
                          example: &ref_168
                            entryMode: contactless
                            brand: Visa
                            bin: '123456'
                            cardType: credit
                            expiration:
                              month: '01'
                              year: '21'
                            fingerprint: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                            holderName: Jules Jackson
                            issuer: GRINGOTTS BANK
                            issuerCountry: US
                            lastFourCardNumber: '1234'
                      description: A card used at point of sale terminal for a card present transaction as contained within a payment method.
                  discriminator: &ref_134
                    propertyName: paymentMethodType
                    mapping:
                      moov-wallet: '#/components/schemas/MoovWalletPaymentMethod'
                      ach-debit-fund: '#/components/schemas/AchDebitFundPaymentMethod'
                      ach-debit-collect: '#/components/schemas/AchDebitCollectPaymentMethod'
                      ach-credit-standard: '#/components/schemas/AchCreditStandardPaymentMethod'
                      ach-credit-same-day: '#/components/schemas/AchCreditSameDayPaymentMethod'
                      rtp-credit: '#/components/schemas/RtpCreditPaymentMethod'
                      card-payment: '#/components/schemas/CardPaymentPaymentMethod'
                      push-to-card: '#/components/schemas/PushToCardPaymentMethod'
                      pull-from-card: '#/components/schemas/PullFromCardPaymentMethod'
                      apple-pay: '#/components/schemas/ApplePayPaymentMethod'
                      card-present-payment: '#/components/schemas/CardPresentPaymentPaymentMethod'
                  description: A method of moving money
              example:
                - paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  paymentMethodType: moov-wallet
                  wallet:
                    walletID: 01234567-89ab-cdef-0123-456789abcdef
                - paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  paymentMethodType: apple-pay
                  applePay:
                    brand: Visa
                    cardType: credit
                    cardDisplayName: Visa 1256
                    fingerprint: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
                    expiration:
                      month: '01'
                      year: '21'
                    dynamicLastFour: '1256'
                    issuerCountry: US
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment methods
      x-speakeasy-name-override: list
      x-speakeasy-group: paymentMethods
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_methods.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentMethods.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListPaymentMethodsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListPaymentMethodsResponse res = sdk.paymentMethods().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.paymentMethods().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentMethods->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00',
                sourceID: '21e27667-18d6-4d46-812e-0aee1b9ddf12',
                paymentMethodType: Components\PaymentMethodType::ApplePay

            );

            if ($response->paymentMethods !== null) {
                // handle response
            }
  /accounts/{accountID}/payment-methods/{paymentMethodID}:
    get:
      operationId: getPaymentMethod
      description: |-
        Get the specified payment method associated with a Moov account. Read our [payment methods guide](https://docs.moov.io/guides/money-movement/payment-methods/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/payment-methods.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentMethodID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the payment method.
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                oneOf: *ref_133
                discriminator: *ref_134
                description: A method of moving money
              example:
                paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                paymentMethodType: moov-wallet
                wallet:
                  walletID: 01234567-89ab-cdef-0123-456789abcdef
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Payment methods
      x-speakeasy-name-override: get
      x-speakeasy-group: paymentMethods
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.payment_methods.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", payment_method_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.paymentMethods.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                paymentMethodID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetPaymentMethodResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetPaymentMethodResponse res = sdk.paymentMethods().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .paymentMethodID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.paymentMethod().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->paymentMethods->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                paymentMethodID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->paymentMethod !== null) {
                // handle response
            }
  /accounts/{accountID}/representatives:
    post:
      operationId: createRepresentative
      description: |-
        Moov accounts associated with businesses require information regarding individuals who represent the business. 
        You can provide this information by creating a representative. Each account is allowed a maximum of 7 representatives. 
        Read our [business representatives guide](https://docs.moov.io/guides/accounts/requirements/business-representatives/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/representatives.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the account.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_135
                properties: *ref_136
                description: Describes a business representative.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_609
                  - error
                properties: &ref_610
                  error:
                    type: object
                    properties:
                      name:
                        type: object
                        properties: *ref_137
                      phone:
                        type: object
                        properties: *ref_8
                      email:
                        type: string
                      address:
                        type: object
                        properties: *ref_7
                      birthDate:
                        type: object
                        properties: &ref_369
                          day:
                            type: string
                          month:
                            type: string
                          year:
                            type: string
                      governmentID:
                        type: object
                        properties: &ref_495
                          ssn:
                            type: object
                            properties:
                              full:
                                type: string
                              lastFour:
                                type: string
                          itin:
                            type: object
                            properties:
                              full:
                                type: string
                              lastFour:
                                type: string
                      responsibilities:
                        type: object
                        properties: &ref_608
                          isController:
                            type: string
                          isOwner:
                            type: string
                          ownershipPercentage:
                            type: string
                          jobTitle:
                            type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Representatives
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_423
                birthDate:
                  type: object
                  required: *ref_138
                  properties: *ref_139
                governmentID:
                  type: object
                  properties: *ref_27
                responsibilities:
                  type: object
                  properties: *ref_140
                  description: Describes the job responsibilities of a business representative.
              allOf: &ref_424
                - type: object
                  required:
                    - name
                  properties:
                    name:
                      type: object
                      required: *ref_3
                      properties: *ref_4
                    phone:
                      type: object
                      properties: *ref_2
                    email:
                      type: string
                      maxLength: 255
                      format: email
                      example: jordan.lee@classbooker.dev
                    address:
                      type: object
                      required: *ref_0
                      properties: *ref_1
                  description: The template for omitting properties.
              description: Describes a business representative to create.
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.representatives.create(account_id="7a621cf0-21cd-49cf-8540-3315211a509a", name={
                    "first_name": "Jordan",
                    "middle_name": "Reese",
                    "last_name": "Lee",
                    "suffix": "Jr",
                }, phone={
                    "number": "8185551212",
                    "country_code": "1",
                }, email="jordan.lee@classbooker.dev", address={
                    "address_line1": "123 Main Street",
                    "address_line2": "Apt 302",
                    "city": "Boulder",
                    "state_or_province": "CO",
                    "postal_code": "80301",
                    "country": "US",
                }, birth_date={
                    "day": 9,
                    "month": 11,
                    "year": 1989,
                }, responsibilities={
                    "ownership_percentage": 38,
                    "job_title": "CEO",
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.representatives.create({
                accountID: "7a621cf0-21cd-49cf-8540-3315211a509a",
                createRepresentative: {
                  name: {
                    firstName: "Jordan",
                    middleName: "Reese",
                    lastName: "Lee",
                    suffix: "Jr",
                  },
                  phone: {
                    number: "8185551212",
                    countryCode: "1",
                  },
                  email: "jordan.lee@classbooker.dev",
                  address: {
                    addressLine1: "123 Main Street",
                    addressLine2: "Apt 302",
                    city: "Boulder",
                    stateOrProvince: "CO",
                    postalCode: "80301",
                    country: "US",
                  },
                  birthDate: {
                    day: 9,
                    month: 11,
                    year: 1989,
                  },
                  responsibilities: {
                    ownershipPercentage: 38,
                    jobTitle: "CEO",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.RepresentativeValidationError;
            import io.moov.sdk.models.operations.CreateRepresentativeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, RepresentativeValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateRepresentativeResponse res = sdk.representatives().create()
                            .accountID("7a621cf0-21cd-49cf-8540-3315211a509a")
                            .createRepresentative(CreateRepresentative.builder()
                                .name(IndividualName.builder()
                                    .firstName("Jordan")
                                    .lastName("Lee")
                                    .middleName("Reese")
                                    .suffix("Jr")
                                    .build())
                                .phone(PhoneNumber.builder()
                                    .number("8185551212")
                                    .countryCode("1")
                                    .build())
                                .email("jordan.lee@classbooker.dev")
                                .address(Address.builder()
                                    .addressLine1("123 Main Street")
                                    .city("Boulder")
                                    .stateOrProvince("CO")
                                    .postalCode("80301")
                                    .country("US")
                                    .addressLine2("Apt 302")
                                    .build())
                                .birthDate(BirthDate.builder()
                                    .day(9L)
                                    .month(11L)
                                    .year(1989L)
                                    .build())
                                .responsibilities(RepresentativeResponsibilities.builder()
                                    .ownershipPercentage(38L)
                                    .jobTitle("CEO")
                                    .build())
                                .build())
                            .call();

                    if (res.representative().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createRepresentative = new Components\CreateRepresentative(
                name: new Components\IndividualName(
                    firstName: 'Jordan',
                    middleName: 'Reese',
                    lastName: 'Lee',
                    suffix: 'Jr',
                ),
                phone: new Components\PhoneNumber(
                    number: '8185551212',
                    countryCode: '1',
                ),
                email: 'jordan.lee@classbooker.dev',
                address: new Components\Address(
                    addressLine1: '123 Main Street',
                    addressLine2: 'Apt 302',
                    city: 'Boulder',
                    stateOrProvince: 'CO',
                    postalCode: '80301',
                    country: 'US',
                ),
                birthDate: new Components\BirthDate(
                    day: 9,
                    month: 11,
                    year: 1989,
                ),
                responsibilities: new Components\RepresentativeResponsibilities(
                    ownershipPercentage: 38,
                    jobTitle: 'CEO',
                ),
            );

            $response = $sdk->representatives->create(
                accountID: '7a621cf0-21cd-49cf-8540-3315211a509a',
                createRepresentative: $createRepresentative,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->representative !== null) {
                // handle response
            }
    get:
      operationId: listRepresentatives
      description: |-
        A Moov account may have multiple representatives depending on the associated business's ownership and management structure. 
        You can use this method to list all the representatives for a given Moov account. 
        Note that Moov accounts associated with an individual do not have representatives. 
        Read our [business representatives guide](https://docs.moov.io/guides/accounts/requirements/business-representatives/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/representatives.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the account.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_135
                  properties: *ref_136
                  description: Describes a business representative.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Representatives
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.representatives.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.representatives.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListRepresentativesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListRepresentativesResponse res = sdk.representatives().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.representatives().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->representatives->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->representatives !== null) {
                // handle response
            }
  /accounts/{accountID}/representatives/{representativeID}:
    delete:
      operationId: deleteRepresentative
      description: |-
        Deletes a business representative associated with a Moov account. Read our [business representatives guide](https://docs.moov.io/guides/accounts/requirements/business-representatives/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/representatives.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the account.
          schema:
            type: string
            format: uuid
        - name: representativeID
          in: path
          required: true
          description: ID of the representative.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Representatives
      x-speakeasy-name-override: delete
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.representatives.delete(account_id="8b6fe91a-a0b1-4b3e-ab7b-e83a32f2399e", representative_id="7aa10743-a04f-44af-84fe-b54259caa1ba")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.representatives.delete({
                accountID: "8b6fe91a-a0b1-4b3e-ab7b-e83a32f2399e",
                representativeID: "7aa10743-a04f-44af-84fe-b54259caa1ba",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DeleteRepresentativeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DeleteRepresentativeResponse res = sdk.representatives().delete()
                            .accountID("8b6fe91a-a0b1-4b3e-ab7b-e83a32f2399e")
                            .representativeID("7aa10743-a04f-44af-84fe-b54259caa1ba")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->representatives->delete(
                accountID: '8b6fe91a-a0b1-4b3e-ab7b-e83a32f2399e',
                representativeID: '7aa10743-a04f-44af-84fe-b54259caa1ba',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
    get:
      operationId: getRepresentative
      description: |-
        Retrieve a specific representative associated with a given Moov account. Read our [business representatives guide](https://docs.moov.io/guides/accounts/requirements/business-representatives/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/representatives.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the account.
          schema:
            type: string
            format: uuid
        - name: representativeID
          in: path
          required: true
          description: ID of the representative.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_135
                properties: *ref_136
                description: Describes a business representative.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Representatives
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.representatives.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", representative_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.representatives.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                representativeID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetRepresentativeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetRepresentativeResponse res = sdk.representatives().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .representativeID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.representative().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->representatives->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                representativeID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->representative !== null) {
                // handle response
            }
    patch:
      operationId: updateRepresentative
      description: |-
        If a representative's information has changed you can patch the information associated with a specific representative ID. 
        Read our [business representatives guide](https://docs.moov.io/guides/accounts/requirements/business-representatives/) to learn more.

        When **can** profile data be updated:

        - For unverified representatives, all profile data can be edited.
        - During the verification process, missing or incomplete profile data can be edited.
        - Verified representatives can only add missing profile data.

        When **can't** profile data be updated:

        - Verified representatives cannot change any existing profile data.

        If you need to update information in a locked state, please contact Moov support.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/representatives.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: ID of the account.
          schema:
            type: string
            format: uuid
        - name: representativeID
          in: path
          required: true
          description: ID of the representative.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_135
                properties: *ref_136
                description: Describes a business representative.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Representatives
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_663
                name:
                  type: object
                  properties: *ref_141
                phone:
                  type: object
                  allOf:
                    - type: object
                      properties: *ref_2
                  nullable: true
                email:
                  type: object
                  allOf:
                    - type: string
                      maxLength: 255
                      format: email
                      example: jordan.lee@classbooker.dev
                  nullable: true
                address:
                  type: object
                  allOf:
                    - type: object
                      properties: *ref_28
                  nullable: true
                birthDate:
                  type: object
                  allOf:
                    - type: object
                      properties: *ref_142
                  nullable: true
                governmentID:
                  type: object
                  allOf:
                    - type: object
                      properties: *ref_27
                  nullable: true
                responsibilities:
                  type: object
                  allOf:
                    - type: object
                      properties: *ref_140
                      description: Describes the job responsibilities of a business representative.
                  nullable: true
      x-speakeasy-name-override: update
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.representatives.update(account_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd", representative_id="b85898c1-25a1-4907-a1c5-562af6646dad", name={
                    "first_name": "Jordan",
                    "middle_name": "Reese",
                    "last_name": "Lee",
                    "suffix": "Jr",
                }, phone={
                    "number": "8185551212",
                    "country_code": "1",
                }, address={
                    "address_line1": "123 Main Street",
                    "address_line2": "Apt 302",
                    "city": "Boulder",
                    "state_or_province": "CO",
                    "postal_code": "80301",
                    "country": "US",
                }, birth_date={
                    "day": 9,
                    "month": 11,
                    "year": 1989,
                }, responsibilities={
                    "ownership_percentage": 38,
                    "job_title": "CEO",
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.representatives.update({
                accountID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                representativeID: "b85898c1-25a1-4907-a1c5-562af6646dad",
                updateRepresentative: {
                  name: {
                    firstName: "Jordan",
                    middleName: "Reese",
                    lastName: "Lee",
                    suffix: "Jr",
                  },
                  phone: {
                    number: "8185551212",
                    countryCode: "1",
                  },
                  address: {
                    addressLine1: "123 Main Street",
                    addressLine2: "Apt 302",
                    city: "Boulder",
                    stateOrProvince: "CO",
                    postalCode: "80301",
                    country: "US",
                  },
                  birthDate: {
                    day: 9,
                    month: 11,
                    year: 1989,
                  },
                  responsibilities: {
                    ownershipPercentage: 38,
                    jobTitle: "CEO",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.UpdateRepresentativeResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateRepresentativeResponse res = sdk.representatives().update()
                            .accountID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .representativeID("b85898c1-25a1-4907-a1c5-562af6646dad")
                            .updateRepresentative(UpdateRepresentative.builder()
                                .name(IndividualNameUpdate.builder()
                                    .firstName("Jordan")
                                    .middleName("Reese")
                                    .lastName("Lee")
                                    .suffix("Jr")
                                    .build())
                                .phone(Phone.builder()
                                    .number("8185551212")
                                    .countryCode("1")
                                    .build())
                                .address(UpdateRepresentativeAddress.builder()
                                    .addressLine1("123 Main Street")
                                    .addressLine2("Apt 302")
                                    .city("Boulder")
                                    .stateOrProvince("CO")
                                    .postalCode("80301")
                                    .country("US")
                                    .build())
                                .birthDate(UpdateRepresentativeBirthDate.builder()
                                    .day(9L)
                                    .month(11L)
                                    .year(1989L)
                                    .build())
                                .responsibilities(Responsibilities.builder()
                                    .ownershipPercentage(38L)
                                    .jobTitle("CEO")
                                    .build())
                                .build())
                            .call();

                    if (res.representative().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateRepresentative = new Components\UpdateRepresentative(
                name: new Components\IndividualNameUpdate(
                    firstName: 'Jordan',
                    middleName: 'Reese',
                    lastName: 'Lee',
                    suffix: 'Jr',
                ),
                phone: new Components\Phone(
                    number: '8185551212',
                    countryCode: '1',
                ),
                address: new Components\UpdateRepresentativeAddress(
                    addressLine1: '123 Main Street',
                    addressLine2: 'Apt 302',
                    city: 'Boulder',
                    stateOrProvince: 'CO',
                    postalCode: '80301',
                    country: 'US',
                ),
                birthDate: new Components\UpdateRepresentativeBirthDate(
                    day: 9,
                    month: 11,
                    year: 1989,
                ),
                responsibilities: new Components\Responsibilities(
                    ownershipPercentage: 38,
                    jobTitle: 'CEO',
                ),
            );

            $response = $sdk->representatives->update(
                accountID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                representativeID: 'b85898c1-25a1-4907-a1c5-562af6646dad',
                updateRepresentative: $updateRepresentative,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->representative !== null) {
                // handle response
            }
  /accounts/{accountID}/schedules:
    post:
      operationId: createSchedule
      description: |-
        Describes the schedule to create or modify.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_151
                  - destinationAccountID
                  - mode
                  - ownerAccountID
                  - partnerAccountID
                  - scheduleID
                  - sourceAccountID
                  - createdOn
                  - updatedOn
                properties: &ref_152
                  description:
                    type: string
                    description: Simple description to place on the transfer.
                  destinationAccountID:
                    type: string
                    format: uuid
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  mode:
                    type: string
                    enum: *ref_16
                    description: The operating mode for an account.
                    example: production
                  occurrences:
                    type: array
                    items:
                      type: object
                      required: &ref_155
                        - runOn
                        - runTransfer
                      properties: &ref_156
                        scheduleID:
                          type: string
                          format: uuid
                        occurrenceID:
                          type: string
                          format: uuid
                        mode:
                          allOf:
                            - type: string
                              enum: *ref_16
                              description: The operating mode for an account.
                              example: production
                          description: Sandbox or production account mode of this schedule.
                        generated:
                          type: boolean
                          description: True if this was generated by a RRule.
                        indefinite:
                          type: boolean
                          description: True if the RRule set runs indefinitely.
                        canceledOn:
                          type: string
                          format: date-time
                        runOn:
                          type: string
                          format: date-time
                        runTransfer:
                          type: object
                          required: &ref_145
                            - amount
                            - destination
                            - partnerAccountID
                            - source
                            - description
                          properties: &ref_146
                            amount:
                              type: object
                              required: *ref_98
                              properties: *ref_99
                            destination:
                              type: object
                              required: &ref_143
                                - paymentMethodID
                              properties: &ref_144
                                paymentMethodID:
                                  type: string
                                  format: uuid
                                  example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                                achDetails:
                                  type: object
                                  properties:
                                    companyEntryDescription:
                                      type: string
                                      minLength: 4
                                      maxLength: 10
                                      description: An optional override of the default NACHA company entry description for a transfer.
                                      example: Gym dues
                                    originatingCompanyName:
                                      type: string
                                      minLength: 4
                                      maxLength: 16
                                      description: An optional override of the default NACHA company name for a transfer.
                                      example: Whole Body Fit
                                cardDetails:
                                  type: object
                                  properties:
                                    dynamicDescriptor:
                                      type: string
                                      minLength: 4
                                      maxLength: 22
                                      description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
                                      example: WhlBdy *Yoga 11-12
                            partnerAccountID:
                              type: string
                              format: uuid
                              example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                            source:
                              type: object
                              required: *ref_143
                              properties: *ref_144
                            description:
                              type: string
                              description: Simple description to place on the transfer.
                          description: Defines the attributes of a transfer.
                        ranOn:
                          type: string
                          format: date-time
                        ranTransferID:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: &ref_550
                            - pending
                            - failed
                            - completed
                          description: Status of the completed occurrence.
                        error:
                          type: object
                          properties:
                            message:
                              type: string
                          description: Contains details on why the occurrence errored.
                  ownerAccountID:
                    type: string
                    format: uuid
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  partnerAccountID:
                    type: string
                    format: uuid
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  recur:
                    type: object
                    required: &ref_147
                      - recurrenceRule
                      - runTransfer
                    properties: &ref_148
                      recurrenceRule:
                        type: string
                        description: |2-
                            RRule as defined by RFC 5545 (https://www.rfc-editor.org/rfc/rfc5545#section-3.3.10). 
                            Generators available online at the following sites - https://freetools.textmagic.com/rrule-generator, https://jkbrzt.github.io/rrule/
                      runTransfer:
                        type: object
                        required: *ref_145
                        properties: *ref_146
                        description: Defines the attributes of a transfer.
                      indefinite:
                        type: boolean
                        description: True if the RRule set runs indefinitely.
                      start:
                        type: string
                        format: date-time
                        example: '2009-11-10T23:00:00Z'
                    description: Defines configuration for recurring transfers.
                  scheduleID:
                    type: string
                    format: uuid
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  sourceAccountID:
                    type: string
                    format: uuid
                    example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                  createdOn:
                    type: string
                    format: date-time
                  updatedOn:
                    type: string
                    format: date-time
                  disabledOn:
                    type: string
                    format: date-time
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_153
                  occurrences:
                    type: object
                    additionalProperties:
                      type: string
                  recur:
                    type: string
                  description:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_154
                description:
                  type: string
                  description: Simple description of what the schedule is.
                occurrences:
                  type: array
                  items:
                    type: object
                    properties: &ref_549
                      canceled:
                        type: boolean
                        description: If set to true, will cancel the occurrence. If set false will resume the occurrence. If unset leaves the value unchanged.
                      occurrenceID:
                        type: string
                        format: uuid
                        description: |2-
                            If set this defines what occurrence to modify, if invalid will fail the request. 
                            If null or "" it defines to add a new occurrence.
                        example: c520f1b9-0ba7-42f5-b977-248cdbe41c69
                      runOn:
                        type: string
                        format: date-time
                        description: Timestamp to run the transfer after. Value must be into the future.
                        example: '2009-11-10T23:00:00Z'
                      runTransfer:
                        type: object
                        required: *ref_145
                        properties: *ref_146
                        description: Defines the attributes of a transfer.
                    description: Occurrences to either create or modify.
                recur:
                  type: object
                  required: *ref_147
                  properties: *ref_148
                  description: Defines configuration for recurring transfers.
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components
            from moovio_sdk.utils import parse_datetime


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.create(account_id="9ab418fe-7b54-4964-a372-69b08e55ee8a", occurrences=[
                    components.Occurrence(
                        occurrence_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        run_on=parse_datetime("2009-11-10T23:00:00Z"),
                        run_transfer=components.RunTransfer(
                            amount=components.Amount(
                                currency="USD",
                                value=1204,
                            ),
                            destination=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            source=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            description="delightfully fumigate convection though zowie up bulky electronics",
                        ),
                    ),
                    components.Occurrence(
                        occurrence_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        run_on=parse_datetime("2009-11-10T23:00:00Z"),
                        run_transfer=components.RunTransfer(
                            amount=components.Amount(
                                currency="USD",
                                value=1204,
                            ),
                            destination=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            source=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            description="tackle unabashedly mentor early miserly stealthily without",
                        ),
                    ),
                ], recur=components.Recur(
                    recurrence_rule="<value>",
                    run_transfer=components.RunTransfer(
                        amount=components.Amount(
                            currency="USD",
                            value=1204,
                        ),
                        destination=components.SchedulePaymentMethod(
                            payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            ach_details=components.AchDetails(
                                company_entry_description="Gym dues",
                                originating_company_name="Whole Body Fit",
                            ),
                            card_details=components.CardDetails(
                                dynamic_descriptor="WhlBdy *Yoga 11-12",
                            ),
                        ),
                        partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source=components.SchedulePaymentMethod(
                            payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            ach_details=components.AchDetails(
                                company_entry_description="Gym dues",
                                originating_company_name="Whole Body Fit",
                            ),
                            card_details=components.CardDetails(
                                dynamic_descriptor="WhlBdy *Yoga 11-12",
                            ),
                        ),
                        description="via deeply writ amid pupil yawningly wasabi when excepting councilman",
                    ),
                    start=parse_datetime("2009-11-10T23:00:00Z"),
                ))

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.create({
                accountID: "9ab418fe-7b54-4964-a372-69b08e55ee8a",
                upsertSchedule: {
                  occurrences: [
                    {
                      occurrenceID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      runOn: new Date("2009-11-10T23:00:00Z"),
                      runTransfer: {
                        amount: {
                          currency: "USD",
                          value: 1204,
                        },
                        destination: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        description: "delightfully fumigate convection though zowie up bulky electronics",
                      },
                    },
                    {
                      occurrenceID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      runOn: new Date("2009-11-10T23:00:00Z"),
                      runTransfer: {
                        amount: {
                          currency: "USD",
                          value: 1204,
                        },
                        destination: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        description: "tackle unabashedly mentor early miserly stealthily without",
                      },
                    },
                  ],
                  recur: {
                    recurrenceRule: "<value>",
                    runTransfer: {
                      amount: {
                        currency: "USD",
                        value: 1204,
                      },
                      destination: {
                        paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        achDetails: {
                          companyEntryDescription: "Gym dues",
                          originatingCompanyName: "Whole Body Fit",
                        },
                        cardDetails: {
                          dynamicDescriptor: "WhlBdy *Yoga 11-12",
                        },
                      },
                      partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      source: {
                        paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        achDetails: {
                          companyEntryDescription: "Gym dues",
                          originatingCompanyName: "Whole Body Fit",
                        },
                        cardDetails: {
                          dynamicDescriptor: "WhlBdy *Yoga 11-12",
                        },
                      },
                      description: "via deeply writ amid pupil yawningly wasabi when excepting councilman",
                    },
                    start: new Date("2009-11-10T23:00:00Z"),
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.ScheduleValidationError;
            import io.moov.sdk.models.operations.CreateScheduleResponse;
            import java.lang.Exception;
            import java.time.OffsetDateTime;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, ScheduleValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateScheduleResponse res = sdk.scheduling().create()
                            .accountID("9ab418fe-7b54-4964-a372-69b08e55ee8a")
                            .upsertSchedule(UpsertSchedule.builder()
                                .occurrences(List.of(
                                    Occurrence.builder()
                                        .occurrenceID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .runOn(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                        .runTransfer(RunTransfer.builder()
                                            .amount(Amount.builder()
                                                .currency("USD")
                                                .value(1204L)
                                                .build())
                                            .destination(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .source(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .description("delightfully fumigate convection though zowie up bulky electronics")
                                            .build())
                                        .build(),
                                    Occurrence.builder()
                                        .occurrenceID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .runOn(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                        .runTransfer(RunTransfer.builder()
                                            .amount(Amount.builder()
                                                .currency("USD")
                                                .value(1204L)
                                                .build())
                                            .destination(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .source(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .description("tackle unabashedly mentor early miserly stealthily without")
                                            .build())
                                        .build()))
                                .recur(Recur.builder()
                                    .recurrenceRule("<value>")
                                    .runTransfer(RunTransfer.builder()
                                        .amount(Amount.builder()
                                            .currency("USD")
                                            .value(1204L)
                                            .build())
                                        .destination(SchedulePaymentMethod.builder()
                                            .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .achDetails(AchDetails.builder()
                                                .companyEntryDescription("Gym dues")
                                                .originatingCompanyName("Whole Body Fit")
                                                .build())
                                            .cardDetails(CardDetails.builder()
                                                .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                .build())
                                            .build())
                                        .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .source(SchedulePaymentMethod.builder()
                                            .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .achDetails(AchDetails.builder()
                                                .companyEntryDescription("Gym dues")
                                                .originatingCompanyName("Whole Body Fit")
                                                .build())
                                            .cardDetails(CardDetails.builder()
                                                .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                .build())
                                            .build())
                                        .description("via deeply writ amid pupil yawningly wasabi when excepting councilman")
                                        .build())
                                    .start(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                    .build())
                                .build())
                            .call();

                    if (res.scheduleResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Utils;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $upsertSchedule = new Components\UpsertSchedule(
                occurrences: [
                    new Components\Occurrence(
                        occurrenceID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                        runOn: Utils\Utils::parseDateTime('2009-11-10T23:00:00Z'),
                        runTransfer: new Components\RunTransfer(
                            amount: new Components\Amount(
                                currency: 'USD',
                                value: 1204,
                            ),
                            destination: new Components\SchedulePaymentMethod(
                                paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                                achDetails: new Components\AchDetails(
                                    companyEntryDescription: 'Gym dues',
                                    originatingCompanyName: 'Whole Body Fit',
                                ),
                                cardDetails: new Components\CardDetails(
                                    dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                                ),
                            ),
                            partnerAccountID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            source: new Components\SchedulePaymentMethod(
                                paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                                achDetails: new Components\AchDetails(
                                    companyEntryDescription: 'Gym dues',
                                    originatingCompanyName: 'Whole Body Fit',
                                ),
                                cardDetails: new Components\CardDetails(
                                    dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                                ),
                            ),
                            description: 'yuck vice between gee ugh ha',
                        ),
                    ),
                ],
                recur: new Components\Recur(
                    recurrenceRule: '<value>',
                    runTransfer: new Components\RunTransfer(
                        amount: new Components\Amount(
                            currency: 'USD',
                            value: 1204,
                        ),
                        destination: new Components\SchedulePaymentMethod(
                            paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            achDetails: new Components\AchDetails(
                                companyEntryDescription: 'Gym dues',
                                originatingCompanyName: 'Whole Body Fit',
                            ),
                            cardDetails: new Components\CardDetails(
                                dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                            ),
                        ),
                        partnerAccountID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                        source: new Components\SchedulePaymentMethod(
                            paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            achDetails: new Components\AchDetails(
                                companyEntryDescription: 'Gym dues',
                                originatingCompanyName: 'Whole Body Fit',
                            ),
                            cardDetails: new Components\CardDetails(
                                dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                            ),
                        ),
                        description: 'bulky electronics through for ick superb nudge embalm simple ouch',
                    ),
                    start: Utils\Utils::parseDateTime('2009-11-10T23:00:00Z'),
                ),
            );

            $response = $sdk->scheduling->create(
                accountID: 'eff61bc5-243d-4f3e-af75-c24a16ac5e2b',
                upsertSchedule: $upsertSchedule,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->scheduleResponse !== null) {
                // handle response
            }
    get:
      operationId: listSchedules
      description: |-
        Describes a list of schedules associated with an account. Append the `hydrate=accounts` query parameter to include partial account details in the response.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            format: int64
            description: The number of entries to skip when paginating a large result set.
            example: 60
          explode: false
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int64
            description: Limits the maximum number of results returned, or determines the page size when used with `skip` for pagination.
            example: 20
          explode: false
        - name: hydrate
          in: query
          required: false
          schema:
            type: string
            enum:
              - accounts
          explode: false
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: &ref_626
                    sourceAccount:
                      type: object
                      required: &ref_149
                        - accountID
                        - displayName
                      properties: &ref_150
                        accountID:
                          type: string
                        displayName:
                          type: string
                        email:
                          type: string
                    destinationAccount:
                      type: object
                      required: *ref_149
                      properties: *ref_150
                    partnerAccount:
                      type: object
                      required: *ref_149
                      properties: *ref_150
                  allOf: &ref_627
                    - type: object
                      required: *ref_151
                      properties: *ref_152
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.list({
                skip: 60,
                count: 20,
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListSchedulesRequest;
            import io.moov.sdk.models.operations.ListSchedulesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListSchedulesRequest req = ListSchedulesRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListSchedulesResponse res = sdk.scheduling().list()
                            .request(req)
                            .call();

                    if (res.scheduleListResponses().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListSchedulesRequest(
                skip: 60,
                count: 20,
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
            );

            $response = $sdk->scheduling->list(
                request: $request
            );

            if ($response->scheduleListResponses !== null) {
                // handle response
            }
  /accounts/{accountID}/schedules/{scheduleID}:
    put:
      operationId: updateSchedule
      description: |-
        Describes the schedule to modify.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_151
                properties: *ref_152
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: *ref_153
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: *ref_154
      x-speakeasy-name-override: update
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components
            from moovio_sdk.utils import parse_datetime


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.update(account_id="916f66c9-4a48-4a10-94fb-c5837b3ed84e", schedule_id="ce88be33-c224-42c1-ae8b-3533cc7b3742", occurrences=[
                    components.Occurrence(
                        occurrence_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        run_on=parse_datetime("2009-11-10T23:00:00Z"),
                        run_transfer=components.RunTransfer(
                            amount=components.Amount(
                                currency="USD",
                                value=1204,
                            ),
                            destination=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            source=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            description="technician eulogise whereas till mild than during",
                        ),
                    ),
                    components.Occurrence(
                        occurrence_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        run_on=parse_datetime("2009-11-10T23:00:00Z"),
                        run_transfer=components.RunTransfer(
                            amount=components.Amount(
                                currency="USD",
                                value=1204,
                            ),
                            destination=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            source=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            description="gosh frantically belabor past",
                        ),
                    ),
                    components.Occurrence(
                        occurrence_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        run_on=parse_datetime("2009-11-10T23:00:00Z"),
                        run_transfer=components.RunTransfer(
                            amount=components.Amount(
                                currency="USD",
                                value=1204,
                            ),
                            destination=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            source=components.SchedulePaymentMethod(
                                payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                                ach_details=components.AchDetails(
                                    company_entry_description="Gym dues",
                                    originating_company_name="Whole Body Fit",
                                ),
                                card_details=components.CardDetails(
                                    dynamic_descriptor="WhlBdy *Yoga 11-12",
                                ),
                            ),
                            description="perfumed fisherman with",
                        ),
                    ),
                ], recur=components.Recur(
                    recurrence_rule="<value>",
                    run_transfer=components.RunTransfer(
                        amount=components.Amount(
                            currency="USD",
                            value=1204,
                        ),
                        destination=components.SchedulePaymentMethod(
                            payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            ach_details=components.AchDetails(
                                company_entry_description="Gym dues",
                                originating_company_name="Whole Body Fit",
                            ),
                            card_details=components.CardDetails(
                                dynamic_descriptor="WhlBdy *Yoga 11-12",
                            ),
                        ),
                        partner_account_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source=components.SchedulePaymentMethod(
                            payment_method_id="c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                            ach_details=components.AchDetails(
                                company_entry_description="Gym dues",
                                originating_company_name="Whole Body Fit",
                            ),
                            card_details=components.CardDetails(
                                dynamic_descriptor="WhlBdy *Yoga 11-12",
                            ),
                        ),
                        description="hydrolyze lazily whenever how what",
                    ),
                    start=parse_datetime("2009-11-10T23:00:00Z"),
                ))

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.update({
                accountID: "916f66c9-4a48-4a10-94fb-c5837b3ed84e",
                scheduleID: "ce88be33-c224-42c1-ae8b-3533cc7b3742",
                upsertSchedule: {
                  occurrences: [
                    {
                      occurrenceID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      runOn: new Date("2009-11-10T23:00:00Z"),
                      runTransfer: {
                        amount: {
                          currency: "USD",
                          value: 1204,
                        },
                        destination: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        description: "technician eulogise whereas till mild than during",
                      },
                    },
                    {
                      occurrenceID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      runOn: new Date("2009-11-10T23:00:00Z"),
                      runTransfer: {
                        amount: {
                          currency: "USD",
                          value: 1204,
                        },
                        destination: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        description: "gosh frantically belabor past",
                      },
                    },
                    {
                      occurrenceID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      runOn: new Date("2009-11-10T23:00:00Z"),
                      runTransfer: {
                        amount: {
                          currency: "USD",
                          value: 1204,
                        },
                        destination: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        source: {
                          paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                          achDetails: {
                            companyEntryDescription: "Gym dues",
                            originatingCompanyName: "Whole Body Fit",
                          },
                          cardDetails: {
                            dynamicDescriptor: "WhlBdy *Yoga 11-12",
                          },
                        },
                        description: "perfumed fisherman with",
                      },
                    },
                  ],
                  recur: {
                    recurrenceRule: "<value>",
                    runTransfer: {
                      amount: {
                        currency: "USD",
                        value: 1204,
                      },
                      destination: {
                        paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        achDetails: {
                          companyEntryDescription: "Gym dues",
                          originatingCompanyName: "Whole Body Fit",
                        },
                        cardDetails: {
                          dynamicDescriptor: "WhlBdy *Yoga 11-12",
                        },
                      },
                      partnerAccountID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                      source: {
                        paymentMethodID: "c520f1b9-0ba7-42f5-b977-248cdbe41c69",
                        achDetails: {
                          companyEntryDescription: "Gym dues",
                          originatingCompanyName: "Whole Body Fit",
                        },
                        cardDetails: {
                          dynamicDescriptor: "WhlBdy *Yoga 11-12",
                        },
                      },
                      description: "hydrolyze lazily whenever how what",
                    },
                    start: new Date("2009-11-10T23:00:00Z"),
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.ScheduleValidationError;
            import io.moov.sdk.models.operations.UpdateScheduleResponse;
            import java.lang.Exception;
            import java.time.OffsetDateTime;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, ScheduleValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateScheduleResponse res = sdk.scheduling().update()
                            .accountID("916f66c9-4a48-4a10-94fb-c5837b3ed84e")
                            .scheduleID("ce88be33-c224-42c1-ae8b-3533cc7b3742")
                            .upsertSchedule(UpsertSchedule.builder()
                                .occurrences(List.of(
                                    Occurrence.builder()
                                        .occurrenceID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .runOn(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                        .runTransfer(RunTransfer.builder()
                                            .amount(Amount.builder()
                                                .currency("USD")
                                                .value(1204L)
                                                .build())
                                            .destination(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .source(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .description("technician eulogise whereas till mild than during")
                                            .build())
                                        .build(),
                                    Occurrence.builder()
                                        .occurrenceID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .runOn(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                        .runTransfer(RunTransfer.builder()
                                            .amount(Amount.builder()
                                                .currency("USD")
                                                .value(1204L)
                                                .build())
                                            .destination(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .source(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .description("gosh frantically belabor past")
                                            .build())
                                        .build(),
                                    Occurrence.builder()
                                        .occurrenceID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .runOn(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                        .runTransfer(RunTransfer.builder()
                                            .amount(Amount.builder()
                                                .currency("USD")
                                                .value(1204L)
                                                .build())
                                            .destination(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .source(SchedulePaymentMethod.builder()
                                                .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                                .achDetails(AchDetails.builder()
                                                    .companyEntryDescription("Gym dues")
                                                    .originatingCompanyName("Whole Body Fit")
                                                    .build())
                                                .cardDetails(CardDetails.builder()
                                                    .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                    .build())
                                                .build())
                                            .description("perfumed fisherman with")
                                            .build())
                                        .build()))
                                .recur(Recur.builder()
                                    .recurrenceRule("<value>")
                                    .runTransfer(RunTransfer.builder()
                                        .amount(Amount.builder()
                                            .currency("USD")
                                            .value(1204L)
                                            .build())
                                        .destination(SchedulePaymentMethod.builder()
                                            .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .achDetails(AchDetails.builder()
                                                .companyEntryDescription("Gym dues")
                                                .originatingCompanyName("Whole Body Fit")
                                                .build())
                                            .cardDetails(CardDetails.builder()
                                                .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                .build())
                                            .build())
                                        .partnerAccountID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                        .source(SchedulePaymentMethod.builder()
                                            .paymentMethodID("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
                                            .achDetails(AchDetails.builder()
                                                .companyEntryDescription("Gym dues")
                                                .originatingCompanyName("Whole Body Fit")
                                                .build())
                                            .cardDetails(CardDetails.builder()
                                                .dynamicDescriptor("WhlBdy *Yoga 11-12")
                                                .build())
                                            .build())
                                        .description("hydrolyze lazily whenever how what")
                                        .build())
                                    .start(OffsetDateTime.parse("2009-11-10T23:00:00Z"))
                                    .build())
                                .build())
                            .call();

                    if (res.scheduleResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Utils;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $upsertSchedule = new Components\UpsertSchedule(
                occurrences: [
                    new Components\Occurrence(
                        occurrenceID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                        runOn: Utils\Utils::parseDateTime('2009-11-10T23:00:00Z'),
                        runTransfer: new Components\RunTransfer(
                            amount: new Components\Amount(
                                currency: 'USD',
                                value: 1204,
                            ),
                            destination: new Components\SchedulePaymentMethod(
                                paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                                achDetails: new Components\AchDetails(
                                    companyEntryDescription: 'Gym dues',
                                    originatingCompanyName: 'Whole Body Fit',
                                ),
                                cardDetails: new Components\CardDetails(
                                    dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                                ),
                            ),
                            partnerAccountID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            source: new Components\SchedulePaymentMethod(
                                paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                                achDetails: new Components\AchDetails(
                                    companyEntryDescription: 'Gym dues',
                                    originatingCompanyName: 'Whole Body Fit',
                                ),
                                cardDetails: new Components\CardDetails(
                                    dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                                ),
                            ),
                            description: 'awful underneath retention too mobility char innocently dowse restfully',
                        ),
                    ),
                ],
                recur: new Components\Recur(
                    recurrenceRule: '<value>',
                    runTransfer: new Components\RunTransfer(
                        amount: new Components\Amount(
                            currency: 'USD',
                            value: 1204,
                        ),
                        destination: new Components\SchedulePaymentMethod(
                            paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            achDetails: new Components\AchDetails(
                                companyEntryDescription: 'Gym dues',
                                originatingCompanyName: 'Whole Body Fit',
                            ),
                            cardDetails: new Components\CardDetails(
                                dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                            ),
                        ),
                        partnerAccountID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                        source: new Components\SchedulePaymentMethod(
                            paymentMethodID: 'c520f1b9-0ba7-42f5-b977-248cdbe41c69',
                            achDetails: new Components\AchDetails(
                                companyEntryDescription: 'Gym dues',
                                originatingCompanyName: 'Whole Body Fit',
                            ),
                            cardDetails: new Components\CardDetails(
                                dynamicDescriptor: 'WhlBdy *Yoga 11-12',
                            ),
                        ),
                        description: 'finer ha excepting hence',
                    ),
                    start: Utils\Utils::parseDateTime('2009-11-10T23:00:00Z'),
                ),
            );

            $response = $sdk->scheduling->update(
                accountID: '158c8760-f50e-4178-ba77-008b26dfcc1e',
                scheduleID: '81c22f47-d2c2-4cb9-b16f-66c94a48a104',
                upsertSchedule: $upsertSchedule,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->scheduleResponse !== null) {
                // handle response
            }
    get:
      operationId: getSchedules
      description: |-
        Describes a schedule associated with an account. Requires at least 1 occurrence or recurTransfer to be specified.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_151
                properties: *ref_152
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", schedule_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                scheduleID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetSchedulesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetSchedulesResponse res = sdk.scheduling().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .scheduleID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.scheduleResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->scheduling->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                scheduleID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->scheduleResponse !== null) {
                // handle response
            }
    delete:
      operationId: cancelSchedule
      description: |-
        Describes the schedule to cancel.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      x-speakeasy-name-override: cancel
      x-speakeasy-group: schedules
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.cancel(account_id="0f713502-9233-41c6-9ebd-c570b7edb496", schedule_id="d50fbe4e-3e32-4613-8574-4d82f3fd6b3c")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.cancel({
                accountID: "0f713502-9233-41c6-9ebd-c570b7edb496",
                scheduleID: "d50fbe4e-3e32-4613-8574-4d82f3fd6b3c",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CancelScheduleResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CancelScheduleResponse res = sdk.scheduling().cancel()
                            .accountID("0f713502-9233-41c6-9ebd-c570b7edb496")
                            .scheduleID("d50fbe4e-3e32-4613-8574-4d82f3fd6b3c")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->schedules->cancel(
                accountID: '0f713502-9233-41c6-9ebd-c570b7edb496',
                scheduleID: 'd50fbe4e-3e32-4613-8574-4d82f3fd6b3c',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /accounts/{accountID}/schedules/{scheduleID}/occurrences/{occurrenceFilter}:
    get:
      operationId: getScheduledOccurrence
      description: |-
        Gets a specific occurrence.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: occurrenceFilter
          in: path
          required: true
          description: |-
            Allows the specification of additional filters beyond the UUID.

            Specifying a UUID string returns the exact occurrence.
            Specifying a RFC 3339 timestamp returns the latest occurrence at or before that timestamp.
            Specifying `latest` returns the latest occurrence at or before now.
          schema:
            type: string
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_155
                properties: *ref_156
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Scheduling
      x-speakeasy-name-override: getOccurrence
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.scheduling.get_occurrance(account_id="cdeb0c02-04f9-4e60-9768-3c10a2b2201d", schedule_id="47a51a3b-df1e-40c5-8048-918f18949779", occurrence_filter="<value>")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.scheduling.getOccurrance({
                accountID: "cdeb0c02-04f9-4e60-9768-3c10a2b2201d",
                scheduleID: "47a51a3b-df1e-40c5-8048-918f18949779",
                occurrenceFilter: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetScheduledOccurrenceResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetScheduledOccurrenceResponse res = sdk.scheduling().getOccurrance()
                            .accountID("cdeb0c02-04f9-4e60-9768-3c10a2b2201d")
                            .scheduleID("47a51a3b-df1e-40c5-8048-918f18949779")
                            .occurrenceFilter("<value>")
                            .call();

                    if (res.occurrencesResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->scheduling->getOccurrence(
                accountID: '56d3f962-d141-42e5-866d-e2448f922eb6',
                scheduleID: '963c8ce0-8cc5-45fd-8c2a-a3c731cb6845',
                occurrenceFilter: '<value>',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->occurrencesResponse !== null) {
                // handle response
            }
  /accounts/{accountID}/sweep-configs:
    post:
      operationId: createSweepConfig
      description: |-
        Create a sweep config for a wallet.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_160
                  - sweepConfigID
                  - walletID
                  - status
                  - pushPaymentMethod
                  - pullPaymentMethod
                  - createdOn
                  - updatedOn
                properties: &ref_161
                  sweepConfigID:
                    type: string
                    format: uuid
                  walletID:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: &ref_159
                      - enabled
                      - disabled
                  pushPaymentMethod:
                    type: object
                    required: &ref_157
                      - paymentMethodID
                    properties: &ref_158
                      paymentMethodID:
                        type: string
                        format: uuid
                        description: ID of the payment method.
                      disabledOn:
                        type: string
                        format: date-time
                    description: |-
                      The payment method used to push or pull funds to a bank account.
                      The push payment method can only be ach-credit-standard or ach-credit-same-day. The pull payment method can only be ach-debit-fund.
                  pullPaymentMethod:
                    type: object
                    required: *ref_157
                    properties: *ref_158
                    description: |-
                      The payment method used to push or pull funds to a bank account.
                      The push payment method can only be ach-credit-standard or ach-credit-same-day. The pull payment method can only be ach-debit-fund.
                  minimumBalance:
                    type: string
                    pattern: ^\d+\.\d{1,2}$
                    description: An optional field to specify an amount to maintain in the wallet. This is a decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99. If not supplied, the default is 0.00.
                  statementDescriptor:
                    type: string
                    minLength: 4
                    maxLength: 10
                    description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
                  lockedFields:
                    type: array
                    items:
                      type: string
                    description: An array of fields that are locked. To request updates, please contact Moov support.
                  createdOn:
                    type: string
                    format: date-time
                  updatedOn:
                    type: string
                    format: date-time
              example:
                sweepConfigID: 01234567-89ab-cdef-0123-456789abcdef
                walletID: 01234567-89ab-cdef-0123-456789abcdef
                status: enabled
                pushPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                pullPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                minimumBalance: '0.00'
                statementDescriptor: swp_012345
                createdOn: '2024-05-06T12:20:38.184Z'
                updatedOn: '2024-05-06T12:20:38.184Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_429
                  walletID:
                    type: string
                  status:
                    type: string
                  pushPaymentMethodID:
                    type: string
                  pullPaymentMethodID:
                    type: string
                  statementDescriptor:
                    type: string
                  minimumBalance:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_427
                - walletID
                - status
                - pushPaymentMethodID
                - pullPaymentMethodID
              properties: &ref_428
                walletID:
                  type: string
                  format: uuid
                status:
                  type: string
                  enum: *ref_159
                pushPaymentMethodID:
                  type: string
                  format: uuid
                  description: ID of the payment method.
                pullPaymentMethodID:
                  type: string
                  format: uuid
                  description: ID of the payment method.
                statementDescriptor:
                  type: string
                  minLength: 4
                  maxLength: 10
                  description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
                minimumBalance:
                  type: string
                  pattern: ^\d+\.\d{1,2}$
            example:
              walletID: 01234567-89ab-cdef-0123-456789abcdef
              status: enabled
              pushPaymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
              pullPaymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
      x-speakeasy-name-override: createConfig
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.create_config(account_id="2c0dfb65-d7ef-4c8e-8c74-e6c7773550bc", wallet_id="01234567-89ab-cdef-0123-456789abcdef", status=components.SweepConfigStatus.ENABLED, push_payment_method_id="01234567-89ab-cdef-0123-456789abcdef", pull_payment_method_id="01234567-89ab-cdef-0123-456789abcdef")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.createConfig({
                accountID: "2c0dfb65-d7ef-4c8e-8c74-e6c7773550bc",
                createSweepConfig: {
                  walletID: "01234567-89ab-cdef-0123-456789abcdef",
                  status: "enabled",
                  pushPaymentMethodID: "01234567-89ab-cdef-0123-456789abcdef",
                  pullPaymentMethodID: "01234567-89ab-cdef-0123-456789abcdef",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.CreateSweepConfigError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateSweepConfigResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, CreateSweepConfigError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateSweepConfigResponse res = sdk.sweeps().createConfig()
                            .accountID("2c0dfb65-d7ef-4c8e-8c74-e6c7773550bc")
                            .createSweepConfig(CreateSweepConfig.builder()
                                .walletID("01234567-89ab-cdef-0123-456789abcdef")
                                .status(SweepConfigStatus.ENABLED)
                                .pushPaymentMethodID("01234567-89ab-cdef-0123-456789abcdef")
                                .pullPaymentMethodID("01234567-89ab-cdef-0123-456789abcdef")
                                .build())
                            .call();

                    if (res.sweepConfig().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createSweepConfig = new Components\CreateSweepConfig(
                walletID: '2c0dfb65-d7ef-4c8e-8c74-e6c7773550bc',
                status: Components\SweepConfigStatus::Enabled,
                pushPaymentMethodID: '1daea588-a258-49ed-8d0e-0a7cfe2f2692',
                pullPaymentMethodID: '457166fb-9f82-40e8-962a-493528799e6d',
            );

            $response = $sdk->sweeps->createConfig(
                accountID: '97eddcac-62ec-41c7-bbda-82c16438000c',
                createSweepConfig: $createSweepConfig,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->sweepConfig !== null) {
                // handle response
            }
    get:
      operationId: listSweepConfigs
      description: |-
        List sweep configs associated with an account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_160
                  properties: *ref_161
              example:
                - sweepConfigID: 01234567-89ab-cdef-0123-456789abcdef
                  walletID: 01234567-89ab-cdef-0123-456789abcdef
                  status: enabled
                  pushPaymentMethod:
                    paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  pullPaymentMethod:
                    paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  minimumBalance: '0.00'
                  statementDescriptor: swp_012345
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
                - sweepConfigID: 01234567-89ab-cdef-0123-456789abcdef
                  walletID: 01234567-89ab-cdef-0123-456789abcdef
                  status: disabled
                  pushPaymentMethod:
                    paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  pullPaymentMethod:
                    paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                  minimumBalance: '0.00'
                  statementDescriptor: swp_012345
                  createdOn: '2024-05-06T12:20:38.184Z'
                  updatedOn: '2024-05-06T12:20:38.184Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      x-speakeasy-name-override: listConfigs
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.list_configs(account_id="5d9d568d-fb5d-478b-a301-d495422f1c35")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.listConfigs({
                accountID: "5d9d568d-fb5d-478b-a301-d495422f1c35",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListSweepConfigsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListSweepConfigsResponse res = sdk.sweeps().listConfigs()
                            .accountID("5d9d568d-fb5d-478b-a301-d495422f1c35")
                            .call();

                    if (res.sweepConfigs().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->sweeps->listConfigs(
                accountID: '5d9d568d-fb5d-478b-a301-d495422f1c35',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->sweepConfigs !== null) {
                // handle response
            }
  /accounts/{accountID}/sweep-configs/{sweepConfigID}:
    get:
      operationId: getSweepConfig
      description: |-
        Get a sweep config associated with a wallet.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sweepConfigID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_160
                properties: *ref_161
              example:
                sweepConfigID: 01234567-89ab-cdef-0123-456789abcdef
                walletID: 01234567-89ab-cdef-0123-456789abcdef
                status: enabled
                pushPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                pullPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                minimumBalance: '0.00'
                statementDescriptor: swp_012345
                createdOn: '2024-05-06T12:20:38.184Z'
                updatedOn: '2024-05-06T12:20:38.184Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      x-speakeasy-name-override: getConfig
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.get_config(account_id="12f68c4e-1e8d-483b-9f62-b5d6458d538c", sweep_config_id="ce92235d-dd84-4e14-9895-3b98a0003522")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.getConfig({
                accountID: "12f68c4e-1e8d-483b-9f62-b5d6458d538c",
                sweepConfigID: "ce92235d-dd84-4e14-9895-3b98a0003522",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetSweepConfigResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetSweepConfigResponse res = sdk.sweeps().getConfig()
                            .accountID("12f68c4e-1e8d-483b-9f62-b5d6458d538c")
                            .sweepConfigID("ce92235d-dd84-4e14-9895-3b98a0003522")
                            .call();

                    if (res.sweepConfig().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->sweeps->getConfig(
                accountID: '12f68c4e-1e8d-483b-9f62-b5d6458d538c',
                sweepConfigID: 'ce92235d-dd84-4e14-9895-3b98a0003522',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->sweepConfig !== null) {
                // handle response
            }
    patch:
      operationId: updateSweepConfig
      description: |-
        Update settings on a sweep config.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sweepConfigID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_160
                properties: *ref_161
              example:
                sweepConfigID: 01234567-89ab-cdef-0123-456789abcdef
                walletID: 01234567-89ab-cdef-0123-456789abcdef
                status: disabled
                pushPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                pullPaymentMethod:
                  paymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                minimumBalance: '0.00'
                statementDescriptor: swp_012345
                createdOn: '2024-05-06T12:20:38.184Z'
                updatedOn: '2024-05-06T12:20:38.184Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_567
                  status:
                    type: string
                  pushPaymentMethodID:
                    type: string
                  pullPaymentMethodID:
                    type: string
                  statementDescriptor:
                    type: string
                  minimumBalance:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_566
                status:
                  allOf:
                    - type: string
                      enum: *ref_159
                  nullable: true
                pushPaymentMethodID:
                  type: object
                  allOf:
                    - type: string
                      format: uuid
                      description: ID of the payment method.
                  nullable: true
                pullPaymentMethodID:
                  type: object
                  allOf:
                    - type: string
                      format: uuid
                      description: ID of the payment method.
                  nullable: true
                statementDescriptor:
                  type: object
                  allOf:
                    - type: string
                      minLength: 4
                      maxLength: 10
                      description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
                  nullable: true
                minimumBalance:
                  type: string
                  nullable: true
                  pattern: ^\d+\.\d{1,2}$
            example:
              status: disabled
      x-speakeasy-name-override: updateConfig
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.update_config(account_id="7573cb48-6325-4d3d-841d-81108fcfe6f2", sweep_config_id="49e8f3b1-259f-458e-9367-adb3b938f8c8", status=components.Status.DISABLED)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.updateConfig({
                accountID: "7573cb48-6325-4d3d-841d-81108fcfe6f2",
                sweepConfigID: "49e8f3b1-259f-458e-9367-adb3b938f8c8",
                patchSweepConfig: {
                  status: "disabled",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.PatchSweepConfigError;
            import io.moov.sdk.models.operations.UpdateSweepConfigResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, PatchSweepConfigError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateSweepConfigResponse res = sdk.sweeps().updateConfig()
                            .accountID("7573cb48-6325-4d3d-841d-81108fcfe6f2")
                            .sweepConfigID("49e8f3b1-259f-458e-9367-adb3b938f8c8")
                            .patchSweepConfig(PatchSweepConfig.builder()
                                .status(Status.DISABLED)
                                .build())
                            .call();

                    if (res.sweepConfig().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $patchSweepConfig = new Components\PatchSweepConfig();

            $response = $sdk->sweeps->updateConfig(
                accountID: '7573cb48-6325-4d3d-841d-81108fcfe6f2',
                sweepConfigID: '49e8f3b1-259f-458e-9367-adb3b938f8c8',
                patchSweepConfig: $patchSweepConfig,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->sweepConfig !== null) {
                // handle response
            }
  /accounts/{accountID}/terminal-applications:
    post:
      operationId: linkAccountTerminalApplication
      description: |-
        Link an account with a terminal application.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/terminal-applications.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the merchant account.
            example: 76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_162
                  - terminalApplicationID
                  - status
                  - platform
                properties: &ref_163
                  terminalApplicationID:
                    type: string
                    format: uuid
                    description: ID of the terminal application.
                    example: 12345678-1234-1234-1234-123456789012
                  status:
                    type: string
                    enum: &ref_634
                      - undefined
                      - pending
                      - enabled
                      - disabled
                    description: Status of the terminal application.
                    example: enabled
                  platform:
                    type: string
                    enum: &ref_252
                      - undefined
                      - ios
                      - android
                    description: Platform of the terminal application.
                    example: ios
                  appBundleID:
                    type: string
                    description: The app bundle identifier of the terminal application. Will be returned if platform is `ios`.
                  packageName:
                    type: string
                    description: The app package name of the terminal application. Will be returned if platform is `android`.
                  sha256Digest:
                    type: string
                    description: The app version of the terminal application Will be returned if platform is `android`.
                  versionCode:
                    type: string
                    description: The app version of the terminal application Will be returned if platform is `android`.
                description: Describes a terminal application.
                example: &ref_164
                  terminalApplicationID: 12345678-1234-1234-1234-123456789012
                  status: enabled
                  platform: ios
                  appBundleID: com.example.app
                  packageName: com.example.app
                  sha256Digest: '1234567890'
                  versionCode: 1.0.0
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_328
                  terminalApplicationID:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Account Terminal Applications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_516
                - terminalApplicationID
              properties: &ref_517
                terminalApplicationID:
                  type: string
                  format: uuid
                  description: ID of the terminal application.
                  example: 12345678-1234-1234-1234-123456789012
              description: Describes a request to link an account with a terminal application.
      x-speakeasy-name-override: link
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.account_terminal_applications.link(account_id="76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e", terminal_application_id="12345678-1234-1234-1234-123456789012")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accountTerminalApplications.link({
                accountID: "76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e",
                linkAccountTerminalApplication: {
                  terminalApplicationID: "12345678-1234-1234-1234-123456789012",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.LinkAccountTerminalApplication;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.AccountTerminalApplicationError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.LinkAccountTerminalApplicationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, AccountTerminalApplicationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    LinkAccountTerminalApplicationResponse res = sdk.accountTerminalApplications().link()
                            .accountID("76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e")
                            .linkAccountTerminalApplication(LinkAccountTerminalApplication.builder()
                                .terminalApplicationID("12345678-1234-1234-1234-123456789012")
                                .build())
                            .call();

                    if (res.terminalApplication().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $linkAccountTerminalApplication = new Components\LinkAccountTerminalApplication(
                terminalApplicationID: '12345678-1234-1234-1234-123456789012',
            );

            $response = $sdk->accountTerminalApplications->link(
                accountID: '76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e',
                linkAccountTerminalApplication: $linkAccountTerminalApplication,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalApplication !== null) {
                // handle response
            }
    get:
      operationId: listAccountTerminalApplications
      description: |-
        Retrieve all terminal applications linked to a specific account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/terminal-applications.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the merchant account.
            example: 76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_162
                  properties: *ref_163
                  description: Describes a terminal application.
                  example: *ref_164
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Account Terminal Applications
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.account_terminal_applications.list(account_id="76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accountTerminalApplications.list({
                accountID: "76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListAccountTerminalApplicationsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListAccountTerminalApplicationsResponse res = sdk.accountTerminalApplications().list()
                            .accountID("76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e")
                            .call();

                    if (res.terminalApplications().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accountTerminalApplications->list(
                accountID: '76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalApplications !== null) {
                // handle response
            }
  /accounts/{accountID}/terminal-applications/{terminalApplicationID}:
    get:
      operationId: getAccountTerminalApplication
      description: |-
        Verifies if a specific Terminal Application is linked to an Account. This endpoint acts as a validation check for the link's existence.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/terminal-applications.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the merchant account.
            example: 76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e
        - name: terminalApplicationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the terminal application.
            example: 12345678-1234-1234-1234-123456789012
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_162
                properties: *ref_163
                description: Describes a terminal application.
                example: *ref_164
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Account Terminal Applications
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.account_terminal_applications.get(account_id="76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e", terminal_application_id="12345678-1234-1234-1234-123456789012")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accountTerminalApplications.get({
                accountID: "76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e",
                terminalApplicationID: "12345678-1234-1234-1234-123456789012",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetAccountTerminalApplicationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetAccountTerminalApplicationResponse res = sdk.accountTerminalApplications().get()
                            .accountID("76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e")
                            .terminalApplicationID("12345678-1234-1234-1234-123456789012")
                            .call();

                    if (res.terminalApplication().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accountTerminalApplications->get(
                accountID: '76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e',
                terminalApplicationID: '12345678-1234-1234-1234-123456789012',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalApplication !== null) {
                // handle response
            }
  /accounts/{accountID}/terminal-applications/{terminalApplicationID}/configuration:
    get:
      operationId: getTerminalConfiguration
      description: |-
        Fetch the configuration for a given Terminal Application linked to a specific Account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/terminal-configuration.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the merchant account.
            example: 76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e
        - name: terminalApplicationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the terminal application.
            example: 12345678-1234-1234-1234-123456789012
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_635
                  - configuration
                properties: &ref_636
                  configuration:
                    type: string
                description: Describes a terminal configuration.
                example: &ref_637
                  configuration: Zm9vYmFyCg==
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Account Terminal Applications
      x-speakeasy-name-override: getConfiguration
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.account_terminal_applications.get_configuration(account_id="76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e", terminal_application_id="12345678-1234-1234-1234-123456789012")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accountTerminalApplications.getConfiguration({
                accountID: "76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e",
                terminalApplicationID: "12345678-1234-1234-1234-123456789012",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetTerminalConfigurationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetTerminalConfigurationResponse res = sdk.accountTerminalApplications().getConfiguration()
                            .accountID("76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e")
                            .terminalApplicationID("12345678-1234-1234-1234-123456789012")
                            .call();

                    if (res.terminalConfiguration().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accountTerminalApplications->getConfiguration(
                accountID: '76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e',
                terminalApplicationID: '12345678-1234-1234-1234-123456789012',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalConfiguration !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers:
    post:
      operationId: createTransfer
      description: |-
        Move money by providing the source, destination, and amount in the request body.

        Read our [transfers overview guide](https://docs.moov.io/guides/money-movement/overview/) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-idempotency-key
          in: header
          required: true
          description: Prevents duplicate transfers from being created.
          schema:
            type: string
            format: uuid
        - name: x-wait-for
          in: header
          required: false
          description: |-
            Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an 
            asynchronous response indicating the transfer was created (this is the default response if the header is omitted). A timeout will occur after 15 seconds.
          schema:
            type: string
            enum: &ref_198
              - rail-response
        - name: accountID
          in: path
          required: true
          description: Your Moov account ID.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_445
                  - transferID
                  - createdOn
                properties: &ref_446
                  transferID:
                    type: string
                    format: uuid
                  createdOn:
                    type: string
                    format: date-time
                  source:
                    type: object
                    required: &ref_177
                      - paymentMethodID
                      - paymentMethodType
                      - account
                    properties: &ref_178
                      transferID:
                        type: string
                        format: uuid
                        description: UUID present only if the transfer is part of a transfer group.
                      paymentMethodID:
                        type: string
                      paymentMethodType:
                        type: string
                        enum: *ref_33
                        description: The payment method type that represents a payment rail and directionality
                      account:
                        type: object
                        required: &ref_170
                          - accountID
                          - email
                          - displayName
                        properties: &ref_171
                          accountID:
                            type: string
                          email:
                            type: string
                          displayName:
                            type: string
                      bankAccount:
                        type: object
                        required: *ref_120
                        properties: *ref_121
                        description: A bank account as contained within a payment method.
                      wallet:
                        type: object
                        required: *ref_165
                        properties: *ref_166
                      card:
                        type: object
                        required: *ref_129
                        properties: *ref_130
                        description: A card as contained within a payment method.
                      applePay:
                        type: object
                        required: *ref_131
                        properties: *ref_132
                        description: Describes an Apple Pay token on a Moov account.
                      terminalCard:
                        type: object
                        properties: *ref_167
                        description: Describes payment card details captured with tap or in-person payment.
                        example: *ref_168
                      cardDetails:
                        type: object
                        required: &ref_174
                          - status
                        properties: &ref_175
                          status:
                            type: string
                            enum: &ref_385
                              - initiated
                              - confirmed
                              - canceled
                              - settled
                              - failed
                              - completed
                            description: Status of a transaction within the card payment lifecycle.
                          failureCode:
                            type: string
                            enum: &ref_176
                              - call-issuer
                              - do-not-honor
                              - processing-error
                              - invalid-transaction
                              - invalid-amount
                              - no-such-issuer
                              - reenter-transaction
                              - cvv-mismatch
                              - lost-or-stolen
                              - insufficient-funds
                              - invalid-card-number
                              - invalid-merchant
                              - expired-card
                              - incorrect-pin
                              - transaction-not-allowed
                              - suspected-fraud
                              - amount-limit-exceeded
                              - velocity-limit-exceeded
                              - revocation-of-authorization
                              - card-not-activated
                              - issuer-not-available
                              - could-not-route
                              - cardholder-account-closed
                              - unknown-issue
                              - duplicate-transaction
                          dynamicDescriptor:
                            type: string
                            minLength: 4
                            maxLength: 22
                            description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
                            example: WhlBdy *Yoga 11-12
                          transactionSource:
                            type: string
                            enum: &ref_195
                              - first-recurring
                              - recurring
                              - unscheduled
                            description: |-
                              Specifies the nature and initiator of a transaction. 

                              Crucial for recurring and merchant-initiated transactions as per card scheme rules. 
                              Omit for customer-initiated e-commerce transactions.
                          initiatedOn:
                            type: string
                            format: date-time
                          confirmedOn:
                            type: string
                            format: date-time
                          settledOn:
                            type: string
                            format: date-time
                          failedOn:
                            type: string
                            format: date-time
                          canceledOn:
                            type: string
                            format: date-time
                          completedOn:
                            type: string
                            format: date-time
                          interchangeQualification:
                            type: string
                            description: The program assigned by the card network that determines the interchange rate for the transfer.
                            deprecated: true
                            example: Visa Signature and Visa Infinite (Spend not-qualified) Product 1
                          feeProgram:
                            type: string
                            description: The program assigned by the card network that determines the interchange rate for the transfer.
                            example: Visa Signature and Visa Infinite (Spend not-qualified) Product 1
                        description: Card-specific details about the transaction.
                      achDetails:
                        type: object
                        required: &ref_172
                          - status
                          - traceNumber
                        properties: &ref_173
                          status:
                            type: string
                            enum: &ref_323
                              - ''
                              - initiated
                              - originated
                              - corrected
                              - returned
                              - completed
                              - canceled
                            description: Status of a transaction within the ACH lifecycle.
                          traceNumber:
                            type: string
                            maxLength: 15
                            example: '124782618117'
                          return:
                            type: object
                            properties: &ref_169
                              code:
                                type: string
                              reason:
                                type: string
                              description:
                                type: string
                          correction:
                            type: object
                            properties: *ref_169
                          companyEntryDescription:
                            type: string
                            minLength: 4
                            maxLength: 10
                            description: An optional override of the default NACHA company entry description for a transfer.
                            example: Gym dues
                          originatingCompanyName:
                            type: string
                            minLength: 4
                            maxLength: 16
                            description: An optional override of the default NACHA company name for a transfer.
                            example: Whole Body Fit
                          secCode:
                            type: string
                            enum: &ref_197
                              - WEB
                              - PPD
                              - CCD
                              - TEL
                            description: Code used to identify the ACH authorization method.
                          canceledOn:
                            type: string
                            format: date-time
                          initiatedOn:
                            type: string
                            format: date-time
                          originatedOn:
                            type: string
                            format: date-time
                          correctedOn:
                            type: string
                            format: date-time
                          returnedOn:
                            type: string
                            format: date-time
                          failedOn:
                            type: string
                            format: date-time
                          completedOn:
                            type: string
                            format: date-time
                          debitHoldPeriod:
                            type: string
                            enum: &ref_196
                              - no-hold
                              - 1-day
                              - 2-days
                            description: An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
                            example: 2-days
                        description: ACH specific details about the transaction.
                  destination:
                    type: object
                    required: &ref_179
                      - paymentMethodID
                      - paymentMethodType
                      - account
                    properties: &ref_180
                      paymentMethodID:
                        type: string
                      paymentMethodType:
                        type: string
                        enum: *ref_33
                        description: The payment method type that represents a payment rail and directionality
                      account:
                        type: object
                        required: *ref_170
                        properties: *ref_171
                      bankAccount:
                        type: object
                        required: *ref_120
                        properties: *ref_121
                        description: A bank account as contained within a payment method.
                      wallet:
                        type: object
                        required: *ref_165
                        properties: *ref_166
                      card:
                        type: object
                        required: *ref_129
                        properties: *ref_130
                        description: A card as contained within a payment method.
                      achDetails:
                        type: object
                        required: *ref_172
                        properties: *ref_173
                        description: ACH specific details about the transaction.
                      applePay:
                        type: object
                        required: *ref_131
                        properties: *ref_132
                        description: Describes an Apple Pay token on a Moov account.
                      cardDetails:
                        type: object
                        required: *ref_174
                        properties: *ref_175
                        description: Card-specific details about the transaction.
                      rtpDetails:
                        type: object
                        required: &ref_594
                          - status
                        properties: &ref_595
                          status:
                            type: string
                            enum: &ref_596
                              - initiated
                              - completed
                              - failed
                              - accepted-without-posting
                            description: Status of a transaction within the RTP lifecycle.
                          networkResponseCode:
                            type: string
                            description: Response code returned by network on failure.
                          failureCode:
                            type: string
                            enum: &ref_592
                              - processing-error
                              - invalid-account
                              - account-closed
                              - account-blocked
                              - invalid-field
                              - transaction-not-supported
                              - limit-exceeded
                              - invalid-amount
                              - customer-deceased
                              - other
                            description: Status codes for RTP failures.
                          initiatedOn:
                            type: string
                            format: date-time
                          completedOn:
                            type: string
                            format: date-time
                          failedOn:
                            type: string
                            format: date-time
                          acceptedWithoutPostingOn:
                            type: string
                            format: date-time
                        description: RTP specific details about the transaction.
                  completedOn:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum: &ref_181
                      - created
                      - pending
                      - completed
                      - failed
                      - reversed
                      - queued
                      - canceled
                    description: Status of a transfer.
                  failureReason:
                    type: string
                    enum: &ref_182
                      - source-payment-error
                      - destination-payment-error
                      - wallet-insufficient-funds
                      - rejected-high-risk
                      - processing-error
                    description: Reason for a transfer's failure.
                  amount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  description:
                    type: string
                    maxLength: 128
                    description: An optional description of the transfer that is used on receipts and for your own internal use.
                    example: Pay Instructor for May 15 Class
                  metadata:
                    type: object
                    additionalProperties: *ref_12
                    description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                    example: *ref_13
                  facilitatorFee:
                    type: object
                    properties: &ref_183
                      total:
                        type: integer
                        format: int64
                        description: Total facilitator fee in cents. Only either `total` or `totalDecimal` can be set.
                      totalDecimal:
                        type: string
                        pattern: ^\d+\.\d{1,9}$
                        description: |-
                          Same as `total`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.

                          Only either `total` or `totalDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.
                        example: '12.987654321'
                      markup:
                        type: integer
                        format: int64
                        description: Markup facilitator fee in cents. Only either `markup` or `markupDecimal` can be set.
                      markupDecimal:
                        type: string
                        pattern: ^\d+\.\d{1,9}$
                        description: |-
                          Same as `markup`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
                          Only either `markup` or `markupDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.
                        example: '0.987654321'
                    description: Total or markup fee.
                  moovFee:
                    type: integer
                    format: int64
                    description: Fees charged to your platform account for transfers.
                  moovFeeDecimal:
                    type: string
                    description: Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
                  moovFeeDetails:
                    type: object
                    required: &ref_184
                      - moovProcessing
                    properties: &ref_185
                      cardScheme:
                        type: string
                        description: Card scheme fees accrued during authorization and settlement. String type represents dollars with up to 9 decimal place precision.
                      interchange:
                        type: string
                        description: Network interchange fee for Visa, Mastercard, or Discover. String type represents dollars with up to 9 decimal place precision.
                      discount:
                        type: string
                        description: Network discount fee for American Express. String type represents dollars with up to 9 decimal place precision.
                      moovProcessing:
                        type: string
                        description: Moov processing fee. String type represents dollars with up to 9 decimal place precision.
                    description: Processing and pass-through costs that add up to the moovFee.
                  groupID:
                    type: string
                  cancellations:
                    type: array
                    items:
                      type: object
                      required: &ref_186
                        - cancellationID
                        - status
                        - createdOn
                      properties: &ref_187
                        cancellationID:
                          type: string
                        status:
                          type: string
                          enum: &ref_374
                            - pending
                            - completed
                            - failed
                        createdOn:
                          type: string
                          format: date-time
                  refundedAmount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  refunds:
                    type: array
                    items:
                      type: object
                      required: &ref_188
                        - refundID
                        - createdOn
                        - updatedOn
                        - status
                        - amount
                      properties: &ref_189
                        refundID:
                          type: string
                          format: uuid
                          description: Identifier for the refund.
                        createdOn:
                          type: string
                          format: date-time
                        updatedOn:
                          type: string
                          format: date-time
                        status:
                          type: string
                          enum: &ref_605
                            - created
                            - pending
                            - completed
                            - failed
                        amount:
                          type: object
                          required: *ref_98
                          properties: *ref_99
                        cardDetails:
                          type: object
                          required: &ref_602
                            - status
                          properties: &ref_603
                            status:
                              type: string
                              enum: &ref_604
                                - initiated
                                - confirmed
                                - settled
                                - failed
                                - completed
                            failureCode:
                              type: string
                              enum: *ref_176
                            initiatedOn:
                              type: string
                              format: date-time
                            confirmedOn:
                              type: string
                              format: date-time
                            settledOn:
                              type: string
                              format: date-time
                            failedOn:
                              type: string
                              format: date-time
                            completedOn:
                              type: string
                              format: date-time
                      description: Details of a card refund.
                      title: Sync
                  disputedAmount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  disputes:
                    type: array
                    items:
                      type: object
                      required: &ref_190
                        - disputeID
                        - createdOn
                        - amount
                      properties: &ref_191
                        disputeID:
                          type: string
                          format: uuid
                        createdOn:
                          type: string
                          format: date-time
                        amount:
                          type: object
                          required: *ref_98
                          properties: *ref_99
                      description: Details of a card dispute.
                  sweepID:
                    type: string
                  scheduleID:
                    type: string
                  occurrenceID:
                    type: string
                  salesTaxAmount:
                    allOf:
                      - type: object
                        required: *ref_98
                        properties: *ref_99
                    description: Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
              examples:
                Created synchronous transfer:
                  summary: Created synchronous transfer
                  value:
                    transferID: d835gf30-4b19-4850-a9b2-c0624c41ecb3
                    source:
                      paymentMethodID: 9506dbf6-4208-44c3-ad8a-e4431660e1f2
                      paymentMethodType: card-payment
                      account:
                        accountID: 7e4b26c2-b399-49ef-8390-50e1ea44d550
                        email: jules@julesjackson.com
                        displayName: Jules Jackson
                      card:
                        cardID: aefd5563-93c6-413c-875e-1bd0ebfc116d
                        fingerprint: 2f5d782ceef1c3bd31ed5...
                        brand: Visa
                        cardType: credit
                        lastFourCardNumber: '2000'
                        bin: '400020'
                        expiration:
                          month: '01'
                          year: '28'
                        holderName: Jules Jackson
                        billingAddress:
                          postalCode: '80301'
                        domesticPushToCard: standard
                        domesticPullFromCard: supported
                        cardVerification:
                          cvv: unavailable
                          addressLine1: unavailable
                          postalCode: unavailable
                          accountName:
                            firstName: unavailable
                            lastName: unavailable
                            middleName: unavailable
                            fullName: unavailable
                        issuer: Moov Visa Sandbox
                        issuerCountry: US
                        cardAccountUpdater: {}
                      cardDetails:
                        status: confirmed
                        dynamicDescriptor: WhlBdy *Yoga 11-12
                        confirmedOn: '2025-01-21T21:32:16.799681237Z'
                    destination:
                      paymentMethodID: 3f9969cf-a1f3-4d83-8ddc-229a506651cf
                      paymentMethodType: moov-wallet
                      account:
                        accountID: 34233b72-780c-4a0d-8b08-cbbe23k878f8
                        email: john@wholebodyfitness.io
                        displayName: Whole Body Fitness
                      wallet:
                        walletID: 744b2e78-8cc8-4a6a-af42-611e3b844503
                    status: pending
                    amount:
                      currency: USD
                      value: 32945
                    description: Transfer from card to wallet
                    createdOn: '2025-01-21T21:32:16Z'
                Created async transfer:
                  summary: Created async transfer
                  value:
                    transferID: d835gf30-4b19-4850-a9b2-c0624c41ecb3
                    createdOn: '2025-01-21T21:32:16Z'
        '201':
          description: A transfer was successfully created but an error occurred while generating the synchronous response. The asynchronous response object will be returned.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_356
                  - transferID
                  - createdOn
                properties: &ref_357
                  transferID:
                    type: string
                    format: uuid
                  createdOn:
                    type: string
                    format: date-time
                title: Async
        '202':
          description: The transfer was created, but rail-specific details may not be available within the 15 second timeout window.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_192
                  - transferID
                  - createdOn
                  - source
                  - destination
                  - status
                  - amount
                properties: &ref_193
                  transferID:
                    type: string
                    format: uuid
                  createdOn:
                    type: string
                    format: date-time
                  source:
                    type: object
                    required: *ref_177
                    properties: *ref_178
                  destination:
                    type: object
                    required: *ref_179
                    properties: *ref_180
                  completedOn:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum: *ref_181
                    description: Status of a transfer.
                  failureReason:
                    type: string
                    enum: *ref_182
                    description: Reason for a transfer's failure.
                  amount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  description:
                    type: string
                    maxLength: 128
                    description: An optional description of the transfer that is used on receipts and for your own internal use.
                    example: Pay Instructor for May 15 Class
                  metadata:
                    type: object
                    additionalProperties: *ref_12
                    description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                    example: *ref_13
                  facilitatorFee:
                    type: object
                    properties: *ref_183
                    description: Total or markup fee.
                  moovFee:
                    type: integer
                    format: int64
                    description: Fees charged to your platform account for transfers.
                  moovFeeDecimal:
                    type: string
                    description: Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
                  moovFeeDetails:
                    type: object
                    required: *ref_184
                    properties: *ref_185
                    description: Processing and pass-through costs that add up to the moovFee.
                  moovFees:
                    type: array
                    items:
                      type: object
                      required: &ref_543
                        - accountID
                        - transferParty
                        - totalAmount
                        - feeIDs
                      properties: &ref_544
                        accountID:
                          type: string
                          description: ID of the account that fees were charged to.
                        transferParty:
                          allOf:
                            - type: string
                              enum: &ref_644
                                - source
                                - destination
                                - partner
                          description: Indicates whether the account charged was the partner, source, or destination of the transfer.
                        totalAmount:
                          allOf:
                            - type: object
                              required: *ref_84
                              properties: *ref_85
                          description: The total amount of fees charged to the account.
                        feeIDs:
                          type: array
                          items:
                            type: string
                          description: List of fee IDs that sum to the totalAmount.
                      description: Moov fee charged to an account involved in a transfer.
                    description: Fees charged to accounts involved in the transfer.
                  groupID:
                    type: string
                  cancellations:
                    type: array
                    items:
                      type: object
                      required: *ref_186
                      properties: *ref_187
                  refundedAmount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  refunds:
                    type: array
                    items:
                      type: object
                      required: *ref_188
                      properties: *ref_189
                      description: Details of a card refund.
                      title: Sync
                  disputedAmount:
                    type: object
                    required: *ref_98
                    properties: *ref_99
                  disputes:
                    type: array
                    items:
                      type: object
                      required: *ref_190
                      properties: *ref_191
                      description: Details of a card dispute.
                  sweepID:
                    type: string
                  scheduleID:
                    type: string
                  occurrenceID:
                    type: string
                  salesTaxAmount:
                    allOf:
                      - type: object
                        required: *ref_98
                        properties: *ref_99
                    description: Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
                description: Details of a Transfer.
                title: Sync
                example: &ref_194
                  transferID: d835gf30-4b19-4850-a9b2-c0624c41ecb3
                  source:
                    paymentMethodID: 9506dbf6-4208-44c3-ad8a-e4431660e1f2
                    paymentMethodType: card-payment
                    account:
                      accountID: 7e4b26c2-b399-49ef-8390-50e1ea44d550
                      email: jules@julesjackson.com
                      displayName: Jules Jackson
                    card:
                      cardID: aefd5563-93c6-413c-875e-1bd0ebfc116d
                      fingerprint: 2f5d782ceef1c3bd31ed5...
                      brand: Visa
                      cardType: credit
                      lastFourCardNumber: '2000'
                      bin: '400020'
                      expiration:
                        month: '01'
                        year: '28'
                      holderName: Jules Jackson
                      billingAddress:
                        postalCode: '80301'
                      domesticPushToCard: standard
                      domesticPullFromCard: supported
                      cardVerification:
                        cvv: unavailable
                        addressLine1: unavailable
                        postalCode: unavailable
                        accountName:
                          firstName: unavailable
                          lastName: unavailable
                          middleName: unavailable
                          fullName: unavailable
                      issuer: Moov Visa Sandbox
                      issuerCountry: US
                      cardAccountUpdater: {}
                    cardDetails:
                      status: confirmed
                      dynamicDescriptor: WhlBdy *Yoga 11-12
                      confirmedOn: '2025-01-21T21:32:16.799681237Z'
                  destination:
                    paymentMethodID: 3f9969cf-a1f3-4d83-8ddc-229a506651cf
                    paymentMethodType: moov-wallet
                    account:
                      accountID: 34233b72-780c-4a0d-8b08-cbbe23k878f8
                      email: john@wholebodyfitness.io
                      displayName: Whole Body Fitness
                    wallet:
                      walletID: 744b2e78-8cc8-4a6a-af42-611e3b844503
                  status: pending
                  amount:
                    currency: USD
                    value: 32945
                  description: Transfer from card to wallet
                  createdOn: '2025-01-21T21:32:16Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: Attempted to create a transfer using a duplicate X-Idempotency-Key header.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_192
                properties: *ref_193
                description: Details of a Transfer.
                title: Sync
                example: *ref_194
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_645
                  Transfer:
                    type: string
                  amount:
                    type: string
                  source:
                    type: string
                  sourcePaymentMethodID:
                    type: string
                  destinationPaymentMethodID:
                    type: string
                  description:
                    type: string
                  FacilitatorFee.TotalDecimal:
                    type: string
                  FacilitatorFee.MarkupDecimal:
                    type: string
                  metadata:
                    type: string
                  error:
                    type: string
                    description: Used for generic errors when invalid request data isn't attributed to a single request field.
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_433
                - source
                - destination
                - amount
              properties: &ref_434
                source:
                  type: object
                  properties: &ref_442
                    transferID:
                      type: string
                      format: uuid
                      description: |-
                        A `transferID` is used to create a [transfer group](https://docs.moov.io/guides/money-movement/transfer-groups/),
                        associating the new transfer with a parent transfer.
                    paymentMethodID:
                      type: string
                      format: uuid
                    paymentToken:
                      type: string
                    cardDetails:
                      type: object
                      properties: &ref_444
                        dynamicDescriptor:
                          type: string
                          minLength: 4
                          maxLength: 22
                          description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
                          example: WhlBdy *Yoga 11-12
                        transactionSource:
                          type: string
                          enum: *ref_195
                          description: |-
                            Specifies the nature and initiator of a transaction. 

                            Crucial for recurring and merchant-initiated transactions as per card scheme rules. 
                            Omit for customer-initiated e-commerce transactions.
                    achDetails:
                      type: object
                      properties: &ref_443
                        companyEntryDescription:
                          type: string
                          minLength: 4
                          maxLength: 10
                          description: An optional override of the default NACHA company entry description for a transfer.
                          example: Gym dues
                        originatingCompanyName:
                          type: string
                          minLength: 4
                          maxLength: 16
                          description: An optional override of the default NACHA company name for a transfer.
                          example: Whole Body Fit
                        debitHoldPeriod:
                          type: string
                          enum: *ref_196
                          description: An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
                          example: 2-days
                        secCode:
                          type: string
                          enum: *ref_197
                          description: Code used to identify the ACH authorization method.
                  description: Where funds for a transfer originate. For the source, you must include either a `paymentMethodID` or a `transferID`.
                destination:
                  type: object
                  required: &ref_436
                    - paymentMethodID
                  properties: &ref_437
                    paymentMethodID:
                      type: string
                    cardDetails:
                      type: object
                      properties: &ref_439
                        dynamicDescriptor:
                          type: string
                          minLength: 4
                          maxLength: 22
                          description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
                          example: WhlBdy *Yoga 11-12
                    achDetails:
                      type: object
                      properties: &ref_438
                        companyEntryDescription:
                          type: string
                          minLength: 4
                          maxLength: 10
                          description: An optional override of the default NACHA company entry description for a transfer.
                          example: Gym dues
                        originatingCompanyName:
                          type: string
                          minLength: 4
                          maxLength: 16
                          description: An optional override of the default NACHA company name for a transfer.
                          example: Whole Body Fit
                  description: The final stage of a transfer and the ultimate recipient of the funds.
                amount:
                  type: object
                  required: *ref_98
                  properties: *ref_99
                facilitatorFee:
                  type: object
                  properties: *ref_183
                  description: Total or markup fee.
                description:
                  type: string
                  maxLength: 256
                  description: An optional description of the transfer that is used on receipts and for your own internal use.
                  example: Pay Instructor for May 15 Class
                metadata:
                  type: object
                  additionalProperties: *ref_12
                  description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                  example: *ref_13
                salesTaxAmount:
                  allOf:
                    - type: object
                      required: *ref_98
                      properties: *ref_99
                  description: Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
              example: &ref_435
                source:
                  paymentMethodID: 9506dbf6-4208-44c3-ad8a-e4431660e1f2
                destination:
                  paymentMethodID: 3f9969cf-a1f3-4d83-8ddc-229a506651cf
                amount:
                  currency: USD
                  value: 32945
                description: Transfer from card to wallet
                metadata:
                  optional: metadata
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.create(x_idempotency_key="080a8e77-4c2b-4ecc-9376-91775e024985", account_id="7a621cf0-21cd-49cf-8540-3315211a509a", source={
                    "payment_method_id": "9506dbf6-4208-44c3-ad8a-e4431660e1f2",
                }, destination={
                    "payment_method_id": "3f9969cf-a1f3-4d83-8ddc-229a506651cf",
                }, amount={
                    "currency": "USD",
                    "value": 32945,
                }, facilitator_fee={
                    "total_decimal": "12.987654321",
                    "markup_decimal": "0.987654321",
                }, description="Transfer from card to wallet", metadata={
                    "optional": "metadata",
                }, sales_tax_amount={
                    "currency": "USD",
                    "value": 1204,
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.create({
                xIdempotencyKey: "080a8e77-4c2b-4ecc-9376-91775e024985",
                accountID: "7a621cf0-21cd-49cf-8540-3315211a509a",
                createTransfer: {
                  source: {
                    paymentMethodID: "9506dbf6-4208-44c3-ad8a-e4431660e1f2",
                  },
                  destination: {
                    paymentMethodID: "3f9969cf-a1f3-4d83-8ddc-229a506651cf",
                  },
                  amount: {
                    currency: "USD",
                    value: 32945,
                  },
                  description: "Transfer from card to wallet",
                  metadata: {
                    "optional": "metadata",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.*;
            import io.moov.sdk.models.operations.CreateTransferRequest;
            import io.moov.sdk.models.operations.CreateTransferResponse;
            import java.lang.Exception;
            import java.util.Map;

            public class Application {

                public static void main(String[] args) throws GenericError, Transfer, TransferValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateTransferRequest req = CreateTransferRequest.builder()
                            .xIdempotencyKey("080a8e77-4c2b-4ecc-9376-91775e024985")
                            .accountID("7a621cf0-21cd-49cf-8540-3315211a509a")
                            .createTransfer(CreateTransfer.builder()
                                .source(CreateTransferSource.builder()
                                    .paymentMethodID("9506dbf6-4208-44c3-ad8a-e4431660e1f2")
                                    .build())
                                .destination(CreateTransferDestination.builder()
                                    .paymentMethodID("3f9969cf-a1f3-4d83-8ddc-229a506651cf")
                                    .build())
                                .amount(Amount.builder()
                                    .currency("USD")
                                    .value(32945L)
                                    .build())
                                .description("Transfer from card to wallet")
                                .metadata(Map.ofEntries(
                                    Map.entry("optional", "metadata")))
                                .build())
                            .build();

                    CreateTransferResponse res = sdk.transfers().create()
                            .request(req)
                            .call();

                    if (res.createdTransfer().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\CreateTransferRequest(
                xIdempotencyKey: '7a621cf0-21cd-49cf-8540-3315211a509a',
                accountID: '080a8e77-4c2b-4ecc-9376-91775e024985',
                createTransfer: new Components\CreateTransfer(
                    source: new Components\CreateTransferSource(
                        paymentMethodID: '9506dbf6-4208-44c3-ad8a-e4431660e1f2',
                    ),
                    destination: new Components\CreateTransferDestination(
                        paymentMethodID: '3f9969cf-a1f3-4d83-8ddc-229a506651cf',
                    ),
                    amount: new Components\Amount(
                        currency: 'USD',
                        value: 32945,
                    ),
                    description: 'Transfer from card to wallet',
                    metadata: [
                        'optional' => 'metadata',
                    ],
                ),
            );

            $response = $sdk->transfers->create(
                request: $request
            );

            if ($response->createdTransfer !== null) {
                // handle response
            }
    get:
      operationId: listTransfers
      description: |-
        List all the transfers associated with a particular Moov account. 

        Read our [transfers overview guide](https://docs.moov.io/guides/money-movement/overview/) to learn more. 

        When you run this request, you retrieve 200 transfers at a time. You can advance past a results set of 200 transfers by using the `skip` parameter (for example, 
        if you set `skip`= 10, you will see a results set of 200 transfers after the first 10). If you are searching a high volume of transfers, the request will likely 
        process very slowly. To achieve faster performance, restrict the data as much as you can by using the `StartDateTime` and `EndDateTime` parameters for a limited 
        period of time. You can run multiple requests in smaller time window increments until you've retrieved all the transfers you need.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountIDs
          in: query
          required: false
          description: Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination.
          schema: &ref_309
            type: array
            items:
              type: string
          explode: false
        - name: status
          in: query
          required: false
          description: Optional parameter for filtering transfers by status.
          schema: &ref_318
            type: string
            enum: *ref_181
            description: Status of a transfer.
          explode: false
        - name: startDateTime
          in: query
          required: false
          description: Optional date-time which inclusively filters all transfers created after this date-time.
          schema: &ref_317
            type: string
            format: date-time
          explode: false
        - name: endDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all transfers created before this date-time.
          schema: &ref_312
            type: string
            format: date-time
          explode: false
        - name: groupID
          in: query
          required: false
          description: Optional ID to filter for transfers in the same group.
          schema: &ref_313
            type: string
            format: uuid
          explode: false
        - name: scheduleID
          in: query
          required: false
          description: Optional ID to filter for transfer occurrences belonging to the same schedule.
          schema: &ref_315
            type: string
            format: uuid
          explode: false
        - name: refunded
          in: query
          required: false
          description: Optional parameter to only return refunded transfers.
          schema: &ref_314
            type: boolean
          explode: false
        - name: disputed
          in: query
          required: false
          description: Optional parameter to only return disputed transfers.
          schema: &ref_311
            type: boolean
          explode: false
        - name: skip
          in: query
          required: false
          schema: &ref_316
            type: integer
            format: int64
            description: The number of entries to skip when paginating a large result set.
            example: 60
          explode: false
        - name: count
          in: query
          required: false
          schema: &ref_310
            type: integer
            format: int64
            description: Limits the maximum number of results returned, or determines the page size when used with `skip` for pagination.
            example: 20
          explode: false
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_192
                  properties: *ref_193
                  description: Details of a Transfer.
                  title: Sync
                  example: *ref_194
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.list({
                skip: 60,
                count: 20,
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListTransfersRequest;
            import io.moov.sdk.models.operations.ListTransfersResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListTransfersRequest req = ListTransfersRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListTransfersResponse res = sdk.transfers().list()
                            .request(req)
                            .call();

                    if (res.transfers().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListTransfersRequest(
                skip: 60,
                count: 20,
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
            );

            $response = $sdk->transfers->list(
                request: $request
            );

            if ($response->transfers !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}:
    get:
      operationId: getTransfer
      description: |-
        Retrieve full transfer details for an individual transfer of a particular Moov account. 

        Payment rail-specific details are included in the source and destination. Read our [transfers overview guide](https://docs.moov.io/guides/money-movement/overview/) 
        to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_192
                properties: *ref_193
                description: Details of a Transfer.
                title: Sync
                example: *ref_194
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.get(transfer_id="b888f774-3e7c-4135-a18c-6b985523c4bc", account_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.get({
                transferID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                accountID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetTransferResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetTransferResponse res = sdk.transfers().get()
                            .transferID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .accountID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.transfer().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transfers->get(
                transferID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                accountID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->transfer !== null) {
                // handle response
            }
    patch:
      operationId: updateTransfer
      description: |-
        Update the metadata contained on a transfer. 

        Read our [transfers overview guide](https://docs.moov.io/guides/money-movement/overview/) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_192
                properties: *ref_193
                description: Details of a Transfer.
                title: Sync
                example: *ref_194
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_568
                metadata:
                  type: object
                  allOf:
                    - type: object
                      additionalProperties: *ref_12
                      description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
                      example: *ref_13
                  nullable: true
      x-speakeasy-name-override: update
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.update(transfer_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd", account_id="b85898c1-25a1-4907-a1c5-562af6646dad", metadata={
                    "optional": "metadata",
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.update({
                transferID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                accountID: "b85898c1-25a1-4907-a1c5-562af6646dad",
                patchTransfer: {
                  metadata: {
                    "optional": "metadata",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.PatchTransfer;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.UpdateTransferResponse;
            import java.lang.Exception;
            import java.util.Map;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateTransferResponse res = sdk.transfers().update()
                            .transferID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .accountID("b85898c1-25a1-4907-a1c5-562af6646dad")
                            .patchTransfer(PatchTransfer.builder()
                                .metadata(Map.ofEntries(
                                    Map.entry("optional", "metadata")))
                                .build())
                            .call();

                    if (res.transfer().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $patchTransfer = new Components\PatchTransfer(
                metadata: [
                    'optional' => 'metadata',
                ],
            );

            $response = $sdk->transfers->update(
                transferID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                accountID: 'b85898c1-25a1-4907-a1c5-562af6646dad',
                patchTransfer: $patchTransfer,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->transfer !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}/cancellations:
    post:
      operationId: createCancellation
      description: |2-
          Initiate a cancellation for a card, ACH, or queued transfer.
          
          To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
          to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The partner's Moov account ID.
          schema:
            type: string
            format: uuid
        - name: transferID
          in: path
          required: true
          description: The transfer ID to cancel.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_186
                properties: *ref_187
              examples:
                Created cancellation:
                  summary: Created cancellation
                  value:
                    cancellationID: 89ca7f54-13ba-4714-b9af-17163eae2057
                    status: completed
                    createdOn: '2025-01-19T03:02:43.255309588Z'
        '202':
          description: Successfully initiated a cancellation but an error occurred while waiting for a synchronous response.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_186
                properties: *ref_187
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.create_cancellation(account_id="12dbe811-b86d-497b-ae0f-fb7cfda35251", transfer_id="6bb9450c-10a9-4c8d-a8d2-d3fa18648706")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.createCancellation({
                accountID: "12dbe811-b86d-497b-ae0f-fb7cfda35251",
                transferID: "6bb9450c-10a9-4c8d-a8d2-d3fa18648706",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateCancellationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateCancellationResponse res = sdk.transfers().createCancellation()
                            .accountID("12dbe811-b86d-497b-ae0f-fb7cfda35251")
                            .transferID("6bb9450c-10a9-4c8d-a8d2-d3fa18648706")
                            .call();

                    if (res.cancellation().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transfers->createCancellation(
                accountID: '12dbe811-b86d-497b-ae0f-fb7cfda35251',
                transferID: '6bb9450c-10a9-4c8d-a8d2-d3fa18648706',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->cancellation !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}/cancellations/{cancellationID}:
    get:
      operationId: getCancellation
      description: |2-
          Get details of a cancellation for a transfer.
          
          To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
          to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: Moov account ID of the partner or transfer's source or destination.
          schema:
            type: string
            format: uuid
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
        - name: cancellationID
          in: path
          required: true
          description: Identifier for the cancellation.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_186
                properties: *ref_187
              examples:
                Got cancellation:
                  summary: Got cancellation
                  value:
                    cancellationID: 89ca7f54-13ba-4714-b9af-17163eae2057
                    status: completed
                    createdOn: '2025-01-19T03:02:43.255309588Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.get_cancellation(account_id="fe098575-0376-4404-9a9c-6fe55e3766af", transfer_id="b3b49c6a-9b74-4a85-9d49-864ada05cbf2", cancellation_id="5848c1db-18ac-41eb-b107-b6499987902c")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.getCancellation({
                accountID: "fe098575-0376-4404-9a9c-6fe55e3766af",
                transferID: "b3b49c6a-9b74-4a85-9d49-864ada05cbf2",
                cancellationID: "5848c1db-18ac-41eb-b107-b6499987902c",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetCancellationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetCancellationResponse res = sdk.transfers().getCancellation()
                            .accountID("fe098575-0376-4404-9a9c-6fe55e3766af")
                            .transferID("b3b49c6a-9b74-4a85-9d49-864ada05cbf2")
                            .cancellationID("5848c1db-18ac-41eb-b107-b6499987902c")
                            .call();

                    if (res.cancellation().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transfers->getCancellation(
                accountID: 'fe098575-0376-4404-9a9c-6fe55e3766af',
                transferID: 'b3b49c6a-9b74-4a85-9d49-864ada05cbf2',
                cancellationID: '5848c1db-18ac-41eb-b107-b6499987902c',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->cancellation !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}/refunds:
    post:
      operationId: initiateRefund
      description: |-
        Initiate a refund for a card transfer.

        **Use the [Cancel or refund a card transfer](https://docs.moov.io/api/money-movement/refunds/cancel/) endpoint for more comprehensive cancel and refund options.**    
        See the [reversals](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/reversals/) guide for more information. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-idempotency-key
          in: header
          required: true
          description: Prevents duplicate refunds from being created.
          schema:
            type: string
            format: uuid
        - name: x-wait-for
          in: header
          required: false
          description: |-
            Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an 
            asynchronous response indicating the transfer was created (this is the default response if the header is omitted). A timeout will occur after 15 seconds.
          schema:
            type: string
            enum: *ref_198
        - name: accountID
          in: path
          required: true
          description: The merchant's Moov account ID.
          schema:
            type: string
            format: uuid
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                oneOf: &ref_422
                  - type: object
                    required: *ref_188
                    properties: *ref_189
                    description: Details of a card refund.
                    title: Sync
                  - type: object
                    required: &ref_354
                      - refundID
                      - createdOn
                      - amount
                    properties: &ref_355
                      refundID:
                        type: string
                        format: uuid
                      createdOn:
                        type: string
                        format: date-time
                      amount:
                        type: object
                        required: *ref_98
                        properties: *ref_99
                    description: Asynchronous refund response
                    title: Async
              examples:
                Successful async refund:
                  summary: Successful async refund
                  value:
                    refundID: d4963079-5b35-4d17-981e-8f851753f786
                    createdOn: '2023-09-09T14:15:22Z'
                    amount:
                      currency: USD
                      value: 1204
                Successful sync refund:
                  summary: Successful sync refund
                  value:
                    refundID: d4963079-5b35-4d17-981e-8f851753f786
                    createdOn: '2023-09-09T14:15:22Z'
                    updatedOn: '2023-09-09T14:17:41Z'
                    status: pending
                    amount:
                      currency: USD
                      value: 1204
                    cardDetails:
                      status: confirmed
                      initiatedOn: '2023-09-09T14:16:22Z'
                      confirmedOn: '2023-09-09T14:17:41Z'
        '202':
          description: A refund was successfully created but an error occurred while waiting for a synchronous response.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_188
                properties: *ref_189
                description: Details of a card refund.
                title: Sync
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: Attempted to create a refund using a duplicate X-Idempotency-Key header.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_188
                properties: *ref_189
                description: Details of a card refund.
                title: Sync
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_606
                  amount:
                    type: string
                  error:
                    type: string
                    description: Used for generic errors when invalid request data isn't attributed to a single request field.
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: &ref_421
                amount:
                  type: integer
                  format: int64
                  description: Amount to refund in cents. If null, the original transfer's full amount will be refunded.
                  example: 1000
              description: |-
                Specifies a partial amount to refund. 

                This request body is optional, an empty body will issue a refund for the full amount of the original transfer.
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.initiate_refund(x_idempotency_key="bdfa6a76-31f8-4cdf-a007-3d8aac713b91", account_id="9b1350b2-a5be-41e3-92be-61f5cf4372a8", transfer_id="7390ad29-1a0d-4a0c-8c17-da1708ee9ac2", amount=1000)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.initiateRefund({
                xIdempotencyKey: "bdfa6a76-31f8-4cdf-a007-3d8aac713b91",
                accountID: "9b1350b2-a5be-41e3-92be-61f5cf4372a8",
                transferID: "7390ad29-1a0d-4a0c-8c17-da1708ee9ac2",
                createRefund: {
                  amount: 1000,
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CreateRefund;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.*;
            import io.moov.sdk.models.operations.InitiateRefundRequest;
            import io.moov.sdk.models.operations.InitiateRefundResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, CardAcquiringRefund, RefundValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    InitiateRefundRequest req = InitiateRefundRequest.builder()
                            .xIdempotencyKey("bdfa6a76-31f8-4cdf-a007-3d8aac713b91")
                            .accountID("9b1350b2-a5be-41e3-92be-61f5cf4372a8")
                            .transferID("7390ad29-1a0d-4a0c-8c17-da1708ee9ac2")
                            .createRefund(CreateRefund.builder()
                                .amount(1000L)
                                .build())
                            .build();

                    InitiateRefundResponse res = sdk.transfers().initiateRefund()
                            .request(req)
                            .call();

                    if (res.createRefundResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\InitiateRefundRequest(
                xIdempotencyKey: '9b1350b2-a5be-41e3-92be-61f5cf4372a8',
                accountID: '7390ad29-1a0d-4a0c-8c17-da1708ee9ac2',
                transferID: 'bdfa6a76-31f8-4cdf-a007-3d8aac713b91',
                createRefund: new Components\CreateRefund(
                    amount: 1000,
                ),
            );

            $response = $sdk->transfers->initiateRefund(
                request: $request
            );

            if ($response->createRefundResponse !== null) {
                // handle response
            }
    get:
      operationId: listRefunds
      description: |-
        Get a list of refunds for a card transfer.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_188
                  properties: *ref_189
                  description: Details of a card refund.
                  title: Sync
              example:
                - refundID: ec7e1848-dc80-4ab0-8827-dd7fc0737b43
                  amount:
                    currency: USD
                    value: 1204
                  cardDetails:
                    completedOn: '2024-08-24T14:15:22Z'
                    confirmedOn: '2024-08-24T14:15:22Z'
                    initiatedOn: '2024-08-24T14:15:22Z'
                    settledOn: '2024-08-24T14:15:22Z'
                    status: completed
                  createdOn: '2024-08-24T14:15:22Z'
                  status: completed
                  updatedOn: '2024-08-24T14:15:22Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.list_refunds(account_id="7d74a845-fe17-4ebe-a05e-71847ef8c510", transfer_id="d081988f-448f-492c-8c60-836126fa0dfb")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.listRefunds({
                accountID: "7d74a845-fe17-4ebe-a05e-71847ef8c510",
                transferID: "d081988f-448f-492c-8c60-836126fa0dfb",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListRefundsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListRefundsResponse res = sdk.transfers().listRefunds()
                            .accountID("7d74a845-fe17-4ebe-a05e-71847ef8c510")
                            .transferID("d081988f-448f-492c-8c60-836126fa0dfb")
                            .call();

                    if (res.cardAcquiringRefunds().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transfers->listRefunds(
                accountID: '7d74a845-fe17-4ebe-a05e-71847ef8c510',
                transferID: 'd081988f-448f-492c-8c60-836126fa0dfb',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->cardAcquiringRefunds !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}/refunds/{refundID}:
    get:
      operationId: getRefund
      description: |-
        Get details of a refund for a card transfer.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: transferID
          in: path
          required: true
          description: Identifier for the transfer.
          schema:
            type: string
            format: uuid
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: refundID
          in: path
          required: true
          description: Identifier for the refund.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_188
                properties: *ref_189
                description: Details of a card refund.
                title: Sync
              example:
                refundID: ec7e1848-dc80-4ab0-8827-dd7fc0737b43
                amount:
                  currency: USD
                  value: 1204
                cardDetails:
                  completedOn: '2024-08-24T14:15:22Z'
                  confirmedOn: '2024-08-24T14:15:22Z'
                  initiatedOn: '2024-08-24T14:15:22Z'
                  settledOn: '2024-08-24T14:15:22Z'
                  status: completed
                createdOn: '2024-08-24T14:15:22Z'
                status: completed
                updatedOn: '2024-08-24T14:15:22Z'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.get_refund(transfer_id="dbc09cb2-ef99-4553-8501-94323f377dbf", account_id="7f90bf73-6fb7-41e7-90aa-a9133e7d92c2", refund_id="0f86fa43-1a9b-4a5d-8227-f253063f7fb1")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.getRefund({
                transferID: "dbc09cb2-ef99-4553-8501-94323f377dbf",
                accountID: "7f90bf73-6fb7-41e7-90aa-a9133e7d92c2",
                refundID: "0f86fa43-1a9b-4a5d-8227-f253063f7fb1",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetRefundResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetRefundResponse res = sdk.transfers().getRefund()
                            .transferID("dbc09cb2-ef99-4553-8501-94323f377dbf")
                            .accountID("7f90bf73-6fb7-41e7-90aa-a9133e7d92c2")
                            .refundID("0f86fa43-1a9b-4a5d-8227-f253063f7fb1")
                            .call();

                    if (res.cardAcquiringRefund().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transfers->getRefund(
                transferID: 'dbc09cb2-ef99-4553-8501-94323f377dbf',
                accountID: '7f90bf73-6fb7-41e7-90aa-a9133e7d92c2',
                refundID: '0f86fa43-1a9b-4a5d-8227-f253063f7fb1',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->cardAcquiringRefund !== null) {
                // handle response
            }
  /accounts/{accountID}/transfers/{transferID}/reversals:
    post:
      operationId: createReversal
      description: |-
        Reverses a card transfer by initiating a cancellation or refund depending on the transaction status. 
        Read our [reversals guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/reversals/) 
        to learn more.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need 
        to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: x-idempotency-key
          in: header
          required: true
          description: Prevents duplicate reversals from being created.
          schema:
            type: string
            format: uuid
        - name: accountID
          in: path
          required: true
          description: The Moov account ID.
          schema:
            type: string
            format: uuid
        - name: transferID
          in: path
          required: true
          description: The transfer ID to reverse.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully initiated a reversal.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                oneOf: &ref_199
                  - type: object
                    required: &ref_619
                      - cancellation
                    properties: &ref_620
                      cancellation:
                        type: object
                        required: *ref_186
                        properties: *ref_187
                    title: Canceled
                  - type: object
                    required: &ref_621
                      - refund
                    properties: &ref_622
                      refund:
                        type: object
                        required: *ref_188
                        properties: *ref_189
                        description: Details of a card refund.
                        title: Sync
                    title: Refunded
                description: Contains either a cancellation or refund, depending on the method used to reverse the transfer.
              examples:
                Reversed by refund:
                  summary: Reversed by refund
                  value:
                    refund:
                      refundID: 89ca7f54-13ba-4714-b9af-17163eae2057
                      createdOn: '2025-01-19T03:07:26.001024809Z'
                      updatedOn: '2025-01-19T03:07:26.602114307Z'
                      status: pending
                      amount:
                        currency: USD
                        value: 1938
                      cardDetails:
                        status: confirmed
                        confirmedOn: '2025-01-19T03:07:26.602114307Z'
                Reversed by cancellation:
                  summary: Reversed by cancellation
                  value:
                    cancellation:
                      cancellationID: 89ca7f54-13ba-4714-b9af-17163eae2057
                      status: completed
                      createdOn: '2025-01-19T03:02:43.255309588Z'
        '202':
          description: Successfully initiated a reversal but an error occurred while waiting for a synchronous response.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                oneOf: *ref_199
                description: Contains either a cancellation or refund, depending on the method used to reverse the transfer.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_618
                  amount:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required: &ref_425
                - amount
              properties: &ref_426
                amount:
                  type: integer
                  format: int64
                  description: Amount to reverse in cents. Partial amounts will automatically trigger a refund instead of a cancellation.
                  example: 1000
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.create_reversal(x_idempotency_key="9d4b2ed0-777b-40e6-ba88-d6ca730c3503", account_id="16452b89-d33c-4be9-8f92-205130a46467", transfer_id="c7f1b114-0545-47ba-9d79-fdba229c3df7", amount=1000)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.createReversal({
                xIdempotencyKey: "9d4b2ed0-777b-40e6-ba88-d6ca730c3503",
                accountID: "16452b89-d33c-4be9-8f92-205130a46467",
                transferID: "c7f1b114-0545-47ba-9d79-fdba229c3df7",
                createReversal: {
                  amount: 1000,
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.CreateReversal;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.ReversalValidationError;
            import io.moov.sdk.models.operations.CreateReversalRequest;
            import io.moov.sdk.models.operations.CreateReversalResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, ReversalValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateReversalRequest req = CreateReversalRequest.builder()
                            .xIdempotencyKey("9d4b2ed0-777b-40e6-ba88-d6ca730c3503")
                            .accountID("16452b89-d33c-4be9-8f92-205130a46467")
                            .transferID("c7f1b114-0545-47ba-9d79-fdba229c3df7")
                            .createReversal(CreateReversal.builder()
                                .amount(1000L)
                                .build())
                            .build();

                    CreateReversalResponse res = sdk.transfers().createReversal()
                            .request(req)
                            .call();

                    if (res.reversal().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\CreateReversalRequest(
                xIdempotencyKey: '16452b89-d33c-4be9-8f92-205130a46467',
                accountID: 'c7f1b114-0545-47ba-9d79-fdba229c3df7',
                transferID: '9d4b2ed0-777b-40e6-ba88-d6ca730c3503',
                createReversal: new Components\CreateReversal(
                    amount: 1000,
                ),
            );

            $response = $sdk->transfers->createReversal(
                request: $request
            );

            if ($response->reversal !== null) {
                // handle response
            }
  /accounts/{accountID}/underwriting:
    get:
      operationId: getUnderwriting
      description: |-
        Retrieve underwriting associated with a given Moov account. 

        Read our [underwriting guide](https://docs.moov.io/guides/accounts/requirements/underwriting/) to learn more. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_200
                  - averageTransactionSize
                  - maxTransactionSize
                  - averageMonthlyTransactionVolume
                  - status
                  - volumeByCustomerType
                  - cardVolumeDistribution
                  - fulfillment
                properties: &ref_201
                  averageTransactionSize:
                    type: integer
                    format: int64
                  maxTransactionSize:
                    type: integer
                    format: int64
                  averageMonthlyTransactionVolume:
                    type: integer
                    format: int64
                  status:
                    type: string
                    enum: &ref_646
                      - approved
                      - rejected
                      - pendingReview
                      - pending
                      - notRequested
                    deprecated: true
                  volumeByCustomerType:
                    type: object
                    required: &ref_202
                      - businessToBusinessPercentage
                      - consumerToBusinessPercentage
                    properties: &ref_203
                      businessToBusinessPercentage:
                        type: integer
                        format: int32
                      consumerToBusinessPercentage:
                        type: integer
                        format: int32
                  cardVolumeDistribution:
                    type: object
                    required: &ref_204
                      - ecommercePercentage
                      - cardPresentPercentage
                      - mailOrPhonePercentage
                      - debtRepaymentPercentage
                    properties: &ref_205
                      ecommercePercentage:
                        type: integer
                        format: int32
                      cardPresentPercentage:
                        type: integer
                        format: int32
                      mailOrPhonePercentage:
                        type: integer
                        format: int32
                      debtRepaymentPercentage:
                        type: integer
                        format: int32
                  fulfillment:
                    type: object
                    required: &ref_206
                      - hasPhysicalGoods
                      - isShippingProduct
                      - shipmentDurationDays
                      - returnPolicy
                    properties: &ref_207
                      hasPhysicalGoods:
                        type: boolean
                      isShippingProduct:
                        type: boolean
                      shipmentDurationDays:
                        type: integer
                        format: int64
                      returnPolicy:
                        type: string
                        enum: &ref_617
                          - none
                          - exchangeOnly
                          - withinThirtyDays
                          - other
                description: Describes underwriting values (in USD) used for card payment acceptance.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Underwriting
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.underwriting.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.underwriting.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetUnderwritingResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetUnderwritingResponse res = sdk.underwriting().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .call();

                    if (res.underwriting().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->underwriting->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->underwriting !== null) {
                // handle response
            }
    put:
      operationId: upsertUnderwriting
      description: |-
        Create or update the account's underwriting.

        Read our [underwriting guide](https://docs.moov.io/guides/accounts/requirements/underwriting/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/profile.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_200
                properties: *ref_201
                description: Describes underwriting values (in USD) used for card payment acceptance.
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_666
                  - error
                properties: &ref_667
                  error:
                    type: object
                    properties:
                      averageMonthlyTransactionVolume:
                        type: string
                      averageTransactionSize:
                        type: string
                      maxTransactionSize:
                        type: string
                      volumeByCustomerType:
                        type: object
                        properties: &ref_672
                          businessToBusinessPercentage:
                            type: string
                          consumerToBusinessPercentage:
                            type: string
                      cardVolumeDistribution:
                        type: object
                        properties: &ref_387
                          ecommercePercentage:
                            type: string
                          cardPresentPercentage:
                            type: string
                          mailOrPhonePercentage:
                            type: string
                          debtRepaymentPercentage:
                            type: string
                      fulfillment:
                        type: object
                        properties: &ref_486
                          shipmentDurationDays:
                            type: string
                          returnPolicy:
                            type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Underwriting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_664
                - averageTransactionSize
                - maxTransactionSize
                - averageMonthlyTransactionVolume
                - volumeByCustomerType
                - cardVolumeDistribution
                - fulfillment
              properties: &ref_665
                averageTransactionSize:
                  type: integer
                  format: int64
                maxTransactionSize:
                  type: integer
                  format: int64
                averageMonthlyTransactionVolume:
                  type: integer
                  format: int64
                volumeByCustomerType:
                  type: object
                  required: *ref_202
                  properties: *ref_203
                cardVolumeDistribution:
                  type: object
                  required: *ref_204
                  properties: *ref_205
                fulfillment:
                  type: object
                  required: *ref_206
                  properties: *ref_207
      x-speakeasy-name-override: upsert
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.underwriting.upsert(account_id="695bbe92-af8d-4cce-802f-ca871830906f", average_transaction_size=543422, max_transaction_size=470183, average_monthly_transaction_volume=390496, volume_by_customer_type={
                    "business_to_business_percentage": 478438,
                    "consumer_to_business_percentage": 232067,
                }, card_volume_distribution={
                    "ecommerce_percentage": 766938,
                    "card_present_percentage": 138671,
                    "mail_or_phone_percentage": 146928,
                    "debt_repayment_percentage": 114639,
                }, fulfillment={
                    "has_physical_goods": False,
                    "is_shipping_product": False,
                    "shipment_duration_days": 5009,
                    "return_policy": components.ReturnPolicyType.WITHIN_THIRTY_DAYS,
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.underwriting.upsert({
                accountID: "695bbe92-af8d-4cce-802f-ca871830906f",
                updateUnderwriting: {
                  averageTransactionSize: 543422,
                  maxTransactionSize: 470183,
                  averageMonthlyTransactionVolume: 390496,
                  volumeByCustomerType: {
                    businessToBusinessPercentage: 478438,
                    consumerToBusinessPercentage: 232067,
                  },
                  cardVolumeDistribution: {
                    ecommercePercentage: 766938,
                    cardPresentPercentage: 138671,
                    mailOrPhonePercentage: 146928,
                    debtRepaymentPercentage: 114639,
                  },
                  fulfillment: {
                    hasPhysicalGoods: false,
                    isShippingProduct: false,
                    shipmentDurationDays: 5009,
                    returnPolicy: "withinThirtyDays",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.UpdateUnderwritingError;
            import io.moov.sdk.models.operations.UpsertUnderwritingResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, UpdateUnderwritingError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpsertUnderwritingResponse res = sdk.underwriting().upsert()
                            .accountID("695bbe92-af8d-4cce-802f-ca871830906f")
                            .updateUnderwriting(UpdateUnderwriting.builder()
                                .averageTransactionSize(543422L)
                                .maxTransactionSize(470183L)
                                .averageMonthlyTransactionVolume(390496L)
                                .volumeByCustomerType(VolumeByCustomerType.builder()
                                    .businessToBusinessPercentage(478438)
                                    .consumerToBusinessPercentage(232067)
                                    .build())
                                .cardVolumeDistribution(CardVolumeDistribution.builder()
                                    .ecommercePercentage(766938)
                                    .cardPresentPercentage(138671)
                                    .mailOrPhonePercentage(146928)
                                    .debtRepaymentPercentage(114639)
                                    .build())
                                .fulfillment(FulfillmentDetails.builder()
                                    .hasPhysicalGoods(false)
                                    .isShippingProduct(false)
                                    .shipmentDurationDays(5009L)
                                    .returnPolicy(ReturnPolicyType.WITHIN_THIRTY_DAYS)
                                    .build())
                                .build())
                            .call();

                    if (res.underwriting().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateUnderwriting = new Components\UpdateUnderwriting(
                averageTransactionSize: 543422,
                maxTransactionSize: 470183,
                averageMonthlyTransactionVolume: 390496,
                volumeByCustomerType: new Components\VolumeByCustomerType(
                    businessToBusinessPercentage: 478438,
                    consumerToBusinessPercentage: 232067,
                ),
                cardVolumeDistribution: new Components\CardVolumeDistribution(
                    ecommercePercentage: 766938,
                    cardPresentPercentage: 138671,
                    mailOrPhonePercentage: 146928,
                    debtRepaymentPercentage: 114639,
                ),
                fulfillment: new Components\FulfillmentDetails(
                    hasPhysicalGoods: false,
                    isShippingProduct: false,
                    shipmentDurationDays: 696861,
                    returnPolicy: Components\ReturnPolicyType::WithinThirtyDays,
                ),
            );

            $response = $sdk->underwriting->upsert(
                accountID: '0b695bbe-92af-48dc-9ce0-2fca87183090',
                updateUnderwriting: $updateUnderwriting,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->underwriting !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets:
    get:
      operationId: listWallets
      description: |-
        List the wallets associated with a Moov account. 

        Read our [Moov wallets guide](https://docs.moov.io/guides/sources/wallets/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_208
                    - walletID
                    - availableBalance
                  properties: &ref_209
                    walletID:
                      type: string
                      format: uuid
                    availableBalance:
                      type: object
                      required: &ref_673
                        - currency
                        - value
                        - valueDecimal
                      properties: &ref_674
                        currency:
                          type: string
                          pattern: ^[A-Za-z]{3}$
                          description: A 3-letter ISO 4217 currency code.
                          example: USD
                        value:
                          type: integer
                          format: int64
                          description: |-
                            Quantity in the smallest unit of the specified currency. 

                            In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                          example: 1204
                        valueDecimal:
                          type: string
                          pattern: ^\d+\.\d{1,9}$
                  description: A Moov wallet to store funds for transfers.
              example:
                - walletID: 01234567-89ab-cdef-0123-456789abcdef
                  availableBalance:
                    currency: USD
                    value: 1234
                    valueDecimal: '12.34'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Wallets
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.wallets.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.wallets.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListWalletsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListWalletsResponse res = sdk.wallets().list()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.wallets().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->wallets->list(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->wallets !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets/{walletID}:
    get:
      operationId: getWallet
      description: |-
        Get information on a specific wallet (e.g., the available balance). 

        Read our [Moov wallets guide](https://docs.moov.io/guides/sources/wallets/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: walletID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_208
                properties: *ref_209
                description: A Moov wallet to store funds for transfers.
              example:
                walletID: 01234567-89ab-cdef-0123-456789abcdef
                availableBalance:
                  currency: USD
                  value: 1234
                  valueDecimal: '12.34'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Wallets
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.wallets.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", wallet_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.wallets.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                walletID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetWalletResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetWalletResponse res = sdk.wallets().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .walletID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.wallet().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->wallets->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                walletID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->wallet !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets/{walletID}/sweeps:
    get:
      operationId: listSweeps
      description: |-
        List sweeps associated with a wallet.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: walletID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: status
          in: query
          required: false
          description: Optional parameter to filter by sweep status.
          schema:
            type: string
            enum: &ref_210
              - accruing
              - action-required
              - canceled
              - closed
              - failed
              - paid
          explode: false
        - name: statementDescriptor
          in: query
          required: false
          description: Optional string to filter by statement descriptor.
          schema:
            type: string
            minLength: 4
            maxLength: 10
            description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_211
                    - sweepID
                    - status
                    - accruedAmount
                    - currency
                    - accrualStartedOn
                  properties: &ref_212
                    sweepID:
                      type: string
                      format: uuid
                    status:
                      type: string
                      enum: *ref_210
                    accruedAmount:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: The total net amount of wallet transactions accrued in the sweep.
                    residualBalance:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: Amount remaining in the wallet after the sweep transfer completes.
                    currency:
                      type: string
                      pattern: ^[A-Za-z]{3}$
                      description: A 3-letter ISO 4217 currency code.
                      example: USD
                    accrualStartedOn:
                      type: string
                      format: date-time
                      description: The date-time the sweep began accruing transactions.
                    accrualEndedOn:
                      type: string
                      format: date-time
                      description: The date-time the sweep stopped accruing transactions.
                    pushPaymentMethodID:
                      type: string
                      format: uuid
                      description: ID of the payment method.
                    pullPaymentMethodID:
                      type: string
                      format: uuid
                      description: ID of the payment method.
                    transferID:
                      type: string
                      format: uuid
                    transferAmount:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: Amount that is transferred.
                    statementDescriptor:
                      type: string
                      minLength: 4
                      maxLength: 10
                      description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
              example:
                - accruedAmount: '100.00'
                  accrualStartedOn: '2024-05-06T12:20:38.184Z'
                  currency: USD
                  status: accruing
                  sweepID: 01234567-89ab-cdef-0123-456789abcdef
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", wallet_id="21e27667-18d6-4d46-812e-0aee1b9ddf12", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
                walletID: "21e27667-18d6-4d46-812e-0aee1b9ddf12",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListSweepsRequest;
            import io.moov.sdk.models.operations.ListSweepsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListSweepsRequest req = ListSweepsRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .walletID("21e27667-18d6-4d46-812e-0aee1b9ddf12")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListSweepsResponse res = sdk.sweeps().list()
                            .request(req)
                            .call();

                    if (res.sweeps().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListSweepsRequest(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                walletID: '21e27667-18d6-4d46-812e-0aee1b9ddf12',
                skip: 60,
                count: 20,
            );

            $response = $sdk->sweeps->list(
                request: $request
            );

            if ($response->sweeps !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets/{walletID}/sweeps/{sweepID}:
    get:
      operationId: getSweep
      description: |-
        Get details on a specific sweep.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: walletID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sweepID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_211
                properties: *ref_212
              examples:
                Paid sweep:
                  summary: Paid sweep
                  value:
                    accruedAmount: '100.00'
                    accrualStartedOn: '2024-05-06T12:20:38.184Z'
                    accrualEndedOn: '2024-05-06T12:20:38.184Z'
                    currency: USD
                    pushPaymentMethodID: 01234567-89ab-cdef-0123-456789abcdef
                    residualBalance: '0.00'
                    statementDescriptor: swp_012345
                    status: paid
                    sweepID: 01234567-89ab-cdef-0123-456789abcdef
                    transferAmount: '12.98'
                    transferID: 01234567-89ab-cdef-0123-456789abcdef
                Accrued sweep:
                  summary: Accrued sweep
                  value:
                    accruedAmount: '100.00'
                    accrualStartedOn: '2024-05-06T12:20:38.184Z'
                    currency: USD
                    status: accruing
                    sweepID: 01234567-89ab-cdef-0123-456789abcdef
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Sweeps
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.sweeps.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", wallet_id="e50f7622-81da-484b-9c66-1c8a99c6b71b", sweep_id="ecd62b8f-7112-4aaf-90ab-4e43b4cca371")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.sweeps.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                walletID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
                sweepID: "ecd62b8f-7112-4aaf-90ab-4e43b4cca371",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetSweepResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetSweepResponse res = sdk.sweeps().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .walletID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .sweepID("ecd62b8f-7112-4aaf-90ab-4e43b4cca371")
                            .call();

                    if (res.sweep().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->sweeps->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                walletID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                sweepID: 'ecd62b8f-7112-4aaf-90ab-4e43b4cca371',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->sweep !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets/{walletID}/transactions:
    get:
      operationId: listWalletTransactions
      description: |-
        List all the transactions associated with a particular Moov wallet. 

        Read our [wallet transactions guide](https://docs.moov.io/guides/sources/wallets/transactions/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: walletID
          in: path
          required: true
          schema: &ref_308
            type: string
            format: uuid
        - name: transactionType
          in: query
          required: false
          description: Optional parameter to filter by transaction type.
          schema: &ref_306
            type: string
            enum: &ref_213
              - account-funding
              - ach-reversal
              - auto-sweep
              - card-payment
              - card-decline
              - card-reversal
              - cash-out
              - dispute
              - dispute-reversal
              - facilitator-fee
              - issuing-refund
              - issuing-transaction
              - issuing-transaction-adjustment
              - issuing-auth-hold
              - issuing-auth-release
              - issuing-decline
              - moov-fee
              - payment
              - payout
              - refund
              - refund-failure
              - rtp-failure
              - top-up
              - wallet-transfer
              - adjustment
          explode: false
        - name: transactionTypes
          in: query
          required: false
          description: Optional, comma-separated parameter to filter by transaction types.
          schema: &ref_307
            type: array
            items:
              type: string
              enum: *ref_213
          explode: false
        - name: sourceType
          in: query
          required: false
          description: Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).
          schema: &ref_303
            type: string
            enum: &ref_214
              - transfer
              - dispute
              - issuing-card-transaction
              - issuing-authorization
              - sweep
              - adjustment
              - fee
          explode: false
        - name: sourceID
          in: query
          required: false
          description: Optional parameter to filter by source ID.
          schema: &ref_302
            type: string
            format: uuid
          explode: false
        - name: status
          in: query
          required: false
          description: Optional parameter to filter by status (`pending` or `completed`).
          schema: &ref_304
            type: string
            enum: &ref_215
              - pending
              - completed
              - canceled
              - failed
          explode: false
        - name: createdStartDateTime
          in: query
          required: false
          description: Optional date-time which inclusively filters all transactions created after this date-time.
          schema: &ref_301
            type: string
            format: date-time
          explode: false
        - name: createdEndDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all transactions created before this date-time.
          schema: &ref_300
            type: string
            format: date-time
          explode: false
        - name: completedStartDateTime
          in: query
          required: false
          description: Optional date-time which inclusively filters all transactions completed after this date-time.
          schema: &ref_299
            type: string
            format: date-time
          explode: false
        - name: completedEndDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all transactions completed before this date-time.
          schema: &ref_298
            type: string
            format: date-time
          explode: false
        - name: sweepID
          in: query
          required: false
          description: Optional ID to filter for transactions accrued in a sweep.
          schema: &ref_305
            type: string
            format: uuid
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_216
                    - walletID
                    - transactionID
                    - transactionType
                    - sourceType
                    - sourceID
                    - status
                    - memo
                    - createdOn
                    - currency
                    - grossAmount
                    - grossAmountDecimal
                    - fee
                    - feeDecimal
                    - netAmount
                    - netAmountDecimal
                  properties: &ref_217
                    walletID:
                      type: string
                      format: uuid
                    transactionID:
                      type: string
                      format: uuid
                    transactionType:
                      type: string
                      enum: *ref_213
                    sourceType:
                      type: string
                      enum: *ref_214
                    sourceID:
                      type: string
                      format: uuid
                      description: The ID of the Moov object to which this transaction is related.
                    status:
                      type: string
                      enum: *ref_215
                    memo:
                      type: string
                      description: Detailed description of the transaction.
                    createdOn:
                      type: string
                      format: date-time
                    completedOn:
                      type: string
                      format: date-time
                    currency:
                      type: string
                      pattern: ^[A-Za-z]{3}$
                      description: A 3-letter ISO 4217 currency code.
                      example: USD
                    grossAmount:
                      type: integer
                      format: int64
                      description: The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                    grossAmountDecimal:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: The total transaction amount. Same as `grossAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
                    fee:
                      type: integer
                      format: int64
                      description: Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                    feeIDs:
                      type: array
                      items:
                        type: string
                      description: The IDs of the fees paid for the transaction.
                    feeDecimal:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: Total fees paid for the transaction. Same as `fee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
                    netAmount:
                      type: integer
                      format: int64
                      description: Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                    netAmountDecimal:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. Same as `netAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
                    availableBalance:
                      type: integer
                      format: int64
                      description: The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
                    availableBalanceDecimal:
                      type: string
                      pattern: ^\d+\.\d{1,9}$
                      description: The wallet's total available balance after recording a completed transaction. Same as `availableBalance`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
                    sweepID:
                      type: string
                      format: uuid
                  description: A transaction that funds or deducts from the wallet.
              example:
                - walletID: 01234567-89ab-cdef-0123-456789abcdef
                  transactionID: 01234567-89ab-cdef-0123-456789abcdef
                  transactionType: card-payment
                  sourceType: transfer
                  sourceID: 01234567-89ab-cdef-0123-456789abcdef
                  status: completed
                  memo: An example completed card payment
                  createdOn: '2024-05-06T12:20:38.184Z'
                  completedOn: '2024-05-06T12:20:38.184Z'
                  currency: USD
                  grossAmount: 2000
                  grossAmountDecimal: '20.00'
                  fee: 30
                  feeDecimal: '0.30'
                  netAmount: 1970
                  netAmountDecimal: '19.70'
                  availableBalance: 10000
                  availableBalanceDecimal: '100.00'
                - walletID: 01234567-89ab-cdef-0123-456789abcdef
                  transactionID: 01234567-89ab-cdef-0123-456789abcdef
                  transactionType: card-payment
                  sourceType: transfer
                  sourceID: 01234567-89ab-cdef-0123-456789abcdef
                  status: pending
                  memo: An example pending card payment
                  createdOn: '2024-05-06T12:20:38.184Z'
                  currency: USD
                  grossAmount: 2000
                  grossAmountDecimal: '20.00'
                  fee: 30
                  feeDecimal: '0.30'
                  netAmount: 1970
                  netAmountDecimal: '19.70'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Wallet transactions
      x-speakeasy-name-override: listTransactions
      x-speakeasy-group: wallets
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.wallet_transactions.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", wallet_id="21e27667-18d6-4d46-812e-0aee1b9ddf12", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.walletTransactions.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
                skip: 60,
                count: 20,
                walletID: "21e27667-18d6-4d46-812e-0aee1b9ddf12",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListWalletTransactionsRequest;
            import io.moov.sdk.models.operations.ListWalletTransactionsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListWalletTransactionsRequest req = ListWalletTransactionsRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .walletID("21e27667-18d6-4d46-812e-0aee1b9ddf12")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListWalletTransactionsResponse res = sdk.walletTransactions().list()
                            .request(req)
                            .call();

                    if (res.walletTransactions().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListWalletTransactionsRequest(
                accountID: '8a18fbbe-f364-4121-88a1-c7f66f235146',
                skip: 60,
                count: 20,
                walletID: '5908defd-b99b-4e06-98b5-5e9cc7fd00e6',
            );

            $response = $sdk->wallets->listTransactions(
                request: $request
            );

            if ($response->walletTransactions !== null) {
                // handle response
            }
  /accounts/{accountID}/wallets/{walletID}/transactions/{transactionID}:
    get:
      operationId: getWalletTransaction
      description: |-
        Get details on a specific wallet transaction. 

        Read our [wallet transactions guide](https://docs.moov.io/guides/sources/wallets/transactions/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/wallets.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: walletID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_216
                properties: *ref_217
                description: A transaction that funds or deducts from the wallet.
              example:
                walletID: 01234567-89ab-cdef-0123-456789abcdef
                transactionID: 01234567-89ab-cdef-0123-456789abcdef
                transactionType: card-payment
                sourceType: transfer
                sourceID: 01234567-89ab-cdef-0123-456789abcdef
                status: completed
                memo: An example completed card payment
                createdOn: '2024-05-06T12:20:38.184Z'
                completedOn: '2024-05-06T12:20:38.184Z'
                currency: USD
                grossAmount: 2000
                grossAmountDecimal: '20.00'
                fee: 30
                feeDecimal: '0.30'
                netAmount: 1970
                netAmountDecimal: '19.70'
                availableBalance: 10000
                availableBalanceDecimal: '100.00'
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Wallet transactions
      x-speakeasy-name-override: get
      x-speakeasy-group: walletTransactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.wallet_transactions.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", wallet_id="e50f7622-81da-484b-9c66-1c8a99c6b71b", transaction_id="ecd62b8f-7112-4aaf-90ab-4e43b4cca371")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.walletTransactions.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                walletID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
                transactionID: "ecd62b8f-7112-4aaf-90ab-4e43b4cca371",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetWalletTransactionResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetWalletTransactionResponse res = sdk.walletTransactions().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .walletID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .transactionID("ecd62b8f-7112-4aaf-90ab-4e43b4cca371")
                            .call();

                    if (res.walletTransaction().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->walletTransactions->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                walletID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                transactionID: 'ecd62b8f-7112-4aaf-90ab-4e43b4cca371',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->walletTransaction !== null) {
                // handle response
            }
  /avatars/{uniqueID}:
    get:
      operationId: getAvatar
      description: |-
        Get avatar image for an account using a unique ID.    

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/profile-enrichment.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: uniqueID
          in: path
          required: true
          description: Any unique ID associated with an account such as accountID, representativeID, routing number, or userID.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            image/*:
              schema:
                type: string
                format: binary
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Avatars
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.avatars.get(unique_id="<id>")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.avatars.get({
                uniqueID: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetAvatarResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetAvatarResponse res = sdk.avatars().get()
                            .uniqueID("<id>")
                            .call();

                    if (res.responseStream().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->avatars->get(
                uniqueID: '<id>',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->bytes !== null) {
                // handle response
            }
  /debug/end-to-end-token:
    post:
      operationId: testEndToEndToken
      description: |-
        Allows for testing a JWE token to ensure it's acceptable by Moov. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/ping.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - End to End Encryption
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: *ref_218
              properties: *ref_219
              description: |-
                Wraps a compact-serialized JSON Web Encryption (JWE) token used for secure transmission of sensitive data (e.g., PCI information) through intermediaries. 
                This token is encrypted using the public key from /end-to-end-keys and wraps an AES key. For details and examples, refer to our 
                [GitHub repository](https://github.com/moovfinancial/moov-go/blob/main/examples/e2ee/e2ee_test.go).
              example: *ref_220
      x-speakeasy-name-override: testToken
      x-speakeasy-group: endToEndEncryption
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.end_to_end_encryption.test_encrypted_token(token="eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.endToEndEncryption.testEncryptedToken({
                token: "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.E2EEToken;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.TestEndToEndTokenResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    TestEndToEndTokenResponse res = sdk.endToEndEncryption().testEncryptedToken()
                            .e2EEToken(E2EEToken.builder()
                                .token("eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA")
                                .build())
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $e2EEToken = new Components\E2EEToken(
                token: 'eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTUyMSIsIngiOiJBS0NYVDM1WVdvTm8wbzExNy1SU0dqUGg3alN1NjFmLUhnYkx1dW0xVG1ueTRlcW5yX2hyU0hpY0w1d3gwODRCWDBRZjVTdEtkRUoydzY2ZUJqWHprRV9OIiwieSI6IkFIMEJfT2RaYTQtbG43dGJ4M3VBdlc1NDNQRE9HUXBCTDloRFFNWjlTQXNfOW05UWN3dnhRd1hrb1VrM3VzT1FnVV9ySVFrNFRoZ1NTUzV4UlhKcm5ZaTkifSwia2lkIjoiYmRvV3pLekpKUGw0TVFIaENDa05WYTZlZ1dmYi02V1haSjZKTFZqQ0hWMD0ifQ.HalyoHsfufBJEODd2lD9ThQvvVWw3b2kgWDLHGxmHhMv8rODyLL_Ug.rpQP178t8Ed_pUU2.Sn9UFeVoegAxiMUv11q7l3M0y9YHSLYi2n_JB7n7Pc777_47-icfaxstJemT0IC81w.akkq1EBxzWkBr4vEomSpWA',
            );

            $response = $sdk->endToEndEncryption->testToken(
                e2EEToken: $e2EEToken,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /end-to-end-keys:
    post:
      operationId: generateEndToEndKey
      description: Generates a public key used to create a JWE token for passing secure authentication data through non-PCI compliant intermediaries.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_513
                  - kty
                properties: &ref_514
                  kty:
                    type: string
                    description: The cryptographic algorithm family used with the key (e.g., 'RSA', 'EC', 'oct').
                  use:
                    type: string
                    enum:
                      - sig
                      - enc
                    description: The intended use of the key. 'sig' for signature, 'enc' for encryption.
                  key_ops:
                    type: array
                    items:
                      type: string
                    description: The permitted operations for the key, e.g., 'sign', 'verify', 'encrypt', 'decrypt'.
                  alg:
                    type: string
                    description: The algorithm intended for use with the key, e.g., 'RS256' or 'ES256'.
                  kid:
                    type: string
                    description: A unique identifier for the key.
                  crv:
                    type: string
                    description: |-
                      The curve for Elliptic Curve keys, e.g., 'P-256', 'P-384', or 'P-521'.

                      This field is required when `kty` is 'EC'.
                  x:
                    type: string
                    description: |-
                      The x coordinate for Elliptic Curve keys.

                      This field is required when `kty` is 'EC'.
                  'y':
                    type: string
                    description: |-
                      The y coordinate for Elliptic Curve keys.

                      This field is required when `kty` is 'EC'.
                  'n':
                    type: string
                    description: |-
                      The modulus value for RSA keys.

                      This field is required when `kty` is 'RSA'.
                  e:
                    type: string
                    description: |-
                      The exponent value for RSA keys.

                      This field is required when `kty` is 'RSA'.
                description: Describes an [RFC7517](https://datatracker.ietf.org/doc/html/rfc7517) web key.
                example: &ref_515
                  use: enc
                  kty: EC
                  kid: bOaoOIgm-7dI_gBIvsr0jQrPyYp6H_od0Ok-hSYZQ-g=
                  crv: P-521
                  alg: ECDH-ES+A256KW
                  x: ABcm3wzKpPzYYwjDC0HSrxxVM3ULbuMDUuzkR5wNciaMHkZvQ02gLFdqTL65evV7EWaQyC7zRc28eW20p5MVDdQr
                  'y': AVa-eQsoiltOcQYy1QEcrQ9NbWktl_D4ewfg8diOZ2_svLEgEu4T1PqNcLbBGozP_VqPkXOMwNCUNI7pxajVGiIP
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - End to End Encryption
      x-speakeasy-name-override: generateKey
      x-speakeasy-group: endToEndEncryption
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.end_to_end_encryption.generate_key()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.endToEndEncryption.generateKey({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GenerateEndToEndKeyResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GenerateEndToEndKeyResponse res = sdk.endToEndEncryption().generateKey()
                            .call();

                    if (res.jsonWebKey().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->endToEndEncryption->generateKey(
                xMoovVersion: 'v2024.01.00'
            );

            if ($response->jsonWebKey !== null) {
                // handle response
            }
  /enrichment/address:
    get:
      operationId: getEnrichmentAddress
      description: |-
        Fetch enriched address suggestions. Requires a partial address. 
          
        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/profile-enrichment.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: search
          in: query
          required: true
          description: Partial or complete address to search.
          schema: &ref_284
            type: string
          explode: false
        - name: maxResults
          in: query
          required: false
          description: Maximum number of results to return.
          schema: &ref_278
            type: integer
          explode: false
        - name: includeCities
          in: query
          required: false
          description: Limits results to a list of given cities.
          schema: &ref_275
            type: string
          explode: false
        - name: includeStates
          in: query
          required: false
          description: Limits results to a list of given states.
          schema: &ref_276
            type: string
          explode: false
        - name: includeZipcodes
          in: query
          required: false
          description: Limits results to a list of given zipcodes.
          schema: &ref_277
            type: string
          explode: false
        - name: excludeStates
          in: query
          required: false
          description: Exclude list of states from results. No `include` pararmeters may be used with this parameter.
          schema: &ref_274
            type: string
          explode: false
        - name: preferCities
          in: query
          required: false
          description: Display results with the listed cities at the top.
          schema: &ref_279
            type: string
          explode: false
        - name: preferStates
          in: query
          required: false
          description: Display results with the listed states at the top.
          schema: &ref_282
            type: string
          explode: false
        - name: preferZipcodes
          in: query
          required: false
          description: Display results with the listed zipcodes at the top.
          schema: &ref_283
            type: string
          explode: false
        - name: preferRatio
          in: query
          required: false
          description: Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.
          schema: &ref_281
            type: integer
          explode: false
        - name: preferGeolocation
          in: query
          required: false
          description: |2-
              If omitted or set to `city`, it uses the sender's IP address to determine location, then automatically adds the city and state 
              to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is 
              not set to `none`, you may see addresses from areas you do not wish to see.
          schema: &ref_280
            type: string
          explode: false
        - name: selected
          in: query
          required: false
          description: Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).
          schema: &ref_285
            type: string
          explode: false
        - name: source
          in: query
          required: false
          description: Include results from alternate data sources. Allowed values are `all` (non-postal addresses), or `postal` (postal addresses only).
          schema: &ref_286
            type: string
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_456
                  - suggestions
                properties: &ref_457
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties: &ref_345
                        addressLine1:
                          type: string
                        addressLine2:
                          type: string
                        city:
                          type: string
                        entries:
                          type: integer
                          description: The number of units at an address. For example the number of apartments or businesses in a building.
                        postalCode:
                          type: string
                        stateOrProvince:
                          type: string
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Enriched address
      x-speakeasy-name-override: get
      x-speakeasy-group: enrichment.address
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.enriched_address.get(search="<value>")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.enrichedAddress.get({
                search: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetEnrichmentAddressRequest;
            import io.moov.sdk.models.operations.GetEnrichmentAddressResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetEnrichmentAddressRequest req = GetEnrichmentAddressRequest.builder()
                            .search("<value>")
                            .build();

                    GetEnrichmentAddressResponse res = sdk.enrichedAddress().get()
                            .request(req)
                            .call();

                    if (res.enrichedAddressResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\GetEnrichmentAddressRequest(
                search: '<value>',
            );

            $response = $sdk->enrichment->address->get(
                request: $request
            );

            if ($response->enrichedAddressResponse !== null) {
                // handle response
            }
  /enrichment/profile:
    get:
      operationId: getEnrichmentProfile
      description: |-
        Fetch enriched profile data. Requires a valid email address. This service is offered in collaboration with Clearbit. 

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/profile-enrichment.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: email
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_459
                  business:
                    type: object
                    properties: &ref_458
                      address:
                        type: object
                        required: *ref_0
                        properties: *ref_1
                      email:
                        type: string
                        maxLength: 255
                        format: email
                        example: jordan.lee@classbooker.dev
                      industryCodes:
                        type: object
                        properties: &ref_464
                          naics:
                            type: string
                            minLength: 2
                            maxLength: 6
                            example: '713940'
                          sic:
                            type: string
                            minLength: 4
                            maxLength: 4
                            example: '7991'
                      legalBusinessName:
                        type: string
                      phone:
                        type: object
                        properties: *ref_2
                      website:
                        type: string
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Enriched profile
      x-speakeasy-name-override: get
      x-speakeasy-group: enrichedProfile
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.enriched_profile.get(email="Keeley_Lebsack@hotmail.com")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.enrichedProfile.get({
                email: "Keeley_Lebsack@hotmail.com",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetEnrichmentProfileResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetEnrichmentProfileResponse res = sdk.enrichedProfile().get()
                            .email("Keeley_Lebsack@hotmail.com")
                            .call();

                    if (res.enrichedBusinessResponse().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->enrichedProfile->get(
                email: 'Keeley_Lebsack@hotmail.com',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->enrichedBusinessResponse !== null) {
                // handle response
            }
  /industries:
    get:
      operationId: listIndustries
      description: |-
        Returns a list of all industry titles and their corresponding MCC/SIC/NAICS codes. Results are ordered by title.    

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/profile-enrichment.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_460
                  - industries
                properties: &ref_461
                  industries:
                    type: array
                    items:
                      type: object
                      required: &ref_462
                        - title
                        - naics
                        - sic
                        - mcc
                      properties: &ref_463
                        title:
                          type: string
                          example: AC, Refrigeration Repair
                        naics:
                          type: string
                          maxLength: 6
                          description: North American Industry Classification System
                          example: '811412'
                        sic:
                          type: string
                          maxLength: 4
                          description: Standard Industrial Classification
                          example: '7623'
                        mcc:
                          type: string
                          maxLength: 4
                          description: Merchant Category Code
                          example: '7623'
                      description: An industry's MCC/SIC/NAICS codes, along with descriptive title.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Industries
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.industries.list()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.industries.list({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListIndustriesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListIndustriesResponse res = sdk.industries().list()
                            .call();

                    if (res.enrichedIndustries().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->industries->list(
                xMoovVersion: 'v2024.01.00'
            );

            if ($response->enrichedIndustries !== null) {
                // handle response
            }
  /institutions/ach/search:
    get:
      operationId: listInstitutions
      description: |-
        Search for institutions by either their name or routing number.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/fed.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: name
          in: query
          required: false
          description: Name of the financial institution. Either `name` or `routingNumber` is required.
          schema: &ref_288
            type: string
          explode: false
        - name: routingNumber
          in: query
          required: false
          description: Routing number for a financial institution. Either `routingNumber` or `name` is required.
          schema: &ref_289
            type: string
          explode: false
        - name: state
          in: query
          required: false
          description: The state where a financial institution is based.
          schema: &ref_290
            type: string
          explode: false
        - name: limit
          in: query
          required: false
          description: Maximum results returned by a search.
          schema: &ref_287
            type: integer
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_484
                  - achParticipants
                properties: &ref_485
                  achParticipants:
                    type: array
                    items:
                      type: object
                      required: &ref_340
                        - achLocation
                        - customerName
                        - newRoutingNumber
                        - officeCode
                        - phoneNumber
                        - recordTypeCode
                        - revised
                        - routingNumber
                        - servicingFRBNumber
                        - statusCode
                        - viewCode
                        - cleanName
                        - logo
                      properties: &ref_341
                        achLocation:
                          type: object
                          required: &ref_338
                            - address
                            - city
                            - postalCode
                            - postalCodeExtension
                            - state
                          properties: &ref_339
                            address:
                              type: string
                              maxLength: 32
                              example: 123 Main Street
                            city:
                              type: string
                              maxLength: 24
                              example: Boulder
                            postalCode:
                              type: string
                              maxLength: 5
                              example: '80301'
                            postalCodeExtension:
                              type: string
                              maxLength: 4
                              example: '0000'
                            state:
                              type: string
                              maxLength: 24
                              example: Colorado
                        customerName:
                          type: string
                          example: Main Street Bank
                        newRoutingNumber:
                          type: string
                          maxLength: 9
                          example: '987654321'
                        officeCode:
                          type: string
                          example: '0'
                        phoneNumber:
                          type: string
                          example: '1234567789'
                        recordTypeCode:
                          type: string
                          example: '1'
                        revised:
                          type: string
                          example: '041921'
                        routingNumber:
                          type: string
                          maxLength: 9
                          example: '123456789'
                        servicingFRBNumber:
                          type: string
                          example: '123456789'
                        statusCode:
                          type: string
                          example: '1'
                        viewCode:
                          type: string
                          example: '1'
                        cleanName:
                          type: string
                          example: Main Street Bank
                        logo:
                          type: object
                          allOf:
                            - type: object
                              required: &ref_501
                                - name
                                - url
                              properties: &ref_502
                                name:
                                  type: string
                                url:
                                  type: string
                          nullable: true
                          example:
                            name: Main Street Bank
                            url: https://www.mainstreetbank.com/logo.png
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Institutions
      x-speakeasy-name-override: search
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.institutions.search()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.institutions.search({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.ListInstitutionsRequest;
            import io.moov.sdk.models.operations.ListInstitutionsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListInstitutionsRequest req = ListInstitutionsRequest.builder()
                            .build();

                    ListInstitutionsResponse res = sdk.institutions().search()
                            .request(req)
                            .call();

                    if (res.financialInstitutions().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListInstitutionsRequest();

            $response = $sdk->institutions->search(
                request: $request
            );

            if ($response->financialInstitutions !== null) {
                // handle response
            }
  /issuing/{accountID}/authorizations:
    get:
      operationId: listIssuedCardAuthorizations
      description: |-
        List issued card authorizations associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which cards have been issued.
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: issuedCardID
          in: query
          required: false
          description: Optional ID of the issued card to filter results.
          schema: &ref_292
            type: string
            format: uuid
          explode: false
        - name: startDateTime
          in: query
          required: false
          description: Optional date-time which inclusively filters all authorizations created after this date-time.
          schema: &ref_293
            type: string
            format: date-time
          explode: false
        - name: endDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all authorizations created before this date-time.
          schema: &ref_291
            type: string
            format: date-time
          explode: false
        - name: statuses
          in: query
          required: false
          description: Optional, comma-separated statuses of the authorization to filter results.
          schema: &ref_294
            type: array
            items:
              type: string
              enum: &ref_221
                - pending
                - declined
                - canceled
                - cleared
                - expired
              description: Status of a card issuing authorization.
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_222
                    - authorizationID
                    - issuedCardID
                    - fundingWalletID
                    - network
                    - authorizedAmount
                    - status
                    - merchantData
                    - createdOn
                  properties: &ref_223
                    authorizationID:
                      type: string
                      format: uuid
                    issuedCardID:
                      type: string
                      format: uuid
                    fundingWalletID:
                      type: string
                      format: uuid
                    network:
                      type: string
                      enum: &ref_378
                        - discover
                        - shazam
                        - visa
                      description: The name of the network a card transaction is routed through.
                    authorizedAmount:
                      type: string
                      format: ^\d+\.\d{1,2}$
                      description: A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
                      example: '-14.89'
                    status:
                      type: string
                      enum: *ref_221
                      description: Status of a card issuing authorization.
                    merchantData:
                      type: object
                      properties: &ref_224
                        networkID:
                          type: string
                          description: External identifier used to identify the merchant with the card brand.
                        name:
                          type: string
                          description: Name of the merchant.
                          example: Whole Body Fitness
                        city:
                          type: string
                          description: The merchant's location.
                          example: San Francisco
                        country:
                          type: string
                          description: Two-letter country code.
                          example: US
                        postalCode:
                          type: string
                          description: The merchant's five-digit postal code.
                          example: '94107'
                        state:
                          type: string
                          description: The merchant's two-letter state abbreviation.
                          example: CA
                        mcc:
                          type: string
                          description: The Merchant Category Code.
                          example: '7298'
                    createdOn:
                      type: string
                      format: date-time
                    cardTransactions:
                      type: array
                      items:
                        type: string
                      description: List of card transaction IDs associated with this authorization.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Issuing transactions
      x-speakeasy-name-override: listAuthorizations
      x-speakeasy-group: issuingTransactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.issuing_transactions.list_authorizations(account_id="c2c85e2d-634b-4cc0-8c5b-763c22a727b6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.issuingTransactions.listAuthorizations({
                accountID: "c2c85e2d-634b-4cc0-8c5b-763c22a727b6",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListIssuedCardAuthorizationsRequest;
            import io.moov.sdk.models.operations.ListIssuedCardAuthorizationsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListIssuedCardAuthorizationsRequest req = ListIssuedCardAuthorizationsRequest.builder()
                            .accountID("c2c85e2d-634b-4cc0-8c5b-763c22a727b6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListIssuedCardAuthorizationsResponse res = sdk.issuingTransactions().listAuthorizations()
                            .request(req)
                            .call();

                    if (res.issuedCardAuthorizations().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListIssuedCardAuthorizationsRequest(
                accountID: 'c2c85e2d-634b-4cc0-8c5b-763c22a727b6',
                skip: 60,
                count: 20,
            );

            $response = $sdk->issuingTransactions->listAuthorizations(
                request: $request
            );

            if ($response->issuedCardAuthorizations !== null) {
                // handle response
            }
  /issuing/{accountID}/authorizations/{authorizationID}:
    get:
      operationId: getIssuedCardAuthorization
      description: |-
        Retrieves details of an authorization associated with a specific Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which cards have been issued.
          schema:
            type: string
            format: uuid
        - name: authorizationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_222
                properties: *ref_223
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Issuing transactions
      x-speakeasy-name-override: getAuthorization
      x-speakeasy-group: issuingTransactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.issuing_transactions.get_authorization(account_id="7fe28e4d-1e30-4ebb-8d22-aae768170b82", authorization_id="8db4b0c4-d99d-4878-bcde-c2700f82e331")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.issuingTransactions.getAuthorization({
                accountID: "7fe28e4d-1e30-4ebb-8d22-aae768170b82",
                authorizationID: "8db4b0c4-d99d-4878-bcde-c2700f82e331",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetIssuedCardAuthorizationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetIssuedCardAuthorizationResponse res = sdk.issuingTransactions().getAuthorization()
                            .accountID("7fe28e4d-1e30-4ebb-8d22-aae768170b82")
                            .authorizationID("8db4b0c4-d99d-4878-bcde-c2700f82e331")
                            .call();

                    if (res.issuedCardAuthorization().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->issuingTransactions->getAuthorization(
                accountID: '7fe28e4d-1e30-4ebb-8d22-aae768170b82',
                authorizationID: '8db4b0c4-d99d-4878-bcde-c2700f82e331',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->issuedCardAuthorization !== null) {
                // handle response
            }
  /issuing/{accountID}/authorizations/{authorizationID}/events:
    get:
      operationId: listIssuedCardAuthorizationEvents
      description: |-
        List card network and Moov platform events that affect the authorization and its hold on a wallet balance.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which cards have been issued.
          schema:
            type: string
            format: uuid
        - name: authorizationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_503
                    - eventID
                    - eventType
                    - amount
                    - result
                    - createdOn
                  properties: &ref_504
                    eventID:
                      type: string
                      format: uuid
                      description: The identifier for this event. Use the `eventType` field to determine what resource is identified by this ID (`authorization`, `reversal`, etc.).
                    eventType:
                      type: string
                      enum: &ref_506
                        - authorization
                        - reversal
                        - authorization-advice
                        - authorization-expiration
                        - authorization-incremental
                        - clearing
                      description: The type of event that occurred on the card.
                    amount:
                      type: string
                      format: ^\d+\.\d{1,2}$
                      description: A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
                      example: '-14.89'
                    result:
                      type: string
                      enum: &ref_505
                        - approved
                        - declined
                        - processed
                      description: The result of an event.
                    createdOn:
                      type: string
                      format: date-time
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Issuing transactions
      x-speakeasy-name-override: listAuthorizationEvents
      x-speakeasy-group: issuingTransactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.issuing_transactions.list_authorization_events(account_id="e52b1b82-54cb-42aa-911b-6359b8490650", authorization_id="f1a90d72-3787-49c4-a11d-9e7efe0b3763", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.issuingTransactions.listAuthorizationEvents({
                accountID: "e52b1b82-54cb-42aa-911b-6359b8490650",
                authorizationID: "f1a90d72-3787-49c4-a11d-9e7efe0b3763",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListIssuedCardAuthorizationEventsRequest;
            import io.moov.sdk.models.operations.ListIssuedCardAuthorizationEventsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListIssuedCardAuthorizationEventsRequest req = ListIssuedCardAuthorizationEventsRequest.builder()
                            .accountID("e52b1b82-54cb-42aa-911b-6359b8490650")
                            .authorizationID("f1a90d72-3787-49c4-a11d-9e7efe0b3763")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListIssuedCardAuthorizationEventsResponse res = sdk.issuingTransactions().listAuthorizationEvents()
                            .request(req)
                            .call();

                    if (res.issuedCardAuthorizationEvents().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListIssuedCardAuthorizationEventsRequest(
                accountID: 'e52b1b82-54cb-42aa-911b-6359b8490650',
                authorizationID: 'f1a90d72-3787-49c4-a11d-9e7efe0b3763',
                skip: 60,
                count: 20,
            );

            $response = $sdk->issuingTransactions->listAuthorizationEvents(
                request: $request
            );

            if ($response->issuedCardAuthorizationEvents !== null) {
                // handle response
            }
  /issuing/{accountID}/card-transactions:
    get:
      operationId: listIssuedCardTransactions
      description: |-
        List issued card transactions associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which cards have been issued.
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: issuedCardID
          in: query
          required: false
          description: Optional ID of the issued card to filter results.
          schema: &ref_296
            type: string
            format: uuid
          explode: false
        - name: startDateTime
          in: query
          required: false
          description: Optional date-time which inclusively filters all card transactions created after this date-time.
          schema: &ref_297
            type: string
            format: date-time
          explode: false
        - name: endDateTime
          in: query
          required: false
          description: Optional date-time which exclusively filters all card transactions created before this date-time.
          schema: &ref_295
            type: string
            format: date-time
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_225
                    - cardTransactionID
                    - issuedCardID
                    - fundingWalletID
                    - amount
                    - authorizedOn
                    - merchantData
                    - createdOn
                  properties: &ref_226
                    cardTransactionID:
                      type: string
                      format: uuid
                    issuedCardID:
                      type: string
                      format: uuid
                    fundingWalletID:
                      type: string
                      format: uuid
                    amount:
                      type: string
                      format: ^\d+\.\d{1,2}$
                      description: A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
                      example: '-14.89'
                    authorizationID:
                      type: string
                      format: uuid
                    authorizedOn:
                      type: string
                      format: date-time
                    merchantData:
                      type: object
                      properties: *ref_224
                    createdOn:
                      type: string
                      format: date-time
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Issuing transactions
      x-speakeasy-name-override: list
      x-speakeasy-group: issuingTransactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.issuing_transactions.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.issuingTransactions.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListIssuedCardTransactionsRequest;
            import io.moov.sdk.models.operations.ListIssuedCardTransactionsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListIssuedCardTransactionsRequest req = ListIssuedCardTransactionsRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListIssuedCardTransactionsResponse res = sdk.issuingTransactions().list()
                            .request(req)
                            .call();

                    if (res.issuedCardTransactions().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListIssuedCardTransactionsRequest(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                skip: 60,
                count: 20,
            );

            $response = $sdk->issuingTransactions->list(
                request: $request
            );

            if ($response->issuedCardTransactions !== null) {
                // handle response
            }
  /issuing/{accountID}/card-transactions/{cardTransactionID}:
    get:
      operationId: getIssuedCardTransaction
      description: |-
        Retrieves details of an issued card transaction associated with a specific Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which cards have been issued.
          schema:
            type: string
            format: uuid
        - name: cardTransactionID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_225
                properties: *ref_226
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Issuing transactions
      x-speakeasy-name-override: get
      x-speakeasy-group: transactions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.issuing_transactions.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", card_transaction_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.issuingTransactions.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                cardTransactionID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetIssuedCardTransactionResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetIssuedCardTransactionResponse res = sdk.issuingTransactions().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .cardTransactionID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.issuedCardTransaction().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->transactions->get(
                accountID: 'b888f774-3e7c-4135-a18c-6b985523c4bc',
                cardTransactionID: 'e50f7622-81da-484b-9c66-1c8a99c6b71b',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->issuedCardTransaction !== null) {
                // handle response
            }
  /issuing/{accountID}/issued-cards:
    post:
      operationId: requestCard
      description: |-
        Request a virtual card be issued.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which the card is to be issued.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_231
                  - issuedCardID
                  - brand
                  - lastFourCardNumber
                  - expiration
                  - authorizedUser
                  - fundingWalletID
                  - state
                  - formFactor
                  - createdOn
                properties: &ref_232
                  issuedCardID:
                    type: string
                    format: uuid
                  brand:
                    type: string
                    enum: *ref_57
                    description: The card brand.
                    example: Visa
                  lastFourCardNumber:
                    type: string
                  expiration:
                    type: object
                    required: *ref_59
                    properties: *ref_60
                    description: The expiration date of the card or token.
                    example: *ref_61
                  authorizedUser:
                    type: object
                    required: &ref_234
                      - firstName
                      - lastName
                    properties: &ref_235
                      firstName:
                        type: string
                      lastName:
                        type: string
                    description: Fields for identifying an authorized individual.
                  memo:
                    type: string
                    description: Optional descriptor for the card.
                  fundingWalletID:
                    type: string
                    description: Unique identifier for the wallet funding the card.
                  state:
                    type: string
                    enum: &ref_230
                      - active
                      - inactive
                      - pending-verification
                      - closed
                    description: |-
                      The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.

                      - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
                      - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
                      - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
                      - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
                  formFactor:
                    type: string
                    enum: &ref_228
                      - virtual
                    description: Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
                  controls:
                    type: object
                    properties: &ref_229
                      singleUse:
                        type: boolean
                        description: Indicates if the card is single-use. If true, the card closes after the first authorization.
                      velocityLimits:
                        type: array
                        items:
                          type: object
                          required: &ref_510
                            - amount
                            - interval
                          properties: &ref_511
                            amount:
                              type: integer
                              format: int64
                              description: The maximum amount in cents that can be spent in a given interval.
                              example: 10000
                            interval:
                              type: string
                              enum: &ref_509
                                - per-transaction
                              description: Specifies the time frame for the velocity limit. Currently supports only per-transaction limits.
                        description: Sets the spending limit per time interval. Only one limit per interval is supported.
                  createdOn:
                    type: string
                    format: date-time
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_613
                  fundingWalletID:
                    type: string
                  formFactor:
                    type: string
                  authorizedUser:
                    type: object
                    properties: &ref_233
                      firstName:
                        type: string
                      lastName:
                        type: string
                      birthDate:
                        type: object
                        properties: *ref_227
                  memo:
                    type: string
                  expiration:
                    type: object
                    properties: &ref_377
                      month:
                        type: string
                      year:
                        type: string
                  controls:
                    type: object
                    properties: &ref_507
                      velocityLimits:
                        type: object
                        additionalProperties:
                          type: object
                          properties: &ref_512
                            amount:
                              type: string
                            interval:
                              type: string
                    example: &ref_508
                      velocityLimits:
                        '0':
                          amount: must be no less than 1
                          interval: must be a valid value
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Card issuing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_611
                - fundingWalletID
                - authorizedUser
                - formFactor
              properties: &ref_612
                fundingWalletID:
                  type: string
                  format: uuid
                authorizedUser:
                  type: object
                  required: &ref_401
                    - firstName
                    - lastName
                  properties: &ref_402
                    firstName:
                      type: string
                    lastName:
                      type: string
                    birthDate:
                      type: object
                      required: *ref_138
                      properties: *ref_139
                  description: Fields for identifying an authorized individual.
                formFactor:
                  type: string
                  enum: *ref_228
                  description: Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
                memo:
                  type: string
                  description: An optional descriptive name for the card.
                expiration:
                  type: object
                  required: *ref_59
                  properties: *ref_60
                  description: The expiration date of the card or token.
                  example: *ref_61
                controls:
                  type: object
                  properties: *ref_229
      x-speakeasy-name-override: request
      x-speakeasy-group: cardIssuing
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.card_issuing.request(account_id="bd26796d-dd52-401c-9686-e370e79ebc50", funding_wallet_id="32613610-de25-446e-8662-ec2709ffea9d", authorized_user={
                    "first_name": "Leta",
                    "last_name": "Satterfield",
                    "birth_date": {
                        "day": 9,
                        "month": 11,
                        "year": 1989,
                    },
                }, form_factor=components.IssuedCardFormFactor.VIRTUAL, expiration={
                    "month": "01",
                    "year": "21",
                }, controls={
                    "velocity_limits": [
                        {
                            "amount": 10000,
                            "interval": components.IssuingIntervalLimit.PER_TRANSACTION,
                        },
                        {
                            "amount": 10000,
                            "interval": components.IssuingIntervalLimit.PER_TRANSACTION,
                        },
                        {
                            "amount": 10000,
                            "interval": components.IssuingIntervalLimit.PER_TRANSACTION,
                        },
                    ],
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cardIssuing.request({
                accountID: "bd26796d-dd52-401c-9686-e370e79ebc50",
                requestCard: {
                  fundingWalletID: "32613610-de25-446e-8662-ec2709ffea9d",
                  authorizedUser: {
                    firstName: "Leta",
                    lastName: "Satterfield",
                    birthDate: {
                      day: 9,
                      month: 11,
                      year: 1989,
                    },
                  },
                  formFactor: "virtual",
                  expiration: {
                    month: "01",
                    year: "21",
                  },
                  controls: {
                    velocityLimits: [
                      {
                        amount: 10000,
                        interval: "per-transaction",
                      },
                      {
                        amount: 10000,
                        interval: "per-transaction",
                      },
                      {
                        amount: 10000,
                        interval: "per-transaction",
                      },
                    ],
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.RequestCardError;
            import io.moov.sdk.models.operations.RequestCardResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, RequestCardError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RequestCardResponse res = sdk.cardIssuing().request()
                            .accountID("bd26796d-dd52-401c-9686-e370e79ebc50")
                            .requestCard(RequestCard.builder()
                                .fundingWalletID("32613610-de25-446e-8662-ec2709ffea9d")
                                .authorizedUser(CreateAuthorizedUser.builder()
                                    .firstName("Leta")
                                    .lastName("Satterfield")
                                    .birthDate(BirthDate.builder()
                                        .day(9L)
                                        .month(11L)
                                        .year(1989L)
                                        .build())
                                    .build())
                                .formFactor(IssuedCardFormFactor.VIRTUAL)
                                .expiration(CardExpiration.builder()
                                    .month("01")
                                    .year("21")
                                    .build())
                                .controls(IssuingControls.builder()
                                    .velocityLimits(List.of(
                                        IssuingVelocityLimit.builder()
                                            .amount(10000L)
                                            .interval(IssuingIntervalLimit.PER_TRANSACTION)
                                            .build(),
                                        IssuingVelocityLimit.builder()
                                            .amount(10000L)
                                            .interval(IssuingIntervalLimit.PER_TRANSACTION)
                                            .build(),
                                        IssuingVelocityLimit.builder()
                                            .amount(10000L)
                                            .interval(IssuingIntervalLimit.PER_TRANSACTION)
                                            .build()))
                                    .build())
                                .build())
                            .call();

                    if (res.issuedCard().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $requestCard = new Components\RequestCard(
                fundingWalletID: '32613610-de25-446e-8662-ec2709ffea9d',
                authorizedUser: new Components\CreateAuthorizedUser(
                    firstName: 'Leta',
                    lastName: 'Satterfield',
                    birthDate: new Components\BirthDate(
                        day: 9,
                        month: 11,
                        year: 1989,
                    ),
                ),
                formFactor: Components\IssuedCardFormFactor::Virtual,
                expiration: new Components\CardExpiration(
                    month: '01',
                    year: '21',
                ),
                controls: new Components\IssuingControls(
                    velocityLimits: [
                        new Components\IssuingVelocityLimit(
                            amount: 10000,
                            interval: Components\IssuingIntervalLimit::PerTransaction,
                        ),
                    ],
                ),
            );

            $response = $sdk->cardIssuing->request(
                accountID: 'fbd26796-ddd5-4201-8c68-6e370e79ebc5',
                requestCard: $requestCard,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->issuedCard !== null) {
                // handle response
            }
    get:
      operationId: listIssuedCards
      description: |-
        List Moov issued cards existing for the account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which the cards have been issued.
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          required: false
          schema: *ref_81
          explode: false
        - name: count
          in: query
          required: false
          schema: *ref_82
          explode: false
        - name: states
          in: query
          required: false
          description: Optional, comma-separated states to filter the Moov list issued cards response. For example `active,pending-verification`
          schema:
            type: array
            items:
              type: string
              enum: *ref_230
              description: |-
                The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.

                - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
                - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
                - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
                - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_231
                  properties: *ref_232
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Card issuing
      x-speakeasy-name-override: list
      x-speakeasy-group: issuedCards
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.card_issuing.list(account_id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6", skip=60, count=20)

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cardIssuing.list({
                accountID: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
                skip: 60,
                count: 20,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListIssuedCardsRequest;
            import io.moov.sdk.models.operations.ListIssuedCardsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListIssuedCardsRequest req = ListIssuedCardsRequest.builder()
                            .accountID("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .skip(60L)
                            .count(20L)
                            .build();

                    ListIssuedCardsResponse res = sdk.cardIssuing().list()
                            .request(req)
                            .call();

                    if (res.issuedCards().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;
            use Moov\MoovPhp\Models\Operations;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $request = new Operations\ListIssuedCardsRequest(
                accountID: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                skip: 60,
                count: 20,
            );

            $response = $sdk->issuedCards->list(
                request: $request
            );

            if ($response->issuedCards !== null) {
                // handle response
            }
  /issuing/{accountID}/issued-cards/{issuedCardID}:
    get:
      operationId: getIssuedCard
      description: |-
        Retrieve a single issued card associated with a Moov account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which the card was issued.
          schema:
            type: string
            format: uuid
        - name: issuedCardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_231
                properties: *ref_232
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Card issuing
      x-speakeasy-name-override: getIssuedCard
      x-speakeasy-group: cardIssuing
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.card_issuing.get(account_id="b888f774-3e7c-4135-a18c-6b985523c4bc", issued_card_id="e50f7622-81da-484b-9c66-1c8a99c6b71b")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cardIssuing.get({
                accountID: "b888f774-3e7c-4135-a18c-6b985523c4bc",
                issuedCardID: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetIssuedCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetIssuedCardResponse res = sdk.cardIssuing().get()
                            .accountID("b888f774-3e7c-4135-a18c-6b985523c4bc")
                            .issuedCardID("e50f7622-81da-484b-9c66-1c8a99c6b71b")
                            .call();

                    if (res.issuedCard().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->cardIssuing->getIssuedCard(
                accountID: 'c63d9bae-2097-4bfa-8ac7-e9e8dff6e9ae',
                issuedCardID: 'aa0c86df-7f7d-4200-9ee4-24ba8870a7d4',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->issuedCard !== null) {
                // handle response
            }
    patch:
      operationId: updateIssuedCard
      description: |-
        Update a Moov issued card.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which the card was issued.
          schema:
            type: string
            format: uuid
        - name: issuedCardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_659
                  state:
                    type: string
                  memo:
                    type: string
                  authorizedUser:
                    type: object
                    properties: *ref_233
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Card issuing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: &ref_658
                state:
                  type: string
                  enum: *ref_230
                  description: |-
                    The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.

                    - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
                    - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
                    - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
                    - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
                memo:
                  type: string
                authorizedUser:
                  type: object
                  properties: &ref_403
                    firstName:
                      type: string
                    lastName:
                      type: string
                    birthDate:
                      type: object
                      properties: *ref_142
                  description: Fields for identifying an authorized individual.
      x-speakeasy-name-override: update
      x-speakeasy-group: cardIssuing
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.card_issuing.update(account_id="d95fa7f0-e743-42ce-b47c-b60cc78135dd", issued_card_id="b85898c1-25a1-4907-a1c5-562af6646dad", authorized_user={
                    "birth_date": {
                        "day": 9,
                        "month": 11,
                        "year": 1989,
                    },
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cardIssuing.update({
                accountID: "d95fa7f0-e743-42ce-b47c-b60cc78135dd",
                issuedCardID: "b85898c1-25a1-4907-a1c5-562af6646dad",
                updateIssuedCard: {
                  authorizedUser: {
                    birthDate: {
                      day: 9,
                      month: 11,
                      year: 1989,
                    },
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.UpdateIssuedCardError;
            import io.moov.sdk.models.operations.UpdateIssuedCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, UpdateIssuedCardError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    UpdateIssuedCardResponse res = sdk.cardIssuing().update()
                            .accountID("d95fa7f0-e743-42ce-b47c-b60cc78135dd")
                            .issuedCardID("b85898c1-25a1-4907-a1c5-562af6646dad")
                            .updateIssuedCard(UpdateIssuedCard.builder()
                                .authorizedUser(CreateAuthorizedUserUpdate.builder()
                                    .birthDate(BirthDateUpdate.builder()
                                        .day(9L)
                                        .month(11L)
                                        .year(1989L)
                                        .build())
                                    .build())
                                .build())
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $updateIssuedCard = new Components\UpdateIssuedCard(
                authorizedUser: new Components\CreateAuthorizedUserUpdate(
                    birthDate: new Components\BirthDateUpdate(
                        day: 9,
                        month: 11,
                        year: 1989,
                    ),
                ),
            );

            $response = $sdk->cardIssuing->update(
                accountID: 'd95fa7f0-e743-42ce-b47c-b60cc78135dd',
                issuedCardID: 'b85898c1-25a1-4907-a1c5-562af6646dad',
                updateIssuedCard: $updateIssuedCard,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /issuing/{accountID}/issued-cards/{issuedCardID}/details:
    get:
      operationId: getFullIssuedCard
      description: |-
        Get issued card with PAN, CVV, and expiration. 

        Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/issued-cards.read-secure` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: accountID
          in: path
          required: true
          description: The Moov business account for which the card was issued.
          schema:
            type: string
            format: uuid
        - name: issuedCardID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_487
                  - issuedCardID
                  - brand
                  - lastFourCardNumber
                  - expiration
                  - authorizedUser
                  - fundingWalletID
                  - state
                  - formFactor
                  - createdOn
                  - pan
                  - cvv
                properties: &ref_488
                  issuedCardID:
                    type: string
                    format: uuid
                  brand:
                    type: string
                    enum: *ref_57
                    description: The card brand.
                    example: Visa
                  lastFourCardNumber:
                    type: string
                  expiration:
                    type: object
                    required: *ref_59
                    properties: *ref_60
                    description: The expiration date of the card or token.
                    example: *ref_61
                  authorizedUser:
                    type: object
                    required: *ref_234
                    properties: *ref_235
                    description: Fields for identifying an authorized individual.
                  memo:
                    type: string
                    description: Optional descriptor for the card.
                  fundingWalletID:
                    type: string
                    description: Unique identifier for the wallet funding the card.
                  state:
                    type: string
                    enum: *ref_230
                    description: |-
                      The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.

                      - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
                      - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
                      - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
                      - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
                  formFactor:
                    type: string
                    enum: *ref_228
                    description: Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
                  controls:
                    type: object
                    properties: *ref_229
                  createdOn:
                    type: string
                    format: date-time
                  pan:
                    type: string
                    minLength: 16
                    maxLength: 19
                    description: The issued card's Primary Account Number (PAN)
                  cvv:
                    type: string
                    minLength: 3
                    maxLength: 4
                    description: The issued card's 3- or 4-digit Card Verification Value (CVV).
                description: The full details of an issued card, including PAN and CVV.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Card issuing
      x-speakeasy-name-override: getFull
      x-speakeasy-group: cardIssuing
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.card_issuing.get_full(account_id="04e9a1b9-0751-4f2d-b0d4-51e47b62623c", issued_card_id="13ddb970-c10a-44bb-a2e6-73beac428022")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.cardIssuing.getFull({
                accountID: "04e9a1b9-0751-4f2d-b0d4-51e47b62623c",
                issuedCardID: "13ddb970-c10a-44bb-a2e6-73beac428022",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetFullIssuedCardResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetFullIssuedCardResponse res = sdk.cardIssuing().getFull()
                            .accountID("04e9a1b9-0751-4f2d-b0d4-51e47b62623c")
                            .issuedCardID("13ddb970-c10a-44bb-a2e6-73beac428022")
                            .call();

                    if (res.fullIssuedCard().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->cardIssuing->getFull(
                accountID: '04e9a1b9-0751-4f2d-b0d4-51e47b62623c',
                issuedCardID: '13ddb970-c10a-44bb-a2e6-73beac428022',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->fullIssuedCard !== null) {
                // handle response
            }
  /oauth2/revoke:
    post:
      operationId: revokeAccessToken
      description: |-
        Revoke an auth token.

        Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_623
                  token:
                    type: string
                  token_type_hint:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_236
                - token
              properties: &ref_237
                token:
                  type: string
                  description: The access or refresh token to revoke.
                token_type_hint:
                  type: string
                  enum:
                    - access_token
                    - refresh_token
                  description: The type of token being revoked.
                client_id:
                  type: string
                  description: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
                  example: 5clTR_MdVrrkgxw2
                client_secret:
                  type: string
                  description: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
                  example: dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: *ref_236
              properties: *ref_237
      x-speakeasy-name-override: revokeToken
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.authentication.revoke_access_token(token="<value>", client_id="5clTR_MdVrrkgxw2", client_secret="dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.authentication.revokeAccessToken({
                token: "<value>",
                clientId: "5clTR_MdVrrkgxw2",
                clientSecret: "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.RevokeTokenRequest;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.RevokeTokenRequestError;
            import io.moov.sdk.models.operations.RevokeAccessTokenResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, RevokeTokenRequestError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RevokeAccessTokenResponse res = sdk.authentication().revokeAccessToken()
                            .revokeTokenRequest(RevokeTokenRequest.builder()
                                .token("<value>")
                                .clientId("5clTR_MdVrrkgxw2")
                                .clientSecret("dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-")
                                .build())
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $revokeTokenRequest = new Components\RevokeTokenRequest(
                token: '<value>',
                clientId: '5clTR_MdVrrkgxw2',
                clientSecret: 'dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-',
            );

            $response = $sdk->authentication->revokeToken(
                revokeTokenRequest: $revokeTokenRequest,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /oauth2/token:
    post:
      operationId: createAccessToken
      description: Create or refresh an access token.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_358
                  - token_type
                  - access_token
                  - refresh_token
                  - expires_in
                  - scope
                properties: &ref_359
                  token_type:
                    type: string
                    enum: &ref_641
                      - Bearer
                    description: An [RFC 6750](https://www.rfc-editor.org/rfc/rfc6750#section-6.1) token type.
                    example: Bearer
                  access_token:
                    type: string
                    maxLength: 4096
                    description: A value passed to the authorization server to gain access to the system.
                    example: eyJhbGciOiJFZERTQSIsImN0eSI6IkpXVCIsImtpZCI6IkR...
                  refresh_token:
                    type: string
                    maxLength: 4096
                    description: A value passed to the authorization server to obtain a new access token.
                    example: eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...
                  expires_in:
                    type: integer
                    format: int32
                    description: Unix timestamp indicating when this token expires.
                    example: 1736964352
                  scope:
                    type: string
                    description: A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
                    example: /accounts.read /accounts.write
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_360
                  scope:
                    type: string
                  refresh_token:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_238
                - grant_type
              properties: &ref_239
                grant_type:
                  type: string
                  enum: &ref_496
                    - client_credentials
                    - refresh_token
                  description: |-
                    The type of grant being requested.

                      - `client_credentials`: A grant type used by clients to obtain an access token
                      - `refresh_token`: A grant type used by clients to obtain a new access token using a refresh token
                client_id:
                  type: string
                  description: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
                  example: 5clTR_MdVrrkgxw2
                client_secret:
                  type: string
                  description: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
                  example: dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-
                scope:
                  type: string
                  description: A space delimited list of scopes. Required when `grant_type` is `client_credentials`.
                  example: /accounts.read /accounts.write
                refresh_token:
                  type: string
                  description: The refresh_token returned alongside the access token being refreshed. Required when `grant_type` is `refresh_token`.
                  example: eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: *ref_238
              properties: *ref_239
      x-speakeasy-name-override: createToken
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.authentication.create_access_token(grant_type=components.GrantType.CLIENT_CREDENTIALS, client_id="5clTR_MdVrrkgxw2", client_secret="dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-", scope="/accounts.read /accounts.write", refresh_token="eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.authentication.createAccessToken({
                grantType: "client_credentials",
                clientId: "5clTR_MdVrrkgxw2",
                clientSecret: "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
                scope: "/accounts.read /accounts.write",
                refreshToken: "eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.AuthTokenRequestError;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateAccessTokenResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, AuthTokenRequestError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateAccessTokenResponse res = sdk.authentication().createAccessToken()
                            .authTokenRequest(AuthTokenRequest.builder()
                                .grantType(GrantType.CLIENT_CREDENTIALS)
                                .clientId("5clTR_MdVrrkgxw2")
                                .clientSecret("dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-")
                                .scope("/accounts.read /accounts.write")
                                .refreshToken("eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...")
                                .build())
                            .call();

                    if (res.authToken().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $authTokenRequest = new Components\AuthTokenRequest(
                grantType: Components\GrantType::ClientCredentials,
                clientId: '5clTR_MdVrrkgxw2',
                clientSecret: 'dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-',
                scope: '/accounts.read /accounts.write',
                refreshToken: 'eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...',
            );

            $response = $sdk->authentication->createToken(
                authTokenRequest: $authTokenRequest,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->authToken !== null) {
                // handle response
            }
  /onboarding-invites:
    post:
      operationId: createOnboardingInvite
      description: |-
        Create an invitation containing a unique link that allows the recipient to onboard their organization with Moov.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: &ref_246
                  - code
                  - link
                  - scopes
                  - capabilities
                  - feePlanCodes
                  - createdOn
                properties: &ref_247
                  code:
                    type: string
                    description: A unique code that identifies an onboarding invite.
                    example: N1IA5eWYNh
                  link:
                    type: string
                    format: uri
                    description: A unique URL, including the invite code, that the recipient can follow to redeem the invitation.
                  returnURL:
                    type: string
                    description: The scopes requested by the inviter.
                  termsOfServiceURL:
                    type: string
                    description: The terms of service URL set by the inviter.
                  scopes:
                    type: array
                    items:
                      type: string
                      enum: &ref_245
                        - accounts.read
                        - accounts.write
                        - analytics.read
                        - apple-pay-merchant.read
                        - apple-pay-merchant.write
                        - apple-pay.read
                        - apple-pay.write
                        - bank-accounts.read
                        - bank-accounts.write
                        - capabilities.read
                        - capabilities.write
                        - cards.read
                        - cards.write
                        - documents.read
                        - documents.write
                        - fed.read
                        - files.read
                        - files.write
                        - issued-cards.read
                        - issued-cards.write
                        - issued-cards.read-secure
                        - payment-methods.read
                        - ping.read
                        - profile-enrichment.read
                        - profile.read
                        - profile.write
                        - profile.disconnect
                        - representatives.read
                        - representatives.write
                        - transfers.read
                        - transfers.write
                        - wallets.read
                      description: A permission that the application requests on another account.
                    minItems: 1
                    description: |-
                      List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
                      account. These values are used to determine what can be done with the account onboarded.
                    example:
                      - accounts.read
                  capabilities:
                    type: array
                    items:
                      type: string
                      enum: *ref_19
                      description: |-
                        Moov account capabilities.

                        The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
                    minItems: 1
                    description: |2-
                        List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
                        account. These values are used to determine what information to collect from the user during onboarding.
                    example:
                      - transfers
                  feePlanCodes:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: List of fee plan codes to assign the account created by the invitee.
                    example:
                      - merchant-direct
                  redeemedAccountID:
                    type: string
                    format: uuid
                    description: The account ID of the account that redeemed the invite.
                  prefill:
                    type: object
                    required: *ref_240
                    properties: *ref_241
                    example: *ref_242
                  partner:
                    type: object
                    required: &ref_554
                      - accountID
                      - accountMode
                      - displayName
                    properties: &ref_555
                      accountID:
                        type: string
                        format: uuid
                        description: The account ID of the partner that created the invite.
                      accountMode:
                        type: string
                        enum: *ref_16
                        description: The operating mode for an account.
                        example: production
                      displayName:
                        type: string
                        description: The name of the Moov account used to create the onboarding invite.
                        example: Bob's Widgets
                    description: The account that created the onboarding invite.
                  createdOn:
                    type: string
                    format: date-time
                  revokedOn:
                    type: string
                    format: date-time
                  redeemedOn:
                    type: string
                    format: date-time
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_551
                  returnURL:
                    type: string
                  termsOfServiceURL:
                    type: string
                  scopes:
                    type: object
                    additionalProperties: *ref_243
                    example: *ref_244
                  capabilities:
                    type: object
                    additionalProperties: *ref_243
                    example: *ref_244
                  feePlanCodes:
                    type: object
                    additionalProperties: *ref_243
                    example: *ref_244
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Onboarding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_552
                - scopes
                - capabilities
                - feePlanCodes
              properties: &ref_553
                returnURL:
                  type: string
                  format: uri
                  description: Optional URL to redirect the user to after they complete the onboarding process.
                termsOfServiceURL:
                  type: string
                  format: uri
                  description: Optional URL to your organization's terms of service.
                scopes:
                  type: array
                  items:
                    type: string
                    enum: *ref_245
                    description: A permission that the application requests on another account.
                  minItems: 1
                  description: |2-
                      List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
                      account. These values are used to determine what can be done with the account onboarded.
                  example:
                    - accounts.read
                capabilities:
                  type: array
                  items:
                    type: string
                    enum: *ref_19
                    description: |-
                      Moov account capabilities.

                      The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
                  minItems: 1
                  description: |2-
                      List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
                      account. These values are used to determine what information to collect from the user during onboarding.
                  example:
                    - transfers
                feePlanCodes:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  description: List of fee plan codes to assign the account created by the invitee.
                  example:
                    - merchant-direct
                prefill:
                  type: object
                  required: *ref_240
                  properties: *ref_241
                  example: *ref_242
              description: Request to create an onboarding invite.
      x-speakeasy-name-override: create
      x-speakeasy-group: onboardingInvites
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components
            from moovio_sdk.utils import parse_datetime


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.onboarding.create_invite(scopes=[
                    components.ApplicationScope.ACCOUNTS_READ,
                ], capabilities=[
                    components.CapabilityID.TRANSFERS,
                ], fee_plan_codes=[
                    "merchant-direct",
                ], prefill=components.CreateAccount(
                    account_type=components.CreateAccountType.BUSINESS,
                    profile=components.CreateProfile(
                        individual=components.CreateIndividualProfile(
                            name=components.IndividualName(
                                first_name="Jordan",
                                middle_name="Reese",
                                last_name="Lee",
                                suffix="Jr",
                            ),
                            phone=components.PhoneNumber(
                                number="8185551212",
                                country_code="1",
                            ),
                            email="jordan.lee@classbooker.dev",
                            address=components.Address(
                                address_line1="123 Main Street",
                                address_line2="Apt 302",
                                city="Boulder",
                                state_or_province="CO",
                                postal_code="80301",
                                country="US",
                            ),
                            birth_date=components.BirthDate(
                                day=9,
                                month=11,
                                year=1989,
                            ),
                        ),
                        business=components.CreateBusinessProfile(
                            legal_business_name="Classbooker, LLC",
                            business_type=components.BusinessType.LLC,
                            address=components.Address(
                                address_line1="123 Main Street",
                                address_line2="Apt 302",
                                city="Boulder",
                                state_or_province="CO",
                                postal_code="80301",
                                country="US",
                            ),
                            phone=components.PhoneNumber(
                                number="8185551212",
                                country_code="1",
                            ),
                            email="jordan.lee@classbooker.dev",
                            description="Local fitness gym paying out instructors",
                            tax_id=components.TaxID(
                                ein=components.Ein(
                                    number="12-3456789",
                                ),
                            ),
                            industry_codes=components.IndustryCodes(
                                naics="713940",
                                sic="7991",
                                mcc="7997",
                            ),
                        ),
                    ),
                    metadata={
                        "optional": "metadata",
                    },
                    terms_of_service=components.ManualTermsOfService(
                        accepted_date=parse_datetime("2024-12-17T23:29:29.246Z"),
                        accepted_ip="172.217.2.46",
                        accepted_user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
                        accepted_domain="https://odd-brace.biz/",
                    ),
                    customer_support=components.CustomerSupport(
                        phone=components.PhoneNumber(
                            number="8185551212",
                            country_code="1",
                        ),
                        email="jordan.lee@classbooker.dev",
                        address=components.Address(
                            address_line1="123 Main Street",
                            address_line2="Apt 302",
                            city="Boulder",
                            state_or_province="CO",
                            postal_code="80301",
                            country="US",
                        ),
                    ),
                    settings=components.Settings(
                        card_payment=components.CardPaymentSettings(
                            statement_descriptor="Whole Body Fitness",
                        ),
                        ach_payment=components.ACHPaymentSettings(
                            company_name="WholeBodyFitness",
                        ),
                    ),
                    mode=components.Mode.PRODUCTION,
                ))

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.onboarding.createInvite({
                scopes: [
                  "accounts.read",
                ],
                capabilities: [
                  "transfers",
                ],
                feePlanCodes: [
                  "merchant-direct",
                ],
                prefill: {
                  accountType: "business",
                  profile: {
                    individual: {
                      name: {
                        firstName: "Jordan",
                        middleName: "Reese",
                        lastName: "Lee",
                        suffix: "Jr",
                      },
                      phone: {
                        number: "8185551212",
                        countryCode: "1",
                      },
                      email: "jordan.lee@classbooker.dev",
                      address: {
                        addressLine1: "123 Main Street",
                        addressLine2: "Apt 302",
                        city: "Boulder",
                        stateOrProvince: "CO",
                        postalCode: "80301",
                        country: "US",
                      },
                      birthDate: {
                        day: 9,
                        month: 11,
                        year: 1989,
                      },
                    },
                    business: {
                      legalBusinessName: "Classbooker, LLC",
                      businessType: "llc",
                      address: {
                        addressLine1: "123 Main Street",
                        addressLine2: "Apt 302",
                        city: "Boulder",
                        stateOrProvince: "CO",
                        postalCode: "80301",
                        country: "US",
                      },
                      phone: {
                        number: "8185551212",
                        countryCode: "1",
                      },
                      email: "jordan.lee@classbooker.dev",
                      description: "Local fitness gym paying out instructors",
                      taxID: {
                        ein: {
                          number: "12-3456789",
                        },
                      },
                      industryCodes: {
                        naics: "713940",
                        sic: "7991",
                        mcc: "7997",
                      },
                    },
                  },
                  metadata: {
                    "optional": "metadata",
                  },
                  termsOfService: {
                    acceptedDate: new Date("2024-12-17T23:29:29.246Z"),
                    acceptedIP: "172.217.2.46",
                    acceptedUserAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
                    acceptedDomain: "https://odd-brace.biz/",
                  },
                  customerSupport: {
                    phone: {
                      number: "8185551212",
                      countryCode: "1",
                    },
                    email: "jordan.lee@classbooker.dev",
                    address: {
                      addressLine1: "123 Main Street",
                      addressLine2: "Apt 302",
                      city: "Boulder",
                      stateOrProvince: "CO",
                      postalCode: "80301",
                      country: "US",
                    },
                  },
                  settings: {
                    cardPayment: {
                      statementDescriptor: "Whole Body Fitness",
                    },
                    achPayment: {
                      companyName: "WholeBodyFitness",
                    },
                  },
                  mode: "production",
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.OnboardingInviteError;
            import io.moov.sdk.models.operations.CreateOnboardingInviteResponse;
            import java.lang.Exception;
            import java.time.OffsetDateTime;
            import java.util.List;
            import java.util.Map;

            public class Application {

                public static void main(String[] args) throws GenericError, OnboardingInviteError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateOnboardingInviteResponse res = sdk.onboarding().createInvite()
                            .onboardingInviteRequest(OnboardingInviteRequest.builder()
                                .scopes(List.of(
                                    ApplicationScope.ACCOUNTS_READ))
                                .capabilities(List.of(
                                    CapabilityID.TRANSFERS))
                                .feePlanCodes(List.of(
                                    "merchant-direct"))
                                .prefill(CreateAccount.builder()
                                    .accountType(CreateAccountType.BUSINESS)
                                    .profile(CreateProfile.builder()
                                        .individual(CreateIndividualProfile.builder()
                                            .name(IndividualName.builder()
                                                .firstName("Jordan")
                                                .lastName("Lee")
                                                .middleName("Reese")
                                                .suffix("Jr")
                                                .build())
                                            .phone(PhoneNumber.builder()
                                                .number("8185551212")
                                                .countryCode("1")
                                                .build())
                                            .email("jordan.lee@classbooker.dev")
                                            .address(Address.builder()
                                                .addressLine1("123 Main Street")
                                                .city("Boulder")
                                                .stateOrProvince("CO")
                                                .postalCode("80301")
                                                .country("US")
                                                .addressLine2("Apt 302")
                                                .build())
                                            .birthDate(BirthDate.builder()
                                                .day(9L)
                                                .month(11L)
                                                .year(1989L)
                                                .build())
                                            .build())
                                        .business(CreateBusinessProfile.builder()
                                            .legalBusinessName("Classbooker, LLC")
                                            .businessType(BusinessType.LLC)
                                            .address(Address.builder()
                                                .addressLine1("123 Main Street")
                                                .city("Boulder")
                                                .stateOrProvince("CO")
                                                .postalCode("80301")
                                                .country("US")
                                                .addressLine2("Apt 302")
                                                .build())
                                            .phone(PhoneNumber.builder()
                                                .number("8185551212")
                                                .countryCode("1")
                                                .build())
                                            .email("jordan.lee@classbooker.dev")
                                            .description("Local fitness gym paying out instructors")
                                            .taxID(TaxID.builder()
                                                .ein(Ein.builder()
                                                    .number("12-3456789")
                                                    .build())
                                                .build())
                                            .industryCodes(IndustryCodes.builder()
                                                .naics("713940")
                                                .sic("7991")
                                                .mcc("7997")
                                                .build())
                                            .build())
                                        .build())
                                    .metadata(Map.ofEntries(
                                        Map.entry("optional", "metadata")))
                                    .termsOfService(CreateAccountTermsOfService.of(ManualTermsOfService.builder()
                                        .acceptedDate(OffsetDateTime.parse("2024-12-17T23:29:29.246Z"))
                                        .acceptedIP("172.217.2.46")
                                        .acceptedUserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36")
                                        .acceptedDomain("https://odd-brace.biz/")
                                        .build()))
                                    .customerSupport(CustomerSupport.builder()
                                        .phone(PhoneNumber.builder()
                                            .number("8185551212")
                                            .countryCode("1")
                                            .build())
                                        .email("jordan.lee@classbooker.dev")
                                        .address(Address.builder()
                                            .addressLine1("123 Main Street")
                                            .city("Boulder")
                                            .stateOrProvince("CO")
                                            .postalCode("80301")
                                            .country("US")
                                            .addressLine2("Apt 302")
                                            .build())
                                        .build())
                                    .settings(Settings.builder()
                                        .cardPayment(CardPaymentSettings.builder()
                                            .statementDescriptor("Whole Body Fitness")
                                            .build())
                                        .achPayment(ACHPaymentSettings.builder()
                                            .companyName("WholeBodyFitness")
                                            .build())
                                        .build())
                                    .mode(Mode.PRODUCTION)
                                    .build())
                                .build())
                            .call();

                    if (res.onboardingInvite().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $onboardingInviteRequest = new Components\OnboardingInviteRequest(
                scopes: [
                    Components\ApplicationScope::AccountsRead,
                ],
                capabilities: [
                    Components\CapabilityID::Transfers,
                ],
                feePlanCodes: [
                    'merchant-direct',
                ],
                prefill: new Components\CreateAccount(
                    accountType: Components\CreateAccountType::Business,
                    profile: new Components\CreateProfile(
                        business: new Components\CreateBusinessProfile(
                            legalBusinessName: 'Whole Body Fitness LLC',
                        ),
                    ),
                ),
            );

            $response = $sdk->onboardingInvites->create(
                onboardingInviteRequest: $onboardingInviteRequest,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->onboardingInvite !== null) {
                // handle response
            }
    get:
      operationId: listOnboardingInvites
      description: |-
        List all the onboarding invites created by the caller's account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_246
                  properties: *ref_247
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Onboarding
      x-speakeasy-name-override: listInvites
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.onboarding.list_invites()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.onboarding.listInvites({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListOnboardingInvitesResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListOnboardingInvitesResponse res = sdk.onboarding().listInvites()
                            .call();

                    if (res.onboardingInvites().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->onboarding->listInvites(
                xMoovVersion: 'v2024.01.00'
            );

            if ($response->onboardingInvites !== null) {
                // handle response
            }
  /onboarding-invites/{code}:
    get:
      operationId: getOnboardingInvite
      description: |-
        Retrieve details about an onboarding invite.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: code
          in: path
          required: true
          schema:
            type: string
            description: A unique code that identifies an onboarding invite.
            example: N1IA5eWYNh
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_246
                properties: *ref_247
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Onboarding
      x-speakeasy-name-override: getInvite
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.onboarding.get_invite(code="N1IA5eWYNh")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.onboarding.getInvite({
                code: "N1IA5eWYNh",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetOnboardingInviteResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetOnboardingInviteResponse res = sdk.onboarding().getInvite()
                            .code("N1IA5eWYNh")
                            .call();

                    if (res.onboardingInvite().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->onboarding->getInvite(
                code: 'N1IA5eWYNh',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->onboardingInvite !== null) {
                // handle response
            }
    delete:
      operationId: revokeOnboardingInvite
      description: |-
        Revoke an onboarding invite, rendering the invitation link unusable.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: code
          in: path
          required: true
          schema:
            type: string
            description: A unique code that identifies an onboarding invite.
            example: N1IA5eWYNh
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Onboarding
      x-speakeasy-name-override: revokeInvite
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.onboarding.revoke_invite(code="N1IA5eWYNh")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.onboarding.revokeInvite({
                code: "N1IA5eWYNh",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.RevokeOnboardingInviteResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    RevokeOnboardingInviteResponse res = sdk.onboarding().revokeInvite()
                            .code("N1IA5eWYNh")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->onboarding->revokeInvite(
                code: 'N1IA5eWYNh',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /ping:
    get:
      operationId: ping
      description: |-
        A simple endpoint to check auth.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/ping.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: Successfully able to hit the ping endpoint.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Ping
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.ping.ping()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.ping.ping({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.PingResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    PingResponse res = sdk.ping().ping()
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->ping->get(
                xMoovVersion: 'v2024.01.00'
            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /receipts:
    post:
      operationId: createReceipts
      description: |2-
         Create receipts for transfers and scheduled transfers.

         To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
         you'll need to specify the `/accounts/{accountID}/transfers.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '201':
          description: The resource was successfully created.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: &ref_249
                    - receiptID
                    - createdBy
                    - kind
                  properties: &ref_250
                    receiptID:
                      type: string
                      format: uuid
                      description: Unique identifier for the receipt request.
                    createdBy:
                      type: string
                      format: uuid
                      description: AccountID for which the receipt request was created.
                    disabledOn:
                      type: string
                      format: date-time
                      description: The date and time the receipt was disabled.
                      example: 2025-11-10T23:00:000Z
                    kind:
                      allOf:
                        - type: string
                          enum: &ref_248
                            - sale.customer.v1
                          description: The type of receipt being requested.
                      description: The type of receipt.
                    email:
                      allOf:
                        - type: string
                          maxLength: 255
                          format: email
                          example: jordan.lee@classbooker.dev
                      description: |-
                        The email address the receipt is sent to.
                        Either email or emailAccountID will be in the response, but not both.
                    emailAccountID:
                      type: string
                      format: uuid
                      description: |-
                        The accountID the receipt is sent to.
                        Either email or emailAccountID will be in the response, but not both.
                    forTransferID:
                      type: string
                      format: uuid
                      description: |-
                        The ID of the transfer associated with this receipt.
                        Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                    forScheduleID:
                      type: string
                      format: uuid
                      description: |-
                        The ID of the schedule associated with this receipt.
                        Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                    forOccurrenceID:
                      type: string
                      format: uuid
                      description: |-
                        The ID of the schedule occurrence associated with this receipt.
                        Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                    sentFor:
                      type: array
                      items:
                        type: object
                        required: &ref_628
                          - receiptID
                          - idempotencyKey
                          - sentOn
                        properties: &ref_629
                          receiptID:
                            type: string
                            format: uuid
                            description: Unique identifier for the receipt.
                          idempotencyKey:
                            type: string
                            format: uuid
                            description: The idempotency key used when creating the receipt.
                          sentOn:
                            type: string
                            format: date-time
                            description: When the receipt was sent.
                            example: 2025-11-10T23:00:000Z
                      description: The list of receipts that have been sent.
                  example: &ref_251
                    createdBy: 25a02396-1048-48f9-bf93-102d2fb7895e
                    receiptID: 4925c8a5-3b9a-4488-a514-9fd992546aca
                    forTransferID: 193ceb53-94c7-41c4-9272-c90c2832cb4c
                    kind: sale.customer.v1
                    email: jordan.lee@classbooker.dev
                    sentFor:
                      - idempotencyKey: 0c14c6a6-6f50-4d1e-b0c4-b46ff43ba6a1
                        receiptID: 4925c8a5-3b9a-4488-a514-9fd992546aca
                        sentOn: '2025-01-16T17:52:14.219311143Z'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                additionalProperties: &ref_600
                  type: object
                  properties: &ref_599
                    kind:
                      type: string
                    email:
                      type: string
                    emailAccountID:
                      type: string
                    forTransferID:
                      type: string
                    forScheduleID:
                      type: string
                    forOccurrenceID:
                      type: string
                example: &ref_601
                  '0':
                    kind: cannot be blank
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Receipts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required: &ref_597
                  - kind
                properties: &ref_598
                  kind:
                    allOf:
                      - type: string
                        enum: *ref_248
                        description: The type of receipt being requested.
                    description: The type of receipt being requested.
                  email:
                    allOf:
                      - type: string
                        maxLength: 255
                        format: email
                        example: jordan.lee@classbooker.dev
                    description: |-
                      The email address to send the receipt to.
                      Either email or emailAccountID must be provided, but not both.
                  emailAccountID:
                    type: string
                    format: uuid
                    description: |-
                      The accountID to send the receipt to.
                      Either email or emailAccountID must be provided, but not both.
                  forTransferID:
                    type: string
                    format: uuid
                    description: |-
                      The ID of the transfer associated with this receipt.
                      Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                  forScheduleID:
                    type: string
                    format: uuid
                    description: |-
                      The ID of the schedule associated with this receipt.
                      Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                  forOccurrenceID:
                    type: string
                    format: uuid
                    description: |-
                      The ID of the schedule occurrence associated with this receipt.
                      Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
                description: A receipt request for a specific transfer, schedule, or schedule occurrence.
      x-speakeasy-name-override: create
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.receipts.create(request=[
                    {
                        "kind": components.ReceiptKind.SALE_CUSTOMER_V1,
                        "email": "jordan.lee@classbooker.dev",
                    },
                ])

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.receipts.create([
                {
                  kind: "sale.customer.v1",
                  email: "jordan.lee@classbooker.dev",
                },
              ]);

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.CreateReceiptsResponse;
            import java.lang.Exception;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateReceiptsResponse res = sdk.receipts().create()
                            .requestBody(List.of(
                                ReceiptRequest.builder()
                                    .kind(ReceiptKind.SALE_CUSTOMER_V1)
                                    .email("jordan.lee@classbooker.dev")
                                    .build()))
                            .call();

                    if (res.receiptResponses().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->receipts->create(
                requestBody: [
                    new Components\ReceiptRequest(
                        kind: Components\ReceiptKind::SaleCustomerV1,
                        email: 'jordan.lee@classbooker.dev',
                    ),
                ],
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->receiptResponses !== null) {
                // handle response
            }
    get:
      operationId: listReceipts
      description: |-
        List receipts by transferID, scheduleID, or occurrenceID.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: id
          in: query
          required: true
          description: The transfer, schedule, or transfer occurrence ID to filter receipts by.
          schema:
            type: string
            format: uuid
          explode: false
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_249
                  properties: *ref_250
                  example: *ref_251
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Receipts
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.receipts.list(id="c8a232aa-0b11-4b8a-b005-71e9e705d0e6")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.receipts.list({
                id: "c8a232aa-0b11-4b8a-b005-71e9e705d0e6",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListReceiptsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListReceiptsResponse res = sdk.receipts().list()
                            .id("c8a232aa-0b11-4b8a-b005-71e9e705d0e6")
                            .call();

                    if (res.receiptResponses().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->receipts->list(
                id: 'c8a232aa-0b11-4b8a-b005-71e9e705d0e6',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->receiptResponses !== null) {
                // handle response
            }
  /terminal-applications:
    post:
      operationId: createTerminalApplication
      description: |-
        Create a new terminal application.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/terminal-applications.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_162
                properties: *ref_163
                description: Describes a terminal application.
                example: *ref_164
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_633
                  platform:
                    type: string
                  appBundleID:
                    type: string
                  packageName:
                    type: string
                  sha256Digest:
                    type: string
                  versionCode:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Terminal Applications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_430
                - platform
              properties: &ref_431
                platform:
                  type: string
                  enum: *ref_252
                  description: Platform of the terminal application.
                  example: ios
                appBundleID:
                  type: string
                  description: The app bundle identifier of the terminal application. Required if platform is `ios`.
                packageName:
                  type: string
                  description: The app package name of the terminal application. Required if platform is `android`.
                sha256Digest:
                  type: string
                  description: The app version of the terminal application. Required if paltform is `android`.
                versionCode:
                  type: string
                  description: The app version of the terminal application. Required if platform is `android`.
              description: Describes a create terminal application request.
              example: &ref_432
                platform: ios
                appBundleID: com.example.app
                packageName: com.example.app
                sha256Digest: '1234567890'
                versionCode: 1.0.0
      x-speakeasy-name-override: create
      x-speakeasy-group: terminalApplications
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.terminal_applications.create(platform=components.TerminalApplicationPlatform.IOS, app_bundle_id="com.example.app", package_name="com.example.app", sha256_digest="1234567890", version_code="1.0.0")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.terminalApplications.create({
                platform: "ios",
                appBundleID: "com.example.app",
                packageName: "com.example.app",
                sha256Digest: "1234567890",
                versionCode: "1.0.0",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.TerminalApplicationError;
            import io.moov.sdk.models.operations.CreateTerminalApplicationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, TerminalApplicationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateTerminalApplicationResponse res = sdk.terminalApplications().create()
                            .createTerminalApplication(CreateTerminalApplication.builder()
                                .platform(TerminalApplicationPlatform.IOS)
                                .appBundleID("com.example.app")
                                .packageName("com.example.app")
                                .sha256Digest("1234567890")
                                .versionCode("1.0.0")
                                .build())
                            .call();

                    if (res.terminalApplication().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createTerminalApplication = new Components\CreateTerminalApplication(
                platform: Components\TerminalApplicationPlatform::Ios,
                appBundleID: 'com.example.app',
                packageName: 'com.example.app',
                sha256Digest: '1234567890',
                versionCode: '1.0.0',
            );

            $response = $sdk->terminalApplications->create(
                createTerminalApplication: $createTerminalApplication,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalApplication !== null) {
                // handle response
            }
    get:
      operationId: listTerminalApplications
      description: |-
        List all the terminal applications for a Moov Account.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/terminal-applications.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: *ref_162
                  properties: *ref_163
                  description: Describes a terminal application.
                  example: *ref_164
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Terminal Applications
      x-speakeasy-name-override: list
      x-speakeasy-group: terminalApplications
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.terminal_applications.list()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.terminalApplications.list({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.ListTerminalApplicationsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    ListTerminalApplicationsResponse res = sdk.terminalApplications().list()
                            .call();

                    if (res.terminalApplications().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->terminalApplications->list(
                xMoovVersion: 'v2024.01.00'
            );

            if ($response->terminalApplications !== null) {
                // handle response
            }
  /terminal-applications/{terminalApplicationID}:
    get:
      operationId: getTerminalApplication
      description: |-
        Fetch a specific terminal application.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/terminal-applications.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: terminalApplicationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the terminal application.
            example: 12345678-1234-1234-1234-123456789012
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_162
                properties: *ref_163
                description: Describes a terminal application.
                example: *ref_164
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Terminal Applications
      x-speakeasy-name-override: get
      x-speakeasy-group: terminalApplications
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.terminal_applications.get(terminal_application_id="12345678-1234-1234-1234-123456789012")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.terminalApplications.get({
                terminalApplicationID: "12345678-1234-1234-1234-123456789012",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetTerminalApplicationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetTerminalApplicationResponse res = sdk.terminalApplications().get()
                            .terminalApplicationID("12345678-1234-1234-1234-123456789012")
                            .call();

                    if (res.terminalApplication().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->terminalApplications->get(
                terminalApplicationID: '12345678-1234-1234-1234-123456789012',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->terminalApplication !== null) {
                // handle response
            }
    delete:
      operationId: deleteTerminalApplication
      description: |-
        Delete a specific terminal application.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/terminal-applications.write` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: terminalApplicationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the terminal application.
            example: 12345678-1234-1234-1234-123456789012
      responses:
        '204':
          description: The request completed successfully, but there is no content to return.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '409':
          description: The request conflicted with the current state of the target resource.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Terminal Applications
      x-speakeasy-name-override: delete
      x-speakeasy-group: terminalApplications
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.terminal_applications.delete(terminal_application_id="12345678-1234-1234-1234-123456789012")

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.terminalApplications.delete({
                terminalApplicationID: "12345678-1234-1234-1234-123456789012",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.operations.DeleteTerminalApplicationResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    DeleteTerminalApplicationResponse res = sdk.terminalApplications().delete()
                            .terminalApplicationID("12345678-1234-1234-1234-123456789012")
                            .call();

                    // handle response
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->terminalApplications->delete(
                terminalApplicationID: '12345678-1234-1234-1234-123456789012',
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->statusCode === 200) {
                // handle response
            }
  /tos-token:
    get:
      operationId: getTermsOfServiceToken
      description: |-
        Generates a non-expiring token that can then be used to accept Moov's terms of service. 

        This token can only be generated via API. Any Moov account requesting the collect funds, send funds, wallet, 
        or card issuing capabilities must accept Moov's terms of service, then have the generated terms of service 
        token patched to the account. Read more in our [documentation](https://docs.moov.io/guides/accounts/requirements/platform-agreement/).
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
        - name: origin
          in: header
          required: false
          description: Indicates the domain from which the request originated. Required if referer header is not present.
          schema:
            type: string
        - name: referer
          in: header
          required: false
          description: Specifies the URL of the resource from which the request originated. Required if origin header is not present.
          schema:
            type: string
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_253
                properties: *ref_254
                description: An encrypted value used to record acceptance of Moov's Terms of Service.
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '404':
          description: The requested resource was not found.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Accounts
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.accounts.get_terms_of_service_token()

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.accounts.getTermsOfServiceToken({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.Security;
            import io.moov.sdk.models.operations.GetTermsOfServiceTokenResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    GetTermsOfServiceTokenResponse res = sdk.accounts().getTermsOfServiceToken()
                            .call();

                    if (res.termsOfServiceToken().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();



            $response = $sdk->accounts->getTermsOfServiceToken(
                xMoovVersion: 'v2024.01.00',
                origin: '<value>',
                referer: 'productive-order.info'

            );

            if ($response->termsOfServiceToken !== null) {
                // handle response
            }
  /transfer-options:
    post:
      operationId: createTransferOptions
      description: |-
        Generate available payment method options for one or multiple transfer participants depending on the accountID or paymentMethodID you 
        supply in the request. 

        Read our [transfers overview guide](https://docs.moov.io/guides/money-movement/overview/) to learn more.

        To access this endpoint using an [access token](https://docs.moov.io/api/authentication/access-tokens/) 
        you'll need to specify the `/accounts/{accountID}/transfers.read` scope.
      parameters:
        - name: x-moov-version
          in: header
          required: false
          description: |-
            Specify an API version.

            API versioning follows the format `vYYYY.QQ.BB`, where 
              - `YYYY` is the year
              - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
              - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
                - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

            The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
          schema: *ref_17
          x-speakeasy-globals-hidden: true
      responses:
        '200':
          description: The request completed successfully.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_642
                  sourceOptions:
                    type: array
                    items:
                      oneOf: *ref_133
                      discriminator: *ref_134
                      description: A method of moving money
                  destinationOptions:
                    type: array
                    items:
                      oneOf: *ref_133
                      discriminator: *ref_134
                      description: A method of moving money
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: *ref_5
                properties: *ref_6
        '401':
          description: The request contained missing or expired authentication.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '403':
          description: The user is not authorized to make the request.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '422':
          description: The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                properties: &ref_643
                  amount:
                    type: string
                  source:
                    type: string
                  destination:
                    type: string
        '429':
          description: Request was refused due to rate limiting.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '500':
          description: The request failed due to an unexpected error.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
        '504':
          description: The request failed because a downstream service failed to respond.
          headers:
            x-request-id:
              required: true
              description: A unique identifier used to trace requests.
              schema:
                type: string
                format: uuid
      tags:
        - Transfers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: &ref_440
                - source
                - destination
                - amount
              properties: &ref_441
                source:
                  type: object
                  properties: &ref_255
                    accountID:
                      type: string
                      format: uuid
                    paymentMethodID:
                      type: string
                      format: uuid
                destination:
                  type: object
                  properties: *ref_255
                amount:
                  type: object
                  required: *ref_98
                  properties: *ref_99
      x-speakeasy-name-override: generateOptions
      x-codeSamples:
        - lang: python
          label: Python (SDK)
          source: |-
            from moovio_sdk import Moov
            from moovio_sdk.models import components


            with Moov(
                security=components.Security(
                    username="",
                    password="",
                ),
            ) as moov:

                res = moov.transfers.generate_options(source={}, destination={}, amount={
                    "currency": "USD",
                    "value": 1204,
                })

                # Handle response
                print(res)
        - lang: typescript
          label: Typescript (SDK)
          source: |-
            import { Moov } from "@moovio/sdk";

            const moov = new Moov({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await moov.transfers.generateOptions({
                source: {},
                destination: {},
                amount: {
                  currency: "USD",
                  value: 1204,
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: java
          label: Java (SDK)
          source: |-
            package hello.world;

            import io.moov.sdk.Moov;
            import io.moov.sdk.models.components.*;
            import io.moov.sdk.models.errors.GenericError;
            import io.moov.sdk.models.errors.TransferOptionsValidationError;
            import io.moov.sdk.models.operations.CreateTransferOptionsResponse;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws GenericError, TransferOptionsValidationError, Exception {

                    Moov sdk = Moov.builder()
                            .security(Security.builder()
                                .username("")
                                .password("")
                                .build())
                        .build();

                    CreateTransferOptionsResponse res = sdk.transfers().generateOptions()
                            .createTransferOptions(CreateTransferOptions.builder()
                                .source(SourceDestinationOptions.builder()
                                    .build())
                                .destination(SourceDestinationOptions.builder()
                                    .build())
                                .amount(Amount.builder()
                                    .currency("USD")
                                    .value(1204L)
                                    .build())
                                .build())
                            .call();

                    if (res.transferOptions().isPresent()) {
                        // handle response
                    }
                }
            }
        - lang: php
          label: Php (SDK)
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Moov\MoovPhp;
            use Moov\MoovPhp\Models\Components;

            $sdk = MoovPhp\Moov::builder()
                ->setSecurity(
                    new Components\Security(
                        username: '',
                        password: '',
                    )
                )
                ->build();

            $createTransferOptions = new Components\CreateTransferOptions(
                source: new Components\SourceDestinationOptions(),
                destination: new Components\SourceDestinationOptions(),
                amount: new Components\Amount(
                    currency: 'USD',
                    value: 1204,
                ),
            );

            $response = $sdk->transfers->generateOptions(
                createTransferOptions: $createTransferOptions,
                xMoovVersion: 'v2024.01.00'

            );

            if ($response->transferOptions !== null) {
                // handle response
            }
components:
  parameters:
    AccountsQuery.capability:
      name: capability
      in: query
      required: false
      description: '  Filter connected accounts by the capability.'
      schema: *ref_256
      explode: false
    AccountsQuery.capabilityStatus:
      name: capabilityStatus
      in: query
      required: false
      description: '  Filter connected accounts by the capability.'
      schema: *ref_257
      explode: false
    AccountsQuery.email:
      name: email
      in: query
      required: false
      description: |2-
          Filter connected accounts by email address.

          Provide the full email address to filter by email.
      schema: *ref_258
      explode: false
    AccountsQuery.foreignID:
      name: foreignID
      in: query
      required: false
      description: '  Serves as an optional alias from a foreign/external system which can be used to reference this resource.'
      schema: *ref_259
      explode: false
    AccountsQuery.includeDisconnected:
      name: includeDisconnected
      in: query
      required: false
      description: |-
        Filter disconnected accounts.

        If true, the response will include disconnected accounts.
      schema: *ref_260
      explode: false
    AccountsQuery.includeGuest:
      name: includeGuest
      in: query
      required: false
      description: |2-
          Filter accounts with AccountType guest.
          
          If true, the response will include guest accounts.
      schema: *ref_261
      explode: false
    AccountsQuery.name:
      name: name
      in: query
      required: false
      description: |-
        Filter connected accounts by name.

        If provided, this query will attempt to find matches against the following Account and Profile fields:
        <ul>
          <li>Account `displayName`</li>
          <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
          <li>Business Profile `legalBusinessName`</li>
        </ul>
      schema: *ref_262
      explode: false
    AccountsQuery.type:
      name: type
      in: query
      required: false
      description: |2-
          Filter connected accounts by AccountType.

          If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will
          be searched. For example, if `type=business` and `name=moov`, the search will attempt to find matches against
          the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
      schema: *ref_263
      explode: false
    DisputeListFilters.cardholderAccountID:
      name: cardholderAccountID
      in: query
      required: false
      description: Optional parameter to filter by cardholder account ID.
      schema: *ref_264
      explode: false
    DisputeListFilters.disputeIDs:
      name: disputeIDs
      in: query
      required: false
      description: Optional parameter to filter by a comma separated list of dispute IDs.
      schema: *ref_265
      explode: false
    DisputeListFilters.endDateTime:
      name: endDateTime
      in: query
      required: false
      description: Optional date-time parameter to filter all disputes created on and before the provided date and time.
      schema: *ref_266
      explode: false
    DisputeListFilters.merchantAccountID:
      name: merchantAccountID
      in: query
      required: false
      description: Optional parameter to filter by merchant account ID.
      schema: *ref_267
      explode: false
    DisputeListFilters.orderBy:
      name: orderBy
      in: query
      required: false
      schema: *ref_268
      explode: false
    DisputeListFilters.respondEndDateTime:
      name: respondEndDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all disputes with respond by before this date-time.
      schema: *ref_269
      explode: false
    DisputeListFilters.respondStartDateTime:
      name: respondStartDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all disputes with respond by before this date-time.
      schema: *ref_270
      explode: false
    DisputeListFilters.startDateTime:
      name: startDateTime
      in: query
      required: false
      description: Optional date-time parameter to filter all disputes created on and after the provided date and time.
      schema: *ref_271
      explode: false
    DisputeListFilters.status:
      name: status
      in: query
      required: false
      description: Optional dispute status by which to filter the disputes.
      schema: *ref_272
      explode: false
    DisputeListFilters.transferIDs:
      name: transferIDs
      in: query
      required: false
      description: Optional parameter to filter by a comma separated list of transfer IDs.
      schema: *ref_273
      explode: false
    EnrichedAddressFilters.excludeStates:
      name: excludeStates
      in: query
      required: false
      description: Exclude list of states from results. No `include` pararmeters may be used with this parameter.
      schema: *ref_274
      explode: false
    EnrichedAddressFilters.includeCities:
      name: includeCities
      in: query
      required: false
      description: Limits results to a list of given cities.
      schema: *ref_275
      explode: false
    EnrichedAddressFilters.includeStates:
      name: includeStates
      in: query
      required: false
      description: Limits results to a list of given states.
      schema: *ref_276
      explode: false
    EnrichedAddressFilters.includeZipcodes:
      name: includeZipcodes
      in: query
      required: false
      description: Limits results to a list of given zipcodes.
      schema: *ref_277
      explode: false
    EnrichedAddressFilters.maxResults:
      name: maxResults
      in: query
      required: false
      description: Maximum number of results to return.
      schema: *ref_278
      explode: false
    EnrichedAddressFilters.preferCities:
      name: preferCities
      in: query
      required: false
      description: Display results with the listed cities at the top.
      schema: *ref_279
      explode: false
    EnrichedAddressFilters.preferGeolocation:
      name: preferGeolocation
      in: query
      required: false
      description: |2-
          If omitted or set to `city`, it uses the sender's IP address to determine location, then automatically adds the city and state 
          to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is 
          not set to `none`, you may see addresses from areas you do not wish to see.
      schema: *ref_280
      explode: false
    EnrichedAddressFilters.preferRatio:
      name: preferRatio
      in: query
      required: false
      description: Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.
      schema: *ref_281
      explode: false
    EnrichedAddressFilters.preferStates:
      name: preferStates
      in: query
      required: false
      description: Display results with the listed states at the top.
      schema: *ref_282
      explode: false
    EnrichedAddressFilters.preferZipcodes:
      name: preferZipcodes
      in: query
      required: false
      description: Display results with the listed zipcodes at the top.
      schema: *ref_283
      explode: false
    EnrichedAddressFilters.search:
      name: search
      in: query
      required: true
      description: Partial or complete address to search.
      schema: *ref_284
      explode: false
    EnrichedAddressFilters.selected:
      name: selected
      in: query
      required: false
      description: Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).
      schema: *ref_285
      explode: false
    EnrichedAddressFilters.source:
      name: source
      in: query
      required: false
      description: Include results from alternate data sources. Allowed values are `all` (non-postal addresses), or `postal` (postal addresses only).
      schema: *ref_286
      explode: false
    InstitutionsFilters.limit:
      name: limit
      in: query
      required: false
      description: Maximum results returned by a search.
      schema: *ref_287
      explode: false
    InstitutionsFilters.name:
      name: name
      in: query
      required: false
      description: Name of the financial institution. Either `name` or `routingNumber` is required.
      schema: *ref_288
      explode: false
    InstitutionsFilters.routingNumber:
      name: routingNumber
      in: query
      required: false
      description: Routing number for a financial institution. Either `routingNumber` or `name` is required.
      schema: *ref_289
      explode: false
    InstitutionsFilters.state:
      name: state
      in: query
      required: false
      description: The state where a financial institution is based.
      schema: *ref_290
      explode: false
    ListIssuingAuthorizationsQuery.endDateTime:
      name: endDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all authorizations created before this date-time.
      schema: *ref_291
      explode: false
    ListIssuingAuthorizationsQuery.issuedCardID:
      name: issuedCardID
      in: query
      required: false
      description: Optional ID of the issued card to filter results.
      schema: *ref_292
      explode: false
    ListIssuingAuthorizationsQuery.startDateTime:
      name: startDateTime
      in: query
      required: false
      description: Optional date-time which inclusively filters all authorizations created after this date-time.
      schema: *ref_293
      explode: false
    ListIssuingAuthorizationsQuery.statuses:
      name: statuses
      in: query
      required: false
      description: Optional, comma-separated statuses of the authorization to filter results.
      schema: *ref_294
      explode: false
    ListIssuingTransactionsQuery.endDateTime:
      name: endDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all card transactions created before this date-time.
      schema: *ref_295
      explode: false
    ListIssuingTransactionsQuery.issuedCardID:
      name: issuedCardID
      in: query
      required: false
      description: Optional ID of the issued card to filter results.
      schema: *ref_296
      explode: false
    ListIssuingTransactionsQuery.startDateTime:
      name: startDateTime
      in: query
      required: false
      description: Optional date-time which inclusively filters all card transactions created after this date-time.
      schema: *ref_297
      explode: false
    ListTransactionsQuery.completedEndDateTime:
      name: completedEndDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all transactions completed before this date-time.
      schema: *ref_298
      explode: false
    ListTransactionsQuery.completedStartDateTime:
      name: completedStartDateTime
      in: query
      required: false
      description: Optional date-time which inclusively filters all transactions completed after this date-time.
      schema: *ref_299
      explode: false
    ListTransactionsQuery.createdEndDateTime:
      name: createdEndDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all transactions created before this date-time.
      schema: *ref_300
      explode: false
    ListTransactionsQuery.createdStartDateTime:
      name: createdStartDateTime
      in: query
      required: false
      description: Optional date-time which inclusively filters all transactions created after this date-time.
      schema: *ref_301
      explode: false
    ListTransactionsQuery.sourceID:
      name: sourceID
      in: query
      required: false
      description: Optional parameter to filter by source ID.
      schema: *ref_302
      explode: false
    ListTransactionsQuery.sourceType:
      name: sourceType
      in: query
      required: false
      description: Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).
      schema: *ref_303
      explode: false
    ListTransactionsQuery.status:
      name: status
      in: query
      required: false
      description: Optional parameter to filter by status (`pending` or `completed`).
      schema: *ref_304
      explode: false
    ListTransactionsQuery.sweepID:
      name: sweepID
      in: query
      required: false
      description: Optional ID to filter for transactions accrued in a sweep.
      schema: *ref_305
      explode: false
    ListTransactionsQuery.transactionType:
      name: transactionType
      in: query
      required: false
      description: Optional parameter to filter by transaction type.
      schema: *ref_306
      explode: false
    ListTransactionsQuery.transactionTypes:
      name: transactionTypes
      in: query
      required: false
      description: Optional, comma-separated parameter to filter by transaction types.
      schema: *ref_307
      explode: false
    ListTransactionsQuery.walletID:
      name: walletID
      in: path
      required: true
      schema: *ref_308
    Pagination.count:
      name: count
      in: query
      required: false
      schema: *ref_82
      explode: false
    Pagination.skip:
      name: skip
      in: query
      required: false
      schema: *ref_81
      explode: false
    TransferListFilters.accountIDs:
      name: accountIDs
      in: query
      required: false
      description: Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination.
      schema: *ref_309
      explode: false
    TransferListFilters.count:
      name: count
      in: query
      required: false
      schema: *ref_310
      explode: false
    TransferListFilters.disputed:
      name: disputed
      in: query
      required: false
      description: Optional parameter to only return disputed transfers.
      schema: *ref_311
      explode: false
    TransferListFilters.endDateTime:
      name: endDateTime
      in: query
      required: false
      description: Optional date-time which exclusively filters all transfers created before this date-time.
      schema: *ref_312
      explode: false
    TransferListFilters.groupID:
      name: groupID
      in: query
      required: false
      description: Optional ID to filter for transfers in the same group.
      schema: *ref_313
      explode: false
    TransferListFilters.refunded:
      name: refunded
      in: query
      required: false
      description: Optional parameter to only return refunded transfers.
      schema: *ref_314
      explode: false
    TransferListFilters.scheduleID:
      name: scheduleID
      in: query
      required: false
      description: Optional ID to filter for transfer occurrences belonging to the same schedule.
      schema: *ref_315
      explode: false
    TransferListFilters.skip:
      name: skip
      in: query
      required: false
      schema: *ref_316
      explode: false
    TransferListFilters.startDateTime:
      name: startDateTime
      in: query
      required: false
      description: Optional date-time which inclusively filters all transfers created after this date-time.
      schema: *ref_317
      explode: false
    TransferListFilters.status:
      name: status
      in: query
      required: false
      description: Optional parameter for filtering transfers by status.
      schema: *ref_318
      explode: false
    VersionHeader:
      name: x-moov-version
      in: header
      required: false
      description: |-
        Specify an API version.

        API versioning follows the format `vYYYY.QQ.BB`, where 
          - `YYYY` is the year
          - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
          - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
            - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

        The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
      schema: *ref_17
      x-speakeasy-globals-hidden: true
  schemas:
    ACHCompanyEntryDescription:
      type: string
      minLength: 4
      maxLength: 10
      description: An optional override of the default NACHA company entry description for a transfer.
      example: Gym dues
    ACHException:
      type: object
      properties: *ref_169
    ACHOriginatingCompanyName:
      type: string
      minLength: 4
      maxLength: 16
      description: An optional override of the default NACHA company name for a transfer.
      example: Whole Body Fit
    ACHPaymentDetails:
      type: object
      properties: *ref_117
      description: Options for payment links used to collect an ACH payment.
    ACHPaymentDetailsError:
      type: object
      properties: *ref_319
    ACHPaymentSettings:
      type: object
      required: *ref_320
      properties: *ref_321
    ACHReturnCode:
      type: string
      enum: *ref_322
      description: |-
        The return code of an ACH transaction that caused the bank account status to change.

        - R02: Account Closed
        - R03: No Account/Unable to Locate Account
        - R04: Invalid Account Number
        - R05: Improper Debit to Consumer Account
        - R07: Authorization Revoked by Customer
        - R08: Payment Stopped
        - R10: Customer Advises Originator is Not Known or Authorized to Receiver
        - R11: Customer Advises Entry Not in Accordance with the Terms of the Authorization
        - R12: Branch Sold to Another DFI
        - R13: RDFI not qualified to participate
        - R14: Representative payee deceased or unable to continue in that capacity
        - R15: Beneficiary or bank account holder
        - R16: Bank account frozen
        - R17: Entry with Invalid Account Number Initiated Under Questionable Circumstances
        - R20: Non-payment bank account
        - R23: Credit entry refused by receiver
        - R29: Corporate customer advises not authorized
        - R34: Limited participation RDFI
        - R38: Stop Payment on Source Document (Adjustment Entry)
        - R39: Improper Source Document
    ACHTransactionDetails:
      type: object
      required: *ref_172
      properties: *ref_173
      description: ACH specific details about the transaction.
    ACHTransactionStatus:
      type: string
      enum: *ref_323
      description: Status of a transaction within the ACH lifecycle.
    AccentColor:
      type: string
      description: A CSS hex color representing an accent color.
      example: '#111111'
    AccessToken:
      type: string
      maxLength: 4096
      description: A value passed to the authorization server to gain access to the system.
      example: eyJhbGciOiJFZERTQSIsImN0eSI6IkpXVCIsImtpZCI6IkR...
    Account:
      type: object
      required: *ref_20
      properties: *ref_21
      example: *ref_22
    AccountCapability:
      type: object
      required: *ref_324
      properties: *ref_325
      description: Describes an action or set of actions that an account is permitted to perform.
    AccountCountries:
      type: object
      required: *ref_72
      properties: *ref_73
      description: The countries in which an account operates.
    AccountNameVerification:
      type: object
      properties: *ref_326
      description: The results of submitting cardholder name to a card network for verification.
      example: *ref_327
    AccountTerminalApplicationError:
      type: object
      properties: *ref_328
    AccountTerminalApplicationList:
      type: array
      items:
        type: object
        required: *ref_162
        properties: *ref_163
        description: Describes a terminal application.
        example: *ref_164
      description: Describes a list of account terminal applications.
      example:
        - terminalApplicationID: 12345678-1234-1234-1234-123456789012
          status: enabled
          platform: ios
          appBundleID: com.example.app
          packageName: com.example.app
          sha256Digest: '1234567890'
          versionCode: 1.0.0
    AccountType:
      type: string
      enum: *ref_18
      description: The type of entity represented by this account.
      example: business
    AccountVerificationStatus:
      type: string
      enum: *ref_329
      description: Possible states an account verification can be in.
      deprecated: true
    AchCreditSameDayPaymentMethod:
      type: object
      required: *ref_330
      properties: *ref_331
      title: ACH credit same day
    AchCreditStandardPaymentMethod:
      type: object
      required: *ref_332
      properties: *ref_333
      title: ACH credit standard
    AchDebitCollectPaymentMethod:
      type: object
      required: *ref_334
      properties: *ref_335
      title: ACH debit collect
    AchDebitFundPaymentMethod:
      type: object
      required: *ref_336
      properties: *ref_337
      title: ACH debit fund
    AchLocation:
      type: object
      required: *ref_338
      properties: *ref_339
    AchParticipant:
      type: object
      required: *ref_340
      properties: *ref_341
    AddCapabilities:
      type: object
      required: *ref_342
      properties: *ref_343
    AddCapabilitiesError:
      type: object
      properties: *ref_344
    Address:
      type: object
      required: *ref_0
      properties: *ref_1
    AddressError:
      type: object
      properties: *ref_7
    AddressSuggestion:
      type: object
      properties: *ref_345
    AddressUpdate:
      type: object
      properties: *ref_28
    Adjustment:
      type: object
      required: *ref_29
      properties: *ref_30
      description: An adjustment to a wallet.
    Amount:
      type: object
      required: *ref_98
      properties: *ref_99
    AmountDecimal:
      type: object
      required: *ref_84
      properties: *ref_85
    AmountUpdate:
      type: object
      properties: *ref_346
    AmountValidationError:
      type: object
      properties: *ref_110
    AppleBillingContact:
      type: object
      properties: *ref_347
      description: |2-
          Billing contact information as returned from Apple Pay.
          
          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentcontact) 
          for more information.
    ApplePayHeader:
      type: object
      required: *ref_348
      properties: *ref_349
      description: |-
        Information needed to decrypt Apple Pay payment data.

        Refer to [Apple's documentation](https://developer.apple.com/documentation/passkit/payment-token-format-reference#Header-keys-and-values) 
        for more information.
    ApplePayMerchantDomains:
      type: object
      required: *ref_31
      properties: *ref_32
    ApplePayPaymentMethod:
      type: object
      required: *ref_350
      properties: *ref_351
      title: Apple Pay
    ApplePayResponse:
      type: object
      required: *ref_131
      properties: *ref_132
      description: Describes an Apple Pay token on a Moov account.
    ApplePaySession:
      type: string
      description: |-
        Stringified session object returned from Apple Pay.

        The string value should be deserialized as a JSON object before passing to Apple.
      example: '{"epochTimestamp":1733783167685,"expiresAt":1733786767685...}'
    ApplicationScope:
      type: string
      enum: *ref_245
      description: A permission that the application requests on another account.
    ArrayValidationError:
      type: object
      additionalProperties: *ref_243
      example: *ref_244
    AssignCountriesError:
      type: object
      required: *ref_352
      properties: *ref_353
    AsyncCreatedRefund:
      type: object
      required: *ref_354
      properties: *ref_355
      description: Asynchronous refund response
      title: Async
    AsyncTransfer:
      type: object
      required: *ref_356
      properties: *ref_357
      title: Async
    AuthToken:
      type: object
      required: *ref_358
      properties: *ref_359
    AuthTokenRequest:
      type: object
      required: *ref_238
      properties: *ref_239
    AuthTokenRequestError:
      type: object
      properties: *ref_360
    AuthorizedUser:
      type: object
      required: *ref_234
      properties: *ref_235
      description: Fields for identifying an authorized individual.
    BankAccount:
      type: object
      required: *ref_36
      properties: *ref_37
      description: Describes a bank account linked to a Moov account.
      example: *ref_38
    BankAccountException:
      type: object
      required: *ref_39
      properties: *ref_40
      description: Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
    BankAccountHolderType:
      type: string
      enum: *ref_34
      description: The type of holder on a funding source.
    BankAccountIntegration:
      type: object
      required: *ref_361
      properties: *ref_362
    BankAccountPayload:
      type: object
      required: *ref_363
      properties: *ref_364
      description: Describes the bank account to link to the Moov account.
      title: Bank account
    BankAccountStatus:
      type: string
      enum: *ref_119
    BankAccountStatusReason:
      type: string
      enum: *ref_365
      description: The reason the bank account status changed to the current value.
    BankAccountType:
      type: string
      enum: *ref_35
      description: The bank account type.
    BankAccountValidationError:
      type: object
      properties: *ref_366
    BankAccountVerification:
      type: object
      required: *ref_44
      properties: *ref_45
    BankAccountVerificationCreated:
      type: object
      required: *ref_367
      properties: *ref_368
    BankAccountVerificationMethod:
      type: string
      enum: *ref_42
    BankAccountVerificationStatus:
      type: string
      enum: *ref_43
    BankAccountWaitFor:
      type: string
      enum: *ref_41
    BasicPaymentMethod:
      type: object
      required: *ref_63
      properties: *ref_64
    BillableFee:
      type: object
      required: *ref_89
      properties: *ref_90
      example: *ref_91
    BirthDate:
      type: object
      required: *ref_138
      properties: *ref_139
    BirthDateError:
      type: object
      properties: *ref_227
    BirthDateUpdate:
      type: object
      properties: *ref_142
    BirthDateValidationError:
      type: object
      properties: *ref_369
    BrandColor:
      type: object
      required: *ref_46
      properties: *ref_47
    BrandColorValidationError:
      type: object
      properties: *ref_48
    BrandColors:
      type: object
      required: *ref_370
      properties: *ref_371
      description: Brand colors for light and dark modes.
    BrandProperties:
      type: object
      required: *ref_49
      properties: *ref_50
    BrandValidationError:
      type: object
      properties: *ref_51
    BusinessProfile:
      type: object
      required: *ref_372
      properties: *ref_373
      description: Describes a business.
    BusinessType:
      type: string
      enum: *ref_9
      description: The type of entity represented by this business.
      example: llc
    CallToAction:
      type: string
      enum: *ref_114
      description: |-
        The text to be displayed on web form's submit button.

        If set to "auto" the UI will automatically select between 
        "pay" and "confirm" for payments and payouts respectively.
    Cancellation:
      type: object
      required: *ref_186
      properties: *ref_187
    CancellationStatus:
      type: string
      enum: *ref_374
    CapabilitiesError:
      type: object
      properties: *ref_375
    Capability:
      type: object
      required: *ref_55
      properties: *ref_56
    CapabilityID:
      type: string
      enum: *ref_19
      description: |-
        Moov account capabilities.

        The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
    CapabilityRequirement:
      type: object
      properties: *ref_376
      description: Represents individual and business data necessary to facilitate the enabling of a capability for an account.
    CapabilityStatus:
      type: string
      enum: *ref_53
      description: The status of the capability requested for an account.
    Card:
      type: object
      required: *ref_68
      properties: *ref_69
      description: Describes a card on a Moov account.
      example: *ref_70
    CardAccountUpdater:
      type: object
      properties: *ref_125
      description: The results of the most recent card update request.
      example: *ref_126
    CardAcquiringDispute:
      type: object
      required: *ref_190
      properties: *ref_191
      description: Details of a card dispute.
    CardAcquiringModel:
      type: string
      enum: *ref_88
      description: Specifies the card processing pricing model
    CardAcquiringRefund:
      type: object
      required: *ref_188
      properties: *ref_189
      description: Details of a card refund.
      title: Sync
    CardAddress:
      type: object
      required: *ref_65
      properties: *ref_66
      example: *ref_67
    CardBrand:
      type: string
      enum: *ref_57
      description: The card brand.
      example: Visa
    CardDynamicDescriptor:
      type: string
      minLength: 4
      maxLength: 22
      description: An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
      example: WhlBdy *Yoga 11-12
    CardExpiration:
      type: object
      required: *ref_59
      properties: *ref_60
      description: The expiration date of the card or token.
      example: *ref_61
    CardExpirationError:
      type: object
      properties: *ref_377
    CardFingerprint:
      type: string
      maxLength: 100
      description: |-
        Uniquely identifies a linked payment card or token.
        For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
        This field can be used to identify specific payment methods across multiple accounts on your platform.
      example: 9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3
    CardID:
      type: string
      format: uuid
      description: ID of the card.
      example: 01234567-89ab-cdef-0123-456789abcdef
    CardIssuingNetwork:
      type: string
      enum: *ref_378
      description: The name of the network a card transaction is routed through.
    CardPaymentDetails:
      type: object
      properties: *ref_116
      description: Options for payment links used to collect a card payment.
    CardPaymentDetailsError:
      type: object
      properties: *ref_379
    CardPaymentPaymentMethod:
      type: object
      required: *ref_380
      properties: *ref_381
      title: Card payment
    CardPaymentSettings:
      type: object
      properties: *ref_382
      description: User provided settings to manage card payments. This data is only allowed on a business account.
    CardPresentPaymentPaymentMethod:
      type: object
      required: *ref_383
      properties: *ref_384
      description: A card used at point of sale terminal for a card present transaction as contained within a payment method.
    CardTransactionDetails:
      type: object
      required: *ref_174
      properties: *ref_175
      description: Card-specific details about the transaction.
    CardTransactionFailureCode:
      type: string
      enum: *ref_176
    CardTransactionStatus:
      type: string
      enum: *ref_385
      description: Status of a transaction within the card payment lifecycle.
    CardType:
      type: string
      enum: *ref_58
      description: The type of the card.
      example: credit
    CardUpdateReason:
      type: string
      enum: *ref_386
      description: The results of the card update request.
      example: number-update
    CardVerification:
      type: object
      required: *ref_122
      properties: *ref_123
      description: The results of submitting cardholder data to a card network for verification.
      example: *ref_124
    CardVerificationResult:
      type: string
      enum: *ref_62
      example: match
    CardVolumeDistribution:
      type: object
      required: *ref_204
      properties: *ref_205
    CardVolumeDistributionError:
      type: object
      properties: *ref_387
    CollectionPaymentMethodType:
      type: string
      enum: *ref_115
      description: Payment methods allowed for collecting a payment.
    ColorsValidationError:
      type: object
      properties: *ref_388
    CommonRequestHeaders:
      type: object
    CommonResponseHeaders:
      type: object
    CompleteBankAccountVerification:
      type: object
      required: *ref_389
      properties: *ref_390
    CompleteMicroDeposits:
      type: object
      required: *ref_391
      properties: *ref_392
      description: Request to complete the micro-deposit verification workflow.
    CompletedMicroDeposits:
      type: object
      required: *ref_393
      properties: *ref_394
    Count:
      type: integer
      format: int64
      description: Limits the maximum number of results returned, or determines the page size when used with `skip` for pagination.
      example: 20
    CountriesErrors:
      type: object
      required: *ref_395
      properties: *ref_396
    CreateAccount:
      type: object
      required: *ref_240
      properties: *ref_241
      example: *ref_242
    CreateAccountError:
      type: object
      properties: *ref_397
    CreateAccountSettings:
      type: object
      properties: *ref_26
    CreateAccountType:
      type: string
      enum: *ref_398
    CreateApplePaySession:
      type: object
      required: *ref_399
      properties: *ref_400
    CreateAuthorizedUser:
      type: object
      required: *ref_401
      properties: *ref_402
      description: Fields for identifying an authorized individual.
    CreateAuthorizedUserError:
      type: object
      properties: *ref_233
    CreateAuthorizedUserUpdate:
      type: object
      properties: *ref_403
      description: Fields for identifying an authorized individual.
    CreateBusinessError:
      type: object
      properties: *ref_404
    CreateBusinessProfile:
      type: object
      required: *ref_405
      properties: *ref_406
    CreateEvidenceFileMultiPart:
      type: object
      required: *ref_407
      properties: *ref_408
    CreateEvidenceText:
      type: object
      required: *ref_409
      properties: *ref_410
    CreateFeePlanAgreement:
      type: object
      required: *ref_411
      properties: *ref_412
    CreateIndividualError:
      type: object
      properties: *ref_413
    CreateIndividualProfile:
      type: object
      required: *ref_414
      properties: *ref_415
    CreatePaymentLink:
      type: object
      required: *ref_416
      properties: *ref_417
      description: |-
        Request to create a new payment link.

        A payment link must include either `payment` or `payout` details, but not both. For payout payment links,
        `maxUses` will automatically be set to 1, as these are intended for a one-time disbursement
        to a specific recipient.

        **Note:** The `payout` option is currently under development and is not yet available for general use.
      example: *ref_418
    CreatePaymentLinkError:
      type: object
      properties: *ref_419
    CreateProfile:
      type: object
      properties: *ref_420
    CreateProfileError:
      type: object
      properties: *ref_23
    CreateRefund:
      type: object
      properties: *ref_421
      description: |-
        Specifies a partial amount to refund. 

        This request body is optional, an empty body will issue a refund for the full amount of the original transfer.
    CreateRefundResponse:
      oneOf: *ref_422
    CreateRepresentative:
      type: object
      properties: *ref_423
      allOf: *ref_424
      description: Describes a business representative to create.
    CreateReversal:
      type: object
      required: *ref_425
      properties: *ref_426
    CreateSweepConfig:
      type: object
      required: *ref_427
      properties: *ref_428
    CreateSweepConfigError:
      type: object
      properties: *ref_429
    CreateTerminalApplication:
      type: object
      required: *ref_430
      properties: *ref_431
      description: Describes a create terminal application request.
      example: *ref_432
    CreateTransfer:
      type: object
      required: *ref_433
      properties: *ref_434
      example: *ref_435
    CreateTransferDestination:
      type: object
      required: *ref_436
      properties: *ref_437
      description: The final stage of a transfer and the ultimate recipient of the funds.
    CreateTransferDestinationACH:
      type: object
      properties: *ref_438
    CreateTransferDestinationCard:
      type: object
      properties: *ref_439
    CreateTransferOptions:
      type: object
      required: *ref_440
      properties: *ref_441
    CreateTransferSource:
      type: object
      properties: *ref_442
      description: Where funds for a transfer originate. For the source, you must include either a `paymentMethodID` or a `transferID`.
    CreateTransferSourceACH:
      type: object
      properties: *ref_443
    CreateTransferSourceCard:
      type: object
      properties: *ref_444
    CreatedTransfer:
      type: object
      required: *ref_445
      properties: *ref_446
    Currency:
      type: string
      pattern: ^[A-Za-z]{3}$
      description: A 3-letter ISO 4217 currency code.
      example: USD
    CustomerSupport:
      type: object
      properties: *ref_14
      description: |-
        User-provided information that can be displayed on credit card transactions for customers to use when
        contacting a customer support team. This data is only allowed on a business account.
    CustomerSupportError:
      type: object
      properties: *ref_25
    CustomerSupportUpdate:
      type: object
      properties: *ref_447
      description: |-
        User-provided information that can be displayed on credit card transactions for customers to use when
        contacting a customer support team. This data is only allowed on a business account.
    DebitHoldPeriod:
      type: string
      enum: *ref_196
      description: An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
      example: 2-days
    DisbursementPaymentMethodType:
      type: string
      enum: *ref_118
      description: Payment methods allowed for disbursing funds.
    DisplayOptionsError:
      type: object
      properties: *ref_111
    Dispute:
      type: object
      required: *ref_75
      properties: *ref_76
      description: Details of a card transaction dispute.
      example: *ref_77
    DisputeEvidenceResponse:
      type: object
      required: *ref_79
      properties: *ref_80
    DisputePhase:
      type: string
      enum: *ref_448
      description: The phase of a dispute within the dispute lifecycle.
    DisputeStatus:
      type: string
      enum: *ref_74
      description: |-
        The status of a particular dispute. 

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
    DisputeTransferDetails:
      type: object
      required: *ref_449
      properties: *ref_450
    Document:
      type: object
      required: *ref_451
      properties: *ref_452
    DocumentType:
      type: string
      enum: *ref_453
      description: Types of documents that can be uploaded.
      example: bankStatement
    DomainDisplayName:
      type: string
      maxLength: 64
      description: A UTF-8 string to display in the Buy button.
    DomesticPullFromCard:
      type: string
      enum: *ref_128
      description: Indicates if the card supports domestic pull-from-card transfer.
      example: supported
    DomesticPushToCard:
      type: string
      enum: *ref_127
      description: Indicates which level of domestic push-to-card transfer is supported by the card, if any.
      example: standard
    E2EEToken:
      type: object
      required: *ref_218
      properties: *ref_219
      description: |-
        Wraps a compact-serialized JSON Web Encryption (JWE) token used for secure transmission of sensitive data (e.g., PCI information) through intermediaries. 
        This token is encrypted using the public key from /end-to-end-keys and wraps an AES key. For details and examples, refer to our 
        [GitHub repository](https://github.com/moovfinancial/moov-go/blob/main/examples/e2ee/e2ee_test.go).
      example: *ref_220
    E2EETokenUpdate:
      type: object
      properties: *ref_454
      description: |-
        Wraps a compact-serialized JSON Web Encryption (JWE) token used for secure transmission of sensitive data (e.g., PCI information) through intermediaries. 
        This token is encrypted using the public key from /end-to-end-keys and wraps an AES key. For details and examples, refer to our 
        [GitHub repository](https://github.com/moovfinancial/moov-go/blob/main/examples/e2ee/e2ee_test.go).
      example: *ref_455
    Email:
      type: string
      maxLength: 255
      format: email
      example: jordan.lee@classbooker.dev
    End2EndEncryptionError:
      type: object
      properties: *ref_71
    EnrichedAddressResponse:
      type: object
      required: *ref_456
      properties: *ref_457
    EnrichedBusinessProfile:
      type: object
      properties: *ref_458
    EnrichedBusinessResponse:
      type: object
      properties: *ref_459
    EnrichedIndustries:
      type: object
      required: *ref_460
      properties: *ref_461
    EnrichedIndustry:
      type: object
      required: *ref_462
      properties: *ref_463
      description: An industry's MCC/SIC/NAICS codes, along with descriptive title.
    EnrichedIndustryCodes:
      type: object
      properties: *ref_464
    EntryMode:
      type: string
      enum: *ref_465
      description: How the card information was entered into the point of sale terminal.
      example: contactless
    EvidenceTextResponse:
      type: object
      required: *ref_466
      properties: *ref_467
    EvidenceType:
      type: string
      enum: *ref_78
    EvidenceUploadResponse:
      type: object
      required: *ref_468
      properties: *ref_469
      description: Details of a successfully uploaded evidence file.
    FacilitatorFee:
      type: object
      properties: *ref_183
      description: Total or markup fee.
    FeeCategory:
      type: string
      enum: *ref_470
    FeeConditions:
      type: object
      additionalProperties: *ref_471
      description: Defines the specific conditions that must be met for the fee to be applied.
      example: *ref_472
    FeeModel:
      type: string
      enum: *ref_473
      description: Specifies the pricing model used for the calculation of the final fee.
    FeePlan:
      type: object
      required: *ref_474
      properties: *ref_475
    FeePlanAgreement:
      type: object
      required: *ref_86
      properties: *ref_87
    FeePlanAgreementError:
      type: object
      properties: *ref_476
    FeePlanAgreementStatus:
      type: string
      enum: *ref_83
    FeeProperties:
      type: object
      properties: *ref_477
      description: Defines the specific parameters used for fee calculation.
      example: *ref_478
    FileDetails:
      type: object
      required: *ref_96
      properties: *ref_97
      description: Describes a file linked to a Moov account.
    FilePurpose:
      type: string
      enum: *ref_95
      description: The file's purpose.
      example: representative_verification
    FileStatus:
      type: string
      enum: *ref_479
      description: The file's status.
      example: pending
    FileUploadRequestMultiPart:
      type: object
      required: *ref_480
      properties: *ref_481
      description: Request to upload a file for an account.
    FileUploadValidationError:
      type: object
      properties: *ref_482
    FileValidationError:
      type: object
      properties: *ref_483
    FinancialInstitutions:
      type: object
      required: *ref_484
      properties: *ref_485
    FulfillmentDetails:
      type: object
      required: *ref_206
      properties: *ref_207
    FulfillmentDetailsError:
      type: object
      properties: *ref_486
    FullIssuedCard:
      type: object
      required: *ref_487
      properties: *ref_488
      description: The full details of an issued card, including PAN and CVV.
    GeneratedBy:
      oneOf: *ref_489
      description: The entity that generated the fee.
    GeneratedByAccountID:
      type: object
      properties: *ref_490
      title: Account ID
    GeneratedByBankAccountID:
      type: object
      properties: *ref_491
      title: Bank account ID
    GeneratedByCardID:
      type: object
      properties: *ref_492
      title: Card ID
    GeneratedByDisputeID:
      type: object
      properties: *ref_493
      title: Dispute ID
    GeneratedByTransferID:
      type: object
      properties: *ref_494
      title: Transfer ID
    GenericError:
      type: object
      required: *ref_5
      properties: *ref_6
    GovernmentID:
      type: object
      properties: *ref_27
    GovernmentIDError:
      type: object
      properties: *ref_495
    GrantType:
      type: string
      enum: *ref_496
      description: |-
        The type of grant being requested.

          - `client_credentials`: A grant type used by clients to obtain an access token
          - `refresh_token`: A grant type used by clients to obtain a new access token using a refresh token
    GuestProfile:
      type: object
      required: *ref_497
      properties: *ref_498
      description: Describes a guest account profile.
    IncurredFee:
      type: object
      properties: *ref_94
      description: A fee incurred by a user.
    IndividualName:
      type: object
      required: *ref_3
      properties: *ref_4
    IndividualNameError:
      type: object
      properties: *ref_137
    IndividualNameUpdate:
      type: object
      properties: *ref_141
    IndividualProfile:
      type: object
      required: *ref_499
      properties: *ref_500
      description: Describes an individual.
    IndustryCodes:
      type: object
      properties: *ref_10
    InstitutionLogo:
      type: object
      required: *ref_501
      properties: *ref_502
    IssuedCard:
      type: object
      required: *ref_231
      properties: *ref_232
    IssuedCardAuthorization:
      type: object
      required: *ref_222
      properties: *ref_223
    IssuedCardAuthorizationEvent:
      type: object
      required: *ref_503
      properties: *ref_504
    IssuedCardAuthorizationEventResult:
      type: string
      enum: *ref_505
      description: The result of an event.
    IssuedCardEventType:
      type: string
      enum: *ref_506
      description: The type of event that occurred on the card.
    IssuedCardFormFactor:
      type: string
      enum: *ref_228
      description: Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
    IssuedCardState:
      type: string
      enum: *ref_230
      description: |-
        The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.

        - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
        - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
        - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
        - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
    IssuedCardTransaction:
      type: object
      required: *ref_225
      properties: *ref_226
    IssuingAuthorizationStatus:
      type: string
      enum: *ref_221
      description: Status of a card issuing authorization.
    IssuingControls:
      type: object
      properties: *ref_229
    IssuingControlsError:
      type: object
      properties: *ref_507
      example: *ref_508
    IssuingIntervalLimit:
      type: string
      enum: *ref_509
      description: Specifies the time frame for the velocity limit. Currently supports only per-transaction limits.
    IssuingMerchantData:
      type: object
      properties: *ref_224
    IssuingVelocityLimit:
      type: object
      required: *ref_510
      properties: *ref_511
    IssuingVelocityLimitError:
      type: object
      properties: *ref_512
    JSONWebEncryptionToken:
      type: string
      format: jwe
      description: An [RFC](https://datatracker.ietf.org/doc/html/rfc7516) compact-serialized JSON Web Encryption (JWE) token.
    JSONWebKey:
      type: object
      required: *ref_513
      properties: *ref_514
      description: Describes an [RFC7517](https://datatracker.ietf.org/doc/html/rfc7517) web key.
      example: *ref_515
    LinkAccountTerminalApplication:
      type: object
      required: *ref_516
      properties: *ref_517
      description: Describes a request to link an account with a terminal application.
    LinkApplePay:
      type: object
      required: *ref_518
      properties: *ref_519
      description: |2-
          The JSON structure returned from Apple Pay when authorizing a payment session.

          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment) 
          for more information.
    LinkApplePayError:
      type: object
      properties: *ref_520
    LinkApplePayToken:
      type: object
      required: *ref_521
      properties: *ref_522
      description: |2-
          Contains the user's payment information as returned from Apple Pay.

          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken) 
          for more information.
    LinkApplePaymentData:
      type: object
      required: *ref_523
      properties: *ref_524
      description: |2-
          Contains the encrypted payment data.

          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916115-paymentdata) 
          for more information.
    LinkApplePaymentMethod:
      type: object
      required: *ref_525
      properties: *ref_526
      description: |2-
          Provides information about the underlying card.

          Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916113-paymentmethod) 
          for more information.
    LinkBankAccount:
      oneOf: *ref_527
    LinkCard:
      type: object
      required: *ref_528
      properties: *ref_529
      example: *ref_530
    LinkCardError:
      type: object
      properties: *ref_531
    LinkCardWaitFor:
      type: string
      enum: *ref_532
      example: payment-method
    LinkedApplePayPaymentMethod:
      type: object
      required: *ref_533
      properties: *ref_534
    ListFeesFetchRequest:
      type: object
      properties: *ref_535
      description: Array of fee IDs to fetch.
    MXAuthorizationCode:
      type: object
      required: *ref_536
      properties: *ref_537
      description: |-
        The authorization code of a MX account which allows a processor to retrieve a linked payment account. 

        `sandbox` - When linking a bank account to a `sandbox` account using a MX authorization code it will utilize MX's sandbox environment. 
        The MX authorization code provided must be generated from MX's sandbox environment.
    ManualTermsOfService:
      type: object
      required: *ref_538
      properties: *ref_539
      description: Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
    ManualTermsOfServiceUpdate:
      type: object
      properties: *ref_540
      description: Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
    ManualToSError:
      type: object
      properties:
        acceptedDate:
          type: string
        acceptedDomain:
          type: string
        acceptedIP:
          type: string
        acceptedUserAgent:
          type: string
    MerchantAccountID:
      type: string
      format: uuid
      description: ID of the merchant account.
      example: 76d4c8a0-1f2b-4e3b-8f5c-7a9e1b2c3d4e
    Metadata:
      type: object
      additionalProperties: *ref_12
      description: Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
      example: *ref_13
    MicroDepositStatus:
      type: string
      enum: *ref_541
    MicroDepositValidationError:
      type: object
      properties: *ref_542
    MinimumCommitment:
      type: object
      allOf: *ref_92
      description: The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
    Mode:
      type: string
      enum: *ref_16
      description: The operating mode for an account.
      example: production
    MonthlyPlatformFee:
      type: object
      allOf: *ref_93
      description: Fixed recurring amount paid in the billing period regardless of usage.
    MoovFee:
      type: object
      required: *ref_543
      properties: *ref_544
      description: Moov fee charged to an account involved in a transfer.
    MoovFeeDetails:
      type: object
      required: *ref_184
      properties: *ref_185
      description: Processing and pass-through costs that add up to the moovFee.
    MoovWalletPaymentMethod:
      type: object
      required: *ref_545
      properties: *ref_546
      title: Moov wallet
    MxPayload:
      type: object
      required: *ref_547
      properties: *ref_548
      description: |-
        Describes the account to link to the Moov account using a MX processor token. 

        `sandbox` - When linking a bank account to a `sandbox` account using an MX authorization token a default bank account routing number will
        be used. The following default data will be used to generate the bank account in this flow:

        ```
          RoutingNumber: "123456780",
          BankName: "Gringotts Bank"
        ```
      title: MX
    Occurrence:
      type: object
      properties: *ref_549
      description: Occurrences to either create or modify.
    OccurrenceStatus:
      type: string
      enum: *ref_550
      description: Status of the completed occurrence.
    OccurrencesResponse:
      type: object
      required: *ref_155
      properties: *ref_156
    OnboardingInvite:
      type: object
      required: *ref_246
      properties: *ref_247
    OnboardingInviteCode:
      type: string
      description: A unique code that identifies an onboarding invite.
      example: N1IA5eWYNh
    OnboardingInviteError:
      type: object
      properties: *ref_551
    OnboardingInviteRequest:
      type: object
      required: *ref_552
      properties: *ref_553
      description: Request to create an onboarding invite.
    OnboardingPartnerAccount:
      type: object
      required: *ref_554
      properties: *ref_555
      description: The account that created the onboarding invite.
    OperatingCountry:
      type: string
      maxLength: 64
      example: United States
    OrderBy:
      type: string
      description: Optional parameter to order the results in the query.
      example: created-at:desc
    PartialScheduleAccount:
      type: object
      required: *ref_149
      properties: *ref_150
    PartnerPricing:
      type: object
      required: *ref_556
      properties: *ref_557
    PartnerPricingAgreement:
      type: object
      required: *ref_558
      properties: *ref_559
      allOf: *ref_560
    PatchAccount:
      type: object
      properties: *ref_561
      description: Describes the fields available when patching a Moov account.
    PatchAccountError:
      type: object
      properties: *ref_562
    PatchBusiness:
      type: object
      properties: *ref_563
    PatchIndividual:
      type: object
      properties: *ref_564
      description: Describes the fields available when patching an individual.
    PatchProfile:
      type: object
      properties: *ref_565
      description: |-
        Describes the fields available when patching a profile.
        Each object can be patched independent of patching the other fields.
    PatchSweepConfig:
      type: object
      properties: *ref_566
    PatchSweepConfigError:
      type: object
      properties: *ref_567
    PatchTransfer:
      type: object
      properties: *ref_568
    PaymentDetailsError:
      type: object
      properties: *ref_112
    PaymentLink:
      type: object
      required: *ref_107
      properties: *ref_108
      example: *ref_109
    PaymentLinkCode:
      type: string
      description: Unique code identifying this payment link.
      example: uc7ZYKrMhi
    PaymentLinkCustomerOptions:
      type: object
      properties: *ref_102
    PaymentLinkDisplayOptions:
      type: object
      required: *ref_100
      properties: *ref_101
      description: Customizable display options for a payment link.
    PaymentLinkDisplayOptionsUpdate:
      type: object
      properties: *ref_569
      description: Customizable display options for a payment link.
    PaymentLinkPaymentDetails:
      type: object
      required: *ref_103
      properties: *ref_104
      description: Options for payment links used to collect payment.
    PaymentLinkPaymentDetailsUpdate:
      type: object
      properties: *ref_570
      description: Options for payment links used to collect payment.
    PaymentLinkPayoutDetails:
      type: object
      required: *ref_105
      properties: *ref_106
    PaymentLinkPayoutDetailsUpdate:
      type: object
      properties: *ref_571
    PaymentLinkStatus:
      type: string
      enum: *ref_572
    PaymentMethod:
      oneOf: *ref_133
      discriminator: *ref_134
      description: A method of moving money
    PaymentMethodID:
      type: string
      format: uuid
      description: ID of the payment method.
    PaymentMethodType:
      type: string
      enum: *ref_33
      description: The payment method type that represents a payment rail and directionality
    PaymentMethodsBankAccount:
      type: object
      required: *ref_120
      properties: *ref_121
      description: A bank account as contained within a payment method.
    PaymentMethodsCard:
      type: object
      required: *ref_129
      properties: *ref_130
      description: A card as contained within a payment method.
    PaymentMethodsWallet:
      type: object
      required: *ref_165
      properties: *ref_166
    PayoutDetailsError:
      type: object
      properties: *ref_113
    PayoutRecipient:
      type: object
      required: *ref_573
      properties: *ref_574
      description: |-
        Specify the intended recipient of the payout.

        This information will be used to authenticate the end user when they follow the payment link.
    PayoutRecipientError:
      type: object
      properties: *ref_575
    PayoutRecipientUpdate:
      type: object
      properties: *ref_576
      description: |-
        Specify the intended recipient of the payout.

        This information will be used to authenticate the end user when they follow the payment link.
    PhoneNumber:
      type: object
      properties: *ref_2
    PhoneNumberError:
      type: object
      properties: *ref_8
    PlaidIntegration:
      type: object
      required: *ref_577
      properties: *ref_578
      description: |-
        The details of a Plaid processor integration for a linked funding source. 

        `sandbox` - When linking a bank account to a `sandbox` account using a Plaid processor token a default bank account
        response will be used. The following default data will be used to generate the bank account in this flow:

        ```
          RoutingNumber: "011401533",
          AccountNumber: "1111222233330000",
          AccountType:   "checking",
          Mask:          "0000"
        ```
    PlaidLinkIntegration:
      type: object
      required: *ref_579
      properties: *ref_580
      description: |-
        This is used by Moov.js with a Plaid reseller relationship. The details of a Plaid link integration for a linked funding source.

        You can simulate linking bank accounts with Plaid in test mode. See our [test mode](https://docs.moov.io/guides/get-started/test-mode/#plaid)
        guide for more information.

        Plaid's `sandbox` environment - (requires Plaid reseller setup with Moov). When linking a bank account to a `sandbox` account using a Plaid 
        public token it will utilize Plaid's sandbox environment. The Plaid public token provided must be generated from Plaid's sandbox environment. 
        Please see <a href="https://plaid.com/docs/api/sandbox/#sandboxpublic_tokencreate" target="_blank">Plaid's sandbox documentation</a> for more 
        details.
    PlaidLinkPayload:
      type: object
      required: *ref_581
      properties: *ref_582
      description: |-
        This is used by Moov.js with a Plaid reseller relationship. 

        Describes the account to link to the Moov account using a Plaid using a Plaid public token.
      title: Plaid Link
    PlaidPayload:
      type: object
      required: *ref_583
      properties: *ref_584
      description: Describes the account to link to the Moov account using a Plaid processor token.
      title: Plaid
    PrimaryRegulator:
      type: string
      enum: *ref_11
      description: If the business is a financial institution, this field describes its primary regulator.
    Profile:
      type: object
      properties: *ref_585
      description: Describes a Moov account profile. A profile will have a business or an individual, depending on the account's type.
    PullFromCardPaymentMethod:
      type: object
      required: *ref_586
      properties: *ref_587
      title: Pull from card
    PushToCardPaymentMethod:
      type: object
      required: *ref_588
      properties: *ref_589
      title: Push to card
    QRCode:
      type: object
      required: *ref_590
      properties: *ref_591
    RTPFailureCode:
      type: string
      enum: *ref_592
      description: Status codes for RTP failures.
    RTPRejectionCode:
      type: string
      enum: *ref_593
      description: |-
        The rejection code of an RTP transaction that caused the bank account status to change.

        - AC03: Account Invalid
        - AC04: Account Closed
        - AC06: Account Blocked
        - AC14: Creditor Account Type Invalid
        - AG01: Transactions Forbidden On Account
        - AG03: Transaction Type Not Supported
        - MD07: Customer Deceased
    RTPTransactionDetails:
      type: object
      required: *ref_594
      properties: *ref_595
      description: RTP specific details about the transaction.
    RTPTransactionStatus:
      type: string
      enum: *ref_596
      description: Status of a transaction within the RTP lifecycle.
    ReceiptKind:
      type: string
      enum: *ref_248
      description: The type of receipt being requested.
    ReceiptRequest:
      type: object
      required: *ref_597
      properties: *ref_598
      description: A receipt request for a specific transfer, schedule, or schedule occurrence.
    ReceiptResponse:
      type: object
      required: *ref_249
      properties: *ref_250
      example: *ref_251
    ReceiptValidationError:
      type: object
      properties: *ref_599
    ReceiptValidationErrorResponse:
      type: object
      additionalProperties: *ref_600
      example: *ref_601
    Recur:
      type: object
      required: *ref_147
      properties: *ref_148
      description: Defines configuration for recurring transfers.
    RefreshToken:
      type: string
      maxLength: 4096
      description: A value passed to the authorization server to obtain a new access token.
      example: eyJhbGc0eSI6TQSIsImN0kpXVCIsImtp6IkpXVsImtpZC0a...
    RefundCardDetails:
      type: object
      required: *ref_602
      properties: *ref_603
    RefundCardStatus:
      type: string
      enum: *ref_604
    RefundStatus:
      type: string
      enum: *ref_605
    RefundValidationError:
      type: object
      properties: *ref_606
    RegisterApplePayMerchantDomains:
      type: object
      properties: *ref_607
    Representative:
      type: object
      required: *ref_135
      properties: *ref_136
      description: Describes a business representative.
    RepresentativeResponsibilities:
      type: object
      properties: *ref_140
      description: Describes the job responsibilities of a business representative.
    RepresentativeResponsibilitiesError:
      type: object
      properties: *ref_608
    RepresentativeValidationError:
      type: object
      required: *ref_609
      properties: *ref_610
    RequestCard:
      type: object
      required: *ref_611
      properties: *ref_612
    RequestCardError:
      type: object
      properties: *ref_613
    RequestIDHeader:
      type: object
    RequirementError:
      type: object
      required: *ref_614
      properties: *ref_615
    RequirementErrorCode:
      type: string
      enum: *ref_616
    RequirementID:
      type: string
      enum: *ref_54
      description: The unique ID of what the requirement is asking to be filled out.
    ReturnPolicyType:
      type: string
      enum: *ref_617
    Reversal:
      oneOf: *ref_199
      description: Contains either a cancellation or refund, depending on the method used to reverse the transfer.
    ReversalValidationError:
      type: object
      properties: *ref_618
    ReversedWithCancellation:
      type: object
      required: *ref_619
      properties: *ref_620
      title: Canceled
    ReversedWithRefund:
      type: object
      required: *ref_621
      properties: *ref_622
      title: Refunded
    RevokeTokenRequest:
      type: object
      required: *ref_236
      properties: *ref_237
    RevokeTokenRequestError:
      type: object
      properties: *ref_623
    RtpCreditPaymentMethod:
      type: object
      required: *ref_624
      properties: *ref_625
      title: RTP credit
    RunTransfer:
      type: object
      required: *ref_145
      properties: *ref_146
      description: Defines the attributes of a transfer.
    SECCode:
      type: string
      enum: *ref_197
      description: Code used to identify the ACH authorization method.
    ScheduleListResponse:
      type: object
      properties: *ref_626
      allOf: *ref_627
    SchedulePaymentMethod:
      type: object
      required: *ref_143
      properties: *ref_144
    ScheduleResponse:
      type: object
      required: *ref_151
      properties: *ref_152
    ScheduleValidationError:
      type: object
      properties: *ref_153
    SentReceipt:
      type: object
      required: *ref_628
      properties: *ref_629
    Settings:
      type: object
      properties: *ref_15
      description: User provided settings to manage an account.
    SignedDecimalString:
      type: string
      format: ^\d+\.\d{1,2}$
      description: A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
      example: '-14.89'
    Skip:
      type: integer
      format: int64
      description: The number of entries to skip when paginating a large result set.
      example: 60
    SourceDestinationOptions:
      type: object
      properties: *ref_255
    Sweep:
      type: object
      required: *ref_211
      properties: *ref_212
    SweepConfig:
      type: object
      required: *ref_160
      properties: *ref_161
    SweepConfigID:
      type: string
      format: uuid
    SweepConfigPaymentMethod:
      type: object
      required: *ref_157
      properties: *ref_158
      description: |-
        The payment method used to push or pull funds to a bank account.
        The push payment method can only be ach-credit-standard or ach-credit-same-day. The pull payment method can only be ach-debit-fund.
    SweepConfigStatus:
      type: string
      enum: *ref_159
    SweepID:
      type: string
      format: uuid
    SweepStatementDescriptor:
      type: string
      minLength: 4
      maxLength: 10
      description: The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
    SweepStatus:
      type: string
      enum: *ref_210
    TaxID:
      type: object
      required: *ref_630
      properties: *ref_631
      description: An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
    TaxIDUpdate:
      type: object
      properties: *ref_632
      description: An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
    TerminalApplication:
      type: object
      required: *ref_162
      properties: *ref_163
      description: Describes a terminal application.
      example: *ref_164
    TerminalApplicationError:
      type: object
      properties: *ref_633
    TerminalApplicationID:
      type: string
      format: uuid
      description: ID of the terminal application.
      example: 12345678-1234-1234-1234-123456789012
    TerminalApplicationPlatform:
      type: string
      enum: *ref_252
      description: Platform of the terminal application.
      example: ios
    TerminalApplicationStatus:
      type: string
      enum: *ref_634
      description: Status of the terminal application.
      example: enabled
    TerminalCard:
      type: object
      properties: *ref_167
      description: Describes payment card details captured with tap or in-person payment.
      example: *ref_168
    TerminalConfiguration:
      type: object
      required: *ref_635
      properties: *ref_636
      description: Describes a terminal configuration.
      example: *ref_637
    TermsOfService:
      type: object
      required: *ref_638
      properties: *ref_639
      description: Describes the acceptance of the Terms of Service.
    TermsOfServiceError:
      type: object
      properties: *ref_24
    TermsOfServiceToken:
      type: object
      required: *ref_253
      properties: *ref_254
      description: An encrypted value used to record acceptance of Moov's Terms of Service.
    TermsOfServiceTokenUpdate:
      type: object
      properties: *ref_640
      description: An encrypted value used to record acceptance of Moov's Terms of Service.
    TokenType:
      type: string
      enum: *ref_641
      description: An [RFC 6750](https://www.rfc-editor.org/rfc/rfc6750#section-6.1) token type.
      example: Bearer
    TransactionSource:
      type: string
      enum: *ref_195
      description: |-
        Specifies the nature and initiator of a transaction. 

        Crucial for recurring and merchant-initiated transactions as per card scheme rules. 
        Omit for customer-initiated e-commerce transactions.
    Transfer:
      type: object
      required: *ref_192
      properties: *ref_193
      description: Details of a Transfer.
      title: Sync
      example: *ref_194
    TransferAccount:
      type: object
      required: *ref_170
      properties: *ref_171
    TransferDestination:
      type: object
      required: *ref_179
      properties: *ref_180
    TransferFailureReason:
      type: string
      enum: *ref_182
      description: Reason for a transfer's failure.
    TransferOptions:
      type: object
      properties: *ref_642
    TransferOptionsValidationError:
      type: object
      properties: *ref_643
    TransferParty:
      type: string
      enum: *ref_644
    TransferSource:
      type: object
      required: *ref_177
      properties: *ref_178
    TransferStatus:
      type: string
      enum: *ref_181
      description: Status of a transfer.
    TransferValidationError:
      type: object
      properties: *ref_645
    TransferWaitFor:
      type: string
      enum: *ref_198
    Underwriting:
      type: object
      required: *ref_200
      properties: *ref_201
      description: Describes underwriting values (in USD) used for card payment acceptance.
    UnderwritingStatus:
      type: string
      enum: *ref_646
      deprecated: true
    UpdateApplePayMerchantDomains:
      type: object
      properties: *ref_647
    UpdateBrand:
      type: object
      properties: *ref_648
    UpdateCard:
      type: object
      properties: *ref_649
      example: *ref_650
    UpdateCardAddress:
      type: object
      properties: *ref_651
      example: *ref_652
    UpdateCardError:
      type: object
      properties: *ref_653
    UpdateCardExpiration:
      type: object
      properties: *ref_654
      example: *ref_655
    UpdateColor:
      type: object
      properties: *ref_52
    UpdateColors:
      type: object
      properties: *ref_656
    UpdateEvidence:
      type: object
      properties: *ref_657
    UpdateIssuedCard:
      type: object
      properties: *ref_658
    UpdateIssuedCardError:
      type: object
      properties: *ref_659
    UpdatePaymentLink:
      type: object
      properties: *ref_660
      example: *ref_661
    UpdatePaymentLinkError:
      type: object
      properties: *ref_662
    UpdateRepresentative:
      type: object
      properties: *ref_663
    UpdateUnderwriting:
      type: object
      required: *ref_664
      properties: *ref_665
    UpdateUnderwritingError:
      type: object
      required: *ref_666
      properties: *ref_667
    UpsertSchedule:
      type: object
      properties: *ref_154
    Verification:
      type: object
      required: *ref_668
      properties: *ref_669
      description: Describes identity verification status and relevant identity verification documents.
    VerificationStatus:
      type: string
      enum: *ref_670
      description: Possible states an account verification can be in.
      deprecated: true
    VerificationStatusDetail:
      type: string
      enum: *ref_671
      description: Additional detail for a verification status.
      deprecated: true
    Versions:
      type: string
      enum:
        - v2024.01.00
        - v2025.01.00
        - v2025.04.00
        - v2025.07.00
        - v2025.10.00
        - latest
      description: |-
        Moov API versions. 

        API versioning follows the format `vYYYY.QQ.BB`, where 
          - `YYYY` is the year
          - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
          - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
            - For example, `v2024.01.00` is the initial release of the first quarter of 2024.

        The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
    VolumeByCustomerType:
      type: object
      required: *ref_202
      properties: *ref_203
    VolumeByCustomerTypeError:
      type: object
      properties: *ref_672
    Wallet:
      type: object
      required: *ref_208
      properties: *ref_209
      description: A Moov wallet to store funds for transfers.
    WalletAvailableBalance:
      type: object
      required: *ref_673
      properties: *ref_674
    WalletID:
      type: string
      format: uuid
    WalletTransaction:
      type: object
      required: *ref_216
      properties: *ref_217
      description: A transaction that funds or deducts from the wallet.
    WalletTransactionID:
      type: string
      format: uuid
    WalletTransactionSourceType:
      type: string
      enum: *ref_214
    WalletTransactionStatus:
      type: string
      enum: *ref_215
    WalletTransactionType:
      type: string
      enum: *ref_213
    WebhookData:
      oneOf: &ref_735
        - type: object
          required: &ref_677
            - accountID
          properties: &ref_678
            accountID:
              type: string
              format: uuid
            foreignID:
              type: string
              format: uuid
        - type: object
          required: &ref_681
            - accountID
          properties: &ref_682
            accountID:
              type: string
              format: uuid
            foreignID:
              type: string
              format: uuid
        - type: object
          required: &ref_679
            - accountID
          properties: &ref_680
            accountID:
              type: string
              format: uuid
            foreignID:
              type: string
              format: uuid
        - type: object
          required: &ref_683
            - accountID
            - walletID
          properties: &ref_684
            accountID:
              type: string
              format: uuid
            walletID:
              type: string
              format: uuid
        - type: object
          required: &ref_685
            - bankAccountID
            - accountID
          properties: &ref_686
            bankAccountID:
              type: string
              format: uuid
            accountID:
              type: string
              format: uuid
        - type: object
          required: &ref_689
            - bankAccountID
            - accountID
            - status
            - statusReason
          properties: &ref_690
            bankAccountID:
              type: string
              format: uuid
            accountID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_119
            statusReason:
              type: string
              enum: *ref_365
              description: The reason the bank account status changed to the current value.
            exceptionDetails:
              type: object
              required: *ref_39
              properties: *ref_40
              description: Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
        - type: object
          required: &ref_687
            - bankAccountID
            - accountID
          properties: &ref_688
            bankAccountID:
              type: string
              format: uuid
            accountID:
              type: string
              format: uuid
        - type: object
          required: &ref_691
            - cancellationID
            - transferID
            - status
          properties: &ref_692
            cancellationID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_374
        - type: object
          required: &ref_693
            - cancellationID
            - transferID
            - status
          properties: &ref_694
            cancellationID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_374
        - type: object
          required: &ref_699
            - cardID
            - accountID
            - updateType
          properties: &ref_700
            cardID:
              type: string
              format: uuid
            accountID:
              type: string
              format: uuid
            updateType:
              type: string
              enum: *ref_386
              description: The results of the card update request.
              example: number-update
        - type: object
          required: &ref_695
            - accountID
            - capabilityID
          properties: &ref_696
            accountID:
              type: string
              format: uuid
            foreignID:
              type: string
              format: uuid
            capabilityID:
              type: string
              enum: *ref_19
              description: |-
                Moov account capabilities.

                The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
        - type: object
          required: &ref_697
            - accountID
            - capabilityID
            - status
          properties: &ref_698
            accountID:
              type: string
              format: uuid
            foreignID:
              type: string
              format: uuid
            capabilityID:
              type: string
              enum: *ref_19
              description: |-
                Moov account capabilities.

                The `production-app` capability might appear in your list. This is a read-only capability that Moov requests and uses for account verification purposes. The capability remains active with your account and requires no additional action.
            status:
              type: string
              enum: *ref_53
              description: The status of the capability requested for an account.
        - type: object
          required: &ref_701
            - accountID
            - transferID
            - transactionID
            - disputeID
            - status
            - phase
          properties: &ref_702
            accountID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            transactionID:
              type: string
              format: uuid
            disputeID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_74
              description: |-
                The status of a particular dispute. 

                Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
            phase:
              type: string
              enum: *ref_448
              description: The phase of a dispute within the dispute lifecycle.
        - type: object
          required: &ref_703
            - accountID
            - transferID
            - transactionID
            - disputeID
            - status
            - phase
          properties: &ref_704
            accountID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            transactionID:
              type: string
              format: uuid
            disputeID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_74
              description: |-
                The status of a particular dispute. 

                Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
            phase:
              type: string
              enum: *ref_448
              description: The phase of a dispute within the dispute lifecycle.
        - type: object
          required: &ref_705
            - accountID
          properties: &ref_706
            accountID:
              type: string
              format: uuid
            visaMid:
              type: string
            mastercardMid:
              type: string
            discoverMid:
              type: string
            amexMid:
              type: string
            updatedOn:
              type: string
              format: date-time
        - type: object
          required: &ref_709
            - accountID
            - paymentMethodID
            - sourceID
          properties: &ref_710
            accountID:
              type: string
              format: uuid
            paymentMethodID:
              type: string
              format: uuid
            sourceID:
              type: string
              format: uuid
        - type: object
          required: &ref_707
            - accountID
            - paymentMethodID
            - sourceID
          properties: &ref_708
            accountID:
              type: string
              format: uuid
            paymentMethodID:
              type: string
              format: uuid
            sourceID:
              type: string
              format: uuid
        - type: object
          required: &ref_711
            - accountID
            - transferID
            - refundID
          properties: &ref_712
            accountID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            refundID:
              type: string
              format: uuid
        - type: object
          required: &ref_713
            - accountID
            - transferID
            - refundID
            - status
          properties: &ref_714
            accountID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            refundID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_605
        - type: object
          required: &ref_715
            - accountID
            - representativeID
          properties: &ref_716
            accountID:
              type: string
              format: uuid
            representativeID:
              type: string
              format: uuid
        - type: object
          required: &ref_719
            - accountID
            - representativeID
          properties: &ref_720
            accountID:
              type: string
              format: uuid
            representativeID:
              type: string
              format: uuid
        - type: object
          required: &ref_717
            - accountID
            - representativeID
          properties: &ref_718
            accountID:
              type: string
              format: uuid
            representativeID:
              type: string
              format: uuid
        - type: object
          required: &ref_721
            - walletID
            - sweepID
          properties: &ref_722
            walletID:
              type: string
              format: uuid
            sweepID:
              type: string
              format: uuid
        - type: object
          required: &ref_723
            - walletID
            - sweepID
            - status
          properties: &ref_724
            walletID:
              type: string
              format: uuid
            sweepID:
              type: string
              format: uuid
            transferID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_210
        - type: object
          required: &ref_725
            - terminalApplicationID
            - status
          properties: &ref_726
            terminalApplicationID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_634
              description: Status of the terminal application.
              example: enabled
        - type: object
          required: &ref_727
            - terminalApplicationID
            - status
          properties: &ref_728
            terminalApplicationID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_634
              description: Status of the terminal application.
              example: enabled
        - type: object
          required: &ref_729
            - accountID
            - transferID
            - status
          properties: &ref_730
            accountID:
              type: string
              format: uuid
              description: The accountID which facilitated the transfer.
            transferID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_181
              description: Status of a transfer.
        - type: object
          required: &ref_731
            - accountID
            - transferID
            - status
            - source
            - destination
          properties: &ref_732
            accountID:
              type: string
              format: uuid
              description: The accountID which facilitated the transfer.
            transferID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_181
              description: Status of a transfer.
            source:
              type: object
              required: &ref_675
                - accountID
                - paymentMethodID
              properties: &ref_676
                accountID:
                  type: string
                  format: uuid
                paymentMethodID:
                  type: string
                  format: uuid
              description: Payment method details for the source or destination of a transfer.
            destination:
              type: object
              required: *ref_675
              properties: *ref_676
              description: Payment method details for the source or destination of a transfer.
        - type: object
          required: &ref_733
            - accountID
            - walletID
            - transactionID
            - status
          properties: &ref_734
            accountID:
              type: string
              format: uuid
            walletID:
              type: string
              format: uuid
            transactionID:
              type: string
              format: uuid
            status:
              type: string
              enum: *ref_215
            availableBalance:
              type: object
              required: &ref_737
                - currency
                - value
                - valueDecimal
              properties: &ref_738
                currency:
                  type: string
                value:
                  type: integer
                  format: int64
                valueDecimal:
                  type: string
                  pattern: ^\d+\.\d{1,9}$
              description: The available balance of a wallet.
      description: The data for the webhook event. The contents are based on the event type.
    WebhookDataAccountCreated:
      type: object
      required: *ref_677
      properties: *ref_678
    WebhookDataAccountDeleted:
      type: object
      required: *ref_679
      properties: *ref_680
    WebhookDataAccountUpdated:
      type: object
      required: *ref_681
      properties: *ref_682
    WebhookDataBalanceUpdated:
      type: object
      required: *ref_683
      properties: *ref_684
    WebhookDataBankAccountCreated:
      type: object
      required: *ref_685
      properties: *ref_686
    WebhookDataBankAccountDeleted:
      type: object
      required: *ref_687
      properties: *ref_688
    WebhookDataBankAccountUpdated:
      type: object
      required: *ref_689
      properties: *ref_690
    WebhookDataCancellationCreated:
      type: object
      required: *ref_691
      properties: *ref_692
    WebhookDataCancellationUpdated:
      type: object
      required: *ref_693
      properties: *ref_694
    WebhookDataCapabilityRequested:
      type: object
      required: *ref_695
      properties: *ref_696
    WebhookDataCapabilityUpdated:
      type: object
      required: *ref_697
      properties: *ref_698
    WebhookDataCardAutoUpdated:
      type: object
      required: *ref_699
      properties: *ref_700
    WebhookDataDisputeCreated:
      type: object
      required: *ref_701
      properties: *ref_702
    WebhookDataDisputeUpdated:
      type: object
      required: *ref_703
      properties: *ref_704
    WebhookDataNetworkIDUpdated:
      type: object
      required: *ref_705
      properties: *ref_706
    WebhookDataPaymentMethodDisabled:
      type: object
      required: *ref_707
      properties: *ref_708
    WebhookDataPaymentMethodEnabled:
      type: object
      required: *ref_709
      properties: *ref_710
    WebhookDataRefundCreated:
      type: object
      required: *ref_711
      properties: *ref_712
    WebhookDataRefundUpdated:
      type: object
      required: *ref_713
      properties: *ref_714
    WebhookDataRepresentativeCreated:
      type: object
      required: *ref_715
      properties: *ref_716
    WebhookDataRepresentativeDisabled:
      type: object
      required: *ref_717
      properties: *ref_718
    WebhookDataRepresentativeUpdated:
      type: object
      required: *ref_719
      properties: *ref_720
    WebhookDataSweepCreated:
      type: object
      required: *ref_721
      properties: *ref_722
    WebhookDataSweepUpdated:
      type: object
      required: *ref_723
      properties: *ref_724
    WebhookDataTerminalApplicationCreated:
      type: object
      required: *ref_725
      properties: *ref_726
    WebhookDataTerminalApplicationUpdated:
      type: object
      required: *ref_727
      properties: *ref_728
    WebhookDataTransferCreated:
      type: object
      required: *ref_729
      properties: *ref_730
    WebhookDataTransferUpdated:
      type: object
      required: *ref_731
      properties: *ref_732
    WebhookDataWalletTransactionUpdated:
      type: object
      required: *ref_733
      properties: *ref_734
    WebhookEvent:
      type: object
      required:
        - eventID
        - type
        - data
        - createdOn
      properties:
        eventID:
          type: string
          format: uuid
          description: Unique identifier for the webhook event.
        type:
          type: string
          enum: &ref_736
            - account.created
            - account.updated
            - account.deleted
            - balance.updated
            - bankAccount.created
            - bankAccount.updated
            - bankAccount.deleted
            - cancellation.created
            - cancellation.updated
            - card.autoUpdated
            - capability.requested
            - capability.updated
            - dispute.created
            - dispute.updated
            - networkID.updated
            - paymentMethod.enabled
            - paymentMethod.disabled
            - refund.created
            - refund.updated
            - representative.created
            - representative.updated
            - representative.deleted
            - sweep.created
            - sweep.updated
            - terminalApplication.created
            - terminalApplication.updated
            - transfer.created
            - transfer.updated
            - walletTransaction.updated
          description: The type of event that occurred.
        data:
          oneOf: *ref_735
          description: The data for the webhook event. The contents are based on the event type.
        createdOn:
          type: string
          format: date-time
      description: Webhook events are sent to your webhook URL when certain actions occur in the Moov API. You can subscribe to these events to receive real-time notifications.
      x-speakeasy-include: true
    WebhookEventType:
      type: string
      enum: *ref_736
      description: The type of event that occurred.
    WebhookTransferPaymentMethodDetails:
      type: object
      required: *ref_675
      properties: *ref_676
      description: Payment method details for the source or destination of a transfer.
    WebhookWalletAvailableBalance:
      type: object
      required: *ref_737
      properties: *ref_738
      description: The available balance of a wallet.
    uuid:
      type: string
      format: uuid
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
x-speakeasy-globals:
  parameters:
    - $ref: '#/components/parameters/VersionHeader'
